<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ConcurrentHashMap源码分析</title>
    <url>/2019/04/10/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>ConcurrentHashMap是HashMap的线程安全版，基于JDK1.8分析其源码。</p>
<a id="more"></a>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><img src="image.jpg"></p>
<p>经典的开源框架Spring的底层数据结构就是使用ConcurrentHashMap实现的。</p>
<p>hash冲突的处理方式也与HashMap类似，冲突的记录被存储到同一位置。</p>
<p>JDK8中实现线程安全是使用<code>CAS</code>算法，而不是以前的<code>Segment</code>概念。</p>
<p>key和value都不允许为空。</p>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new, empty map with the default initial table size (16).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">               MAXIMUM_CAPACITY :</span><br><span class="line">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过提供初始容量，计算了 sizeCtl，sizeCtl = 【 (1.5 * initialCapacity + 1)，然后向上取最近的 2 的 n 次方】</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">            Thread.yield(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">        <span class="comment">// cas 将sizeCtl设置为-1，代表抢到了锁</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 默认初始容量为16</span></span><br><span class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                    <span class="comment">// 数组赋值给table table是volatile的</span></span><br><span class="line">                    table = tab = nt;</span><br><span class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                sizeCtl = sc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="sizeCtl"><a href="#sizeCtl" class="headerlink" title="sizeCtl"></a>sizeCtl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Table initialization and resizing control.  When negative, the</span></span><br><span class="line"><span class="comment">     * table is being initialized or resized: -1 for initialization,</span></span><br><span class="line"><span class="comment">     * else -(1 + the number of active resizing threads).  Otherwise,</span></span><br><span class="line"><span class="comment">     * when table is null, holds the initial table size to use upon</span></span><br><span class="line"><span class="comment">     * creation, or 0 for default. After initialization, holds the</span></span><br><span class="line"><span class="comment">     * next element count value upon which to resize the table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</span><br></pre></td></tr></table></figure>



<p>控制标识符，不同的值有不同的属性。</p>
<ul>
<li>负数代表正在初始化或正在扩容</li>
<li>-1代表正在初始化</li>
<li>-N标识有N-1个线程正在进行扩容操作</li>
<li>正数或0表示hash表还没被初始化，数值表示初始化或下一次扩容的大小。类似于HashMap中loadfactor的概念。它的值始终是当前ConcurrentHashMap容量的0.75倍，这与loadfactor是对应的。</li>
</ul>
<p>它是多线程共享的。</p>
<h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">volatile</span> V val;</span><br><span class="line">    <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>       </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>     </span>&#123; <span class="keyword">return</span> val; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> key.hashCode() ^ val.hashCode(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + val; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        Object k, v, u; Map.Entry&lt;?,?&gt; e;</span><br><span class="line">        <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class="line">                (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (v = e.getValue()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (k == key || k.equals(key)) &amp;&amp;</span><br><span class="line">                (v == (u = val) || v.equals(u)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Virtualized support for map.get(); overridden in subclasses.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                K ek;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                    ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的Node和HashMap中实现类似，但有不同，</p>
<ul>
<li><strong>它对val和next设置了volatile同步锁</strong></li>
<li>不允许调用<code>setValue</code>方法直接改变属性值</li>
<li>增加了find方法辅助map.get()方法</li>
</ul>
<h1 id="Unsafe与CAS"><a href="#Unsafe与CAS" class="headerlink" title="Unsafe与CAS"></a>Unsafe与CAS</h1><p>大量使用<code>U.compareAndSwap</code>方法，<strong>利用CAS算法实现无锁修改值</strong>。基本思想是不断的比较当前内存中的变量值与你指定的变量值是否相等，相等则接受，否则拒绝，因此当前线程中的值并不是最新值，修改可能覆盖其他线程的修改结果。<strong>类似乐观锁，SVN的思想</strong>。</p>
<h2 id="三个核心方法"><a href="#三个核心方法" class="headerlink" title="三个核心方法"></a>三个核心方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获得i位置上的节点</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function">Node&lt;K,V&gt; <span class="title">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用cas算法设置i节点的值，实现并发是因为指定i节点原来的值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用volatile方法设置节点的值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">void</span> <span class="title">setTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class="line">    U.putObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">// 计算hash</span></span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">    <span class="comment">// 相应链表长度</span></span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">        <span class="comment">// table为空，初始化</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            tab = initTable();</span><br><span class="line">        <span class="comment">// 根据hash计算节点的index</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 用一次CAS操作技能新值放入其中，put操作结束</span></span><br><span class="line">            <span class="comment">// 如果cas失败，说明有并发操作，进入下一个循环</span></span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                         <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 遇到表连接点，帮助进行整合表</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// f是该位置的头节点且不为空</span></span><br><span class="line">            V oldVal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 对table的index位置加锁，只锁住当前index位置</span></span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="comment">// 说明是链表节点</span></span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 记录链表长度</span></span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="comment">// hash与key相同，执行覆盖操作</span></span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                 (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="comment">// 遍历到了最后一个节点，新建节点插到最后</span></span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                          value, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 红黑树节点</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                              value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 链表长度大于8，转化为红黑树</span></span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    <span class="comment">// 不一定会进行红黑树转换，如果当前数组长度小于64，</span></span><br><span class="line">                    <span class="comment">// 选择进行数组扩容，而不是转换红黑树</span></span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>当key或value为null 的时候，抛出异常，因此ConcurrentHashMap的key与value都不能为空。</strong></p>
<p>流程：计算key的hashCode，然后计算table的index（(n-1) &amp; hash），如果index位置为null，使用casTabAt方法插入，否则使用synchronized关键字对index位置加锁，仅仅锁住index位置因此其他线程可以安全地获取其他位置，提高了并发。然后判断index位置上第一个节点的hashCode值，小于0为红黑树根节点。如果是链表节点，遍历，当hash与key相同时，修改节点值，否则添加新节点。是红黑树节点的情况暂不分析。</p>
<h1 id="get"><a href="#get" class="headerlink" title="get"></a>get</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</span><br><span class="line">    <span class="comment">// 计算hash</span></span><br><span class="line">    <span class="keyword">int</span> h = spread(key.hashCode());</span><br><span class="line">    <span class="comment">// hash对应index位置不为空</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((eh = e.hash) == h) &#123;</span><br><span class="line">            <span class="comment">// 链表头节点的key与传入的key相同且不为null，返回该节点的值</span></span><br><span class="line">            <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 节点在树上</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 遍历链表查找节点</span></span><br><span class="line">        <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>计算hash </li>
<li>根据hash得到index ：hash &amp; (len - 1)</li>
<li>根据该位置的节点性质查找<ol>
<li>null，返回null</li>
<li>该位置节点恰好就是，返回该节点的值</li>
<li>该位置节点hash &lt; 0 ，正在扩容，或者是红黑树</li>
<li>链表，遍历查找</li>
</ol>
</li>
</ol>
<h1 id="1-7中的ConcurrentHashMap"><a href="#1-7中的ConcurrentHashMap" class="headerlink" title="1.7中的ConcurrentHashMap"></a>1.7中的ConcurrentHashMap</h1><p>1.7中主要使用Segment实现线程安全。</p>
<p>整个ConcurrentHashMap有一个个Segment组成，即ConcurrentHashMap是一个Segment数组，Segment通过集成ReentrantLock进行加锁，每次锁住一个segment。</p>
<p>Segment数组不能扩容，扩容是Segment数组某个位置内部数组HashEntry进行扩容。</p>
<p><img src="https://www.javadoop.com/blogimages/map/3.png"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://blog.csdn.net/u010723709/article/details/48007881">CSDN-ConcurrentHashMap源码分析（JDK8版本）</a></li>
<li><a href="https://juejin.im/entry/59fc786d518825297f3fa968">掘金-Java 8 ConcurrentHashMap源码分析</a></li>
<li><a href="https://www.javadoop.com/post/hashmap">Javadoop - Java7/8 中的 HashMap 和 ConcurrentHashMap 全解析</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/2019/03/28/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>整理一些常用的git命令</p>
<a id="more"></a>

<h2 id="本地push到远程"><a href="#本地push到远程" class="headerlink" title="本地push到远程"></a>本地push到远程</h2><p>初始化本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>本地关联远程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@gitres</span><br></pre></td></tr></table></figure>

<p>添加和提交</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;注释&quot;</span></span><br></pre></td></tr></table></figure>

<p>push 远程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">第一次推送master分支时，加上-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，</span><br><span class="line">git push -u  origin master</span><br><span class="line"></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="添加文件目录"><a href="#添加文件目录" class="headerlink" title="添加文件目录"></a>添加文件目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加当前目录所有文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line">git add [file1] [file2]...</span><br><span class="line">git add [dir]</span><br></pre></td></tr></table></figure>

<h3 id="撤销add"><a href="#撤销add" class="headerlink" title="撤销add"></a>撤销add</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm --cached &lt;file&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8 Stream学习</title>
    <url>/2020/03/30/Java-8-Stream%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>Stream学习。</p>
<a id="more"></a>

<h1 id="什么是Stream"><a href="#什么是Stream" class="headerlink" title="什么是Stream"></a>什么是Stream</h1><p>Stream和lambda都是Java 8中重要的新特性。它允许你以<strong>声明式</strong>的方式处理数据集合</p>
<p>使用Stream有3步：</p>
<ol>
<li>创建Stream流</li>
<li>通过Stream流对象执行中间操作</li>
<li>执行最终操作，得到结果</li>
</ol>
<p>Stream中的源包括集合，数组，文件，正则表达式匹配器，随机数和其他流。流中的数据元素可以是对象引用或基本类型包括<strong>int，long，double</strong>。</p>
<h1 id="第一步：Stream创建"><a href="#第一步：Stream创建" class="headerlink" title="第一步：Stream创建"></a>第一步：Stream创建</h1><p>创建空的Stream</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.empty();</span><br><span class="line">IntStream intStream = IntStream.empty();</span><br></pre></td></tr></table></figure>

<h2 id="IntStreams"><a href="#IntStreams" class="headerlink" title="IntStreams"></a>IntStreams</h2><p>有以下几种方法：</p>
<ul>
<li>使用<code>IntStream.of()</code>方法</li>
<li>使用<code>IntStream.range(a,b)</code>（不包含b）和<code>IntStream.rangeClosed(a,b)</code>(包含b)</li>
<li><code>IntStream.iterate(1, i -&gt; i + 2)</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.</span></span><br><span class="line">    IntStream intStream = IntStream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 2.</span></span><br><span class="line">    IntStream intStream1 = IntStream.range(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">    IntStream intStream2 = IntStream.rangeClosed(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 3. 从1 开始，后面每个元素依次+2</span></span><br><span class="line">    IntStream intStream3 = IntStream.iterate(<span class="number">1</span>, i -&gt; i + <span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 4. 每个字符的int值</span></span><br><span class="line">    IntStream chars = <span class="string">&quot;ABCD&quot;</span>.chars();</span><br><span class="line">    <span class="comment">// 5. 生成5个1...10范围内的随机数</span></span><br><span class="line">    IntStream intStream4 = <span class="keyword">new</span> Random().ints(<span class="number">5</span>, <span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组流"><a href="#数组流" class="headerlink" title="数组流"></a>数组流</h2><p>基于现有的数组进行创建，或者基于of()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr = &#123;<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Jon&quot;</span>, <span class="string">&quot;Chandler&quot;</span>, <span class="string">&quot;Lion&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(arr);</span><br><span class="line">Stream&lt;String&gt; stream1 = Stream.of(<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Jon&quot;</span>, <span class="string">&quot;Chandler&quot;</span>, <span class="string">&quot;Lion&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="集合流"><a href="#集合流" class="headerlink" title="集合流"></a>集合流</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Jon&quot;</span>, <span class="string">&quot;Chandler&quot;</span>, <span class="string">&quot;Lion&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream = list.stream();</span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;(list);</span><br><span class="line">Stream&lt;String&gt; streamSet = set.stream();</span><br></pre></td></tr></table></figure>

<h2 id="从文件读取"><a href="#从文件读取" class="headerlink" title="从文件读取"></a>从文件读取</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; lines = Files.lines(Paths.get(<span class="string">&quot;file.txt&quot;</span>));</span><br></pre></td></tr></table></figure>

<h1 id="第二步：Stream处理"><a href="#第二步：Stream处理" class="headerlink" title="第二步：Stream处理"></a>第二步：Stream处理</h1><h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>将你要处理的元素集合缩小一定的范围，从而为后续的操作减轻压力，例如下面的代码是针对首字母进行过滤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Linda&quot;</span>, <span class="string">&quot;Chandler&quot;</span>, <span class="string">&quot;Luck&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(names).filter(s -&gt; s.startsWith(<span class="string">&quot;L&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="Skip"><a href="#Skip" class="headerlink" title="Skip"></a>Skip</h2><p>选择跳过前面N个元素来直接访问后面的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream1 = Stream.of(names).skip(<span class="number">2</span>);</span><br><span class="line">stream1.forEach(System.out::println);</span><br><span class="line"><span class="comment">// Linda Chandler Luck</span></span><br></pre></td></tr></table></figure>

<h2 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a>Distinct</h2><p>去重</p>
<h2 id="Sorted"><a href="#Sorted" class="headerlink" title="Sorted"></a>Sorted</h2><p>使用Java默认排序方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Linda&quot;</span>, <span class="string">&quot;Chandler&quot;</span>, <span class="string">&quot;Luck&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(names).sorted();</span><br><span class="line">stream.forEach(e -&gt; System.out.print(e + <span class="string">&quot; &quot;</span>));</span><br><span class="line"><span class="comment">// Alex Chandler Linda Lion Luck </span></span><br></pre></td></tr></table></figure>

<p> comparator 进行排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(names).sorted(Comparator.comparing(String::length));</span><br><span class="line">stream.forEach(e -&gt; System.out.print(e + <span class="string">&quot; &quot;</span>));</span><br><span class="line"><span class="comment">// Alex Lion Luck Linda Chandler</span></span><br></pre></td></tr></table></figure>

<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>将Stream 的元素映射到另一个值或类型，它可以将其转换为其他元素。这意味着此操作的结果可以是任何类型的Stream</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(names).map(String::toUpperCase);</span><br><span class="line">stream.forEach(e -&gt; System.out.print(e + <span class="string">&quot; &quot;</span>));</span><br><span class="line"><span class="comment">// ALEX LION LINDA CHANDLER LUCK</span></span><br></pre></td></tr></table></figure>

<p>转换类型</p>
<ul>
<li>.mapToInt();</li>
<li>.mapToDouble();</li>
<li>.mapToLong();</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IntStream stream = Stream.of(names).mapToInt(String::length);</span><br><span class="line">stream.forEach(e -&gt; System.out.print(e + <span class="string">&quot; &quot;</span>));</span><br><span class="line"><span class="comment">// 4 4 5 8 4 </span></span><br></pre></td></tr></table></figure>

<h1 id="第三步：执行最终操作"><a href="#第三步：执行最终操作" class="headerlink" title="第三步：执行最终操作"></a>第三步：执行最终操作</h1><p>最终操作就是产生结果结束Stream流程。类似forEach()或count()。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Linda&quot;</span>, <span class="string">&quot;Chandler&quot;</span>, <span class="string">&quot;Luck&quot;</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(names).skip(<span class="number">2</span>);</span><br><span class="line">stream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>通过<code>collect()</code>将Stream处理好的结果放置到某个地方，如Set。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Linda&quot;</span>, <span class="string">&quot;Chandler&quot;</span>, <span class="string">&quot;Luck&quot;</span>&#125;;</span><br><span class="line"><span class="comment">// To Set</span></span><br><span class="line">Set&lt;String&gt; collectSet = Stream.of(names).collect(Collectors.toSet());</span><br><span class="line"><span class="comment">// To List</span></span><br><span class="line">List&lt;String&gt; collectList = Stream.of(names).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<p>将Stream结果写入到集合类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Linda&quot;</span>, <span class="string">&quot;Chandler&quot;</span>, <span class="string">&quot;Luck&quot;</span>&#125;;</span><br><span class="line">LinkedList&lt;String&gt; collectionLinked = Stream.of(names</span><br><span class="line">        ).collect(Collectors.toCollection(LinkedList::<span class="keyword">new</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>写入数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Linda&quot;</span>, <span class="string">&quot;Chandler&quot;</span>, <span class="string">&quot;Luck&quot;</span>&#125;;</span><br><span class="line">String[] arr = Stream.of(names).toArray(String[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<p>写入Map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Linda&quot;</span>, <span class="string">&quot;Chandler&quot;</span>, <span class="string">&quot;Luck&quot;</span>&#125;;</span><br><span class="line">Map&lt;Character, List&lt;String&gt;&gt; groupList = Stream.of(names).collect(</span><br><span class="line">    Collectors.groupingBy(s -&gt; s.charAt(<span class="number">0</span>))</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 下面两种输出结果是一样的</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Character, List&lt;String&gt;&gt; entry : groupList.entrySet()) &#123;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot; - &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">groupList.forEach((character, strings) -&gt; System.out.println(character + <span class="string">&quot; - &quot;</span> + strings));</span><br></pre></td></tr></table></figure>

<h2 id="计算结果"><a href="#计算结果" class="headerlink" title="计算结果"></a>计算结果</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Linda&quot;</span>, <span class="string">&quot;Chandler&quot;</span>, <span class="string">&quot;Luck&quot;</span>&#125;;</span><br><span class="line"><span class="comment">// 计数</span></span><br><span class="line"><span class="keyword">long</span> count = Stream.of(names).count();</span><br><span class="line"><span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="comment">// 求和</span></span><br><span class="line"><span class="keyword">int</span> sum = IntStream.of(nums).sum();</span><br><span class="line"><span class="keyword">int</span> max = IntStream.of(nums).max().orElse(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 大集合</span></span><br><span class="line">IntSummaryStatistics statistics</span><br><span class="line">                = IntStream.of(nums).summaryStatistics();</span><br><span class="line"><span class="comment">// IntSummaryStatistics&#123;count=5, sum=24, min=1, average=4.800000, max=8&#125;</span></span><br><span class="line">System.out.println(statistics);</span><br></pre></td></tr></table></figure>

<h1 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h1><p>使用Stream还有另一个优点：方便并行处理。要使用并行流，在创建流时使用<code>parallelStream()</code>，或者在任意流加上<code>parallel()</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] names = &#123;<span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Lion&quot;</span>, <span class="string">&quot;Linda&quot;</span>, <span class="string">&quot;Chandler&quot;</span>, <span class="string">&quot;Luck&quot;</span>&#125;;</span><br><span class="line">List&lt;String&gt; list = Arrays.asList(names);</span><br><span class="line"><span class="comment">// 创建并行流</span></span><br><span class="line">Stream&lt;String&gt; stream = list.parallelStream().sorted();</span><br><span class="line">stream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用parallel()</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.of(names).parallel().sorted();</span><br><span class="line">stream.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>effective-java建议谨慎的使用并行流<a href="http://sjsdfg.gitee.io/effective-java-3rd-chinese/#/notes/48.%20%E8%B0%A8%E6%85%8E%E4%BD%BF%E7%94%A8%E6%B5%81%E5%B9%B6%E8%A1%8C">48. 谨慎使用流并行</a>。<strong>通常，并行性带来的性能收益在 ArrayList、HashMap、HashSet 和 ConcurrentHashMap 实例、数组、int 类型范围和 long 类型的范围的流上最好。</strong></p>
<h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><ul>
<li><a href="http://www.kehaw.com/java/2019/11/14/Java-Stream%E5%AD%A6%E4%B9%A0-%E5%88%9B%E5%BB%BA%E6%B5%81.html">Java-Stream学习第一步：创建流</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247485508&idx=2&sn=a686a128ccbcfa1fcc000d8b9de14155&chksm=ebd74945dca0c05378c3083c6efda294ea11db25705436d08a6d6af4e82993cac99804ee1553&token=2078489135&lang=zh_CN&scene=21#wechat_redirect">Java8中的流操作-基本使用&amp;性能测试</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247485026&idx=1&sn=8a99acd180aab1f5984f8b5eae8eab9f&chksm=ebd74763dca0ce758862de9453f155f9efdd28e39725b2067c54a5486449e8a14a1d5decb6c2&token=1755043505&lang=zh_CN&scene=21#wechat_redirect">Java 8的Stream代码，你能看懂吗？</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发学习-一</title>
    <url>/2019/03/27/Java%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0-%E4%B8%80/</url>
    <content><![CDATA[<p>创建线程的三种方式，线程相关方法。</p>
<a id="more"></a>

<h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><p>三种方式：继承Thread类重写run方法，实现Runnable接口，使用FutureTask方式。</p>
<h3 id="继承Thread类重写run方法"><a href="#继承Thread类重写run方法" class="headerlink" title="继承Thread类重写run方法"></a>继承Thread类重写run方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> Random rand = ThreadLocalRandom.current();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thread1</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;运行：&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(rand.nextInt(<span class="number">100</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread1 thread1 = <span class="keyword">new</span> Thread1(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        Thread1 thread2 = <span class="keyword">new</span> Thread1(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoByRun</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DemoByRun</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Random random = ThreadLocalRandom.current();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(name + <span class="string">&quot;运行：&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(random.nextInt(<span class="number">50</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> DemoByRun(<span class="string">&quot;A&quot;</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> DemoByRun(<span class="string">&quot;B&quot;</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用FutureTask"><a href="#使用FutureTask" class="headerlink" title="使用FutureTask"></a>使用FutureTask</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        DemoByCallable call = <span class="keyword">new</span> DemoByCallable();</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(call);</span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">        System.out.println(futureTask.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoByCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="继承Thread类的线程同步错误实现"><a href="#继承Thread类的线程同步错误实现" class="headerlink" title="继承Thread类的线程同步错误实现"></a>继承Thread类的线程同步错误实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket3 ticket1 = <span class="keyword">new</span> Ticket3();</span><br><span class="line">        Ticket3 ticket2 = <span class="keyword">new</span> Ticket3();</span><br><span class="line">        Ticket3 ticket3 = <span class="keyword">new</span> Ticket3();</span><br><span class="line">        ticket2.start();</span><br><span class="line">        ticket1.start();</span><br><span class="line">        ticket3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket3</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(currentThread().getName() + <span class="string">&quot;运行，此时的剩余票数&quot;</span> + <span class="keyword">this</span>.ticket--);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="继承Thread类的线程同步正确实现"><a href="#继承Thread类的线程同步正确实现" class="headerlink" title="继承Thread类的线程同步正确实现"></a>继承Thread类的线程同步正确实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ticket4 ticket4 = <span class="keyword">new</span> Ticket4();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket4).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket4).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket4).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket4</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">                System.out.println(currentThread().getName() + <span class="string">&quot;运行，此时的剩余票数为&quot;</span> + -- <span class="keyword">this</span>.ticket);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sleep(<span class="number">500</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>实现Runnable接口比继承Thread类所具有的优势：</p>
<p>1）：适合多个相同的程序代码的线程去处理同一个资源</p>
<p>2）：可以避免java中的单继承的限制</p>
<p>3）：增加程序的健壮性，代码可以被多个线程共享，代码和数据独立</p>
<p>4）：线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类</p>
<p>两者都有的：</p>
<p>适合多个相同的程序代码的线程去处理同一个资源<br>增加程序的健壮性，代码可以被多个线程共享，代码和数据独立</p>
<h2 id="线程状态的转换"><a href="#线程状态的转换" class="headerlink" title="线程状态的转换"></a>线程状态的转换</h2><ul>
<li><p><strong>新建状态（New）</strong>：新创建了一个线程对象</p>
</li>
<li><p><strong>就绪状态（Runnable）</strong>：线程对象创建后，其他线程调用了该对象的 start() 方法，该状态的线程位于可运行的线程池中，变为可运行状态，这个时候，只要获取了 cpu 的执行权，就可以运行，进入运行状态。</p>
</li>
<li><p><strong>运行状态（Running）</strong>： 就绪状态的线程从 cpu 获得了执行权之后，便可进入此状态，执行 run() 方法里面的代码。</p>
</li>
<li><p><strong>阻塞状态（Blocked）</strong>：阻塞状态是线程因为某种原因失去了 cpu 的使用权，暂时停止运行，一直等到线程进入就绪状态，才有机会转到运行状态，阻塞一般分为下面三种：</p>
<ul>
<li>等待阻塞 ：运行的线程执行了 wait() 方法， JVM 会把该线程放入线程等待池中，（wait() 会释放持有的锁 ）</li>
<li>同步阻塞：运行的线程在获取对象的同步锁时，如果该同步锁被其他线程占用，这时此线程是无法运行的，那么 JVM 就会把该线程放入锁池中，导致阻塞</li>
<li>其他阻塞：运行的线程执行 sleep() 或者 join() 方法，或者发出了 I/O 请求，JVM 会把该线程置为阻塞状态，当 sleep() 状态超时、join() 等待线程终止或者超时、或者 I/O 处理完毕时，线程会重新进入就绪状态，（注意：sleep() 是不会释放本身持有的锁的）</li>
</ul>
</li>
<li><p>无限期等待：等待其他线程显式地唤醒，否则不分配CPU时间片</p>
</li>
<li><p>死亡状态（Dead）：线程执行完了之后或者因为程序异常退出了 run() 方法，结束该线程的生命周期</p>
</li>
</ul>
<h2 id="线程间的协作"><a href="#线程间的协作" class="headerlink" title="线程间的协作"></a>线程间的协作</h2><h3 id="wait-notify-notifyAll"><a href="#wait-notify-notifyAll" class="headerlink" title="wait notify notifyAll"></a>wait notify notifyAll</h3><ul>
<li>三者都是object的方法，不属于thread，只能在synchronized中调用，否则报错IllegalMonitorStateException</li>
<li>wait方法使线程进入等待状态，并且会<strong>立即释放对象的锁</strong>。如果没有释放锁，其他线程就无法进入对象的同步方法块中，无法使用notify或notifyAll唤醒挂起的线程，造成死锁</li>
<li>notify会唤醒一个因wait处于阻塞状态的线程，使其进入就绪状态。notify<strong>不会马上释放对象锁</strong>，会等到执行完该同步方法或方法块后再释放</li>
<li>notifyALl会唤醒等待队列中等待统一资源的全部线程从等待状态退出。优先级最高的执行，也可能是随机执行</li>
</ul>
<p><strong>wait()</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadPrint</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object prev;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object self;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyThreadPrint</span><span class="params">(String name, Object prev, Object self)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        <span class="keyword">this</span>.self = self;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (prev) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (self) &#123;</span><br><span class="line">                    System.out.println(name);</span><br><span class="line">                    count--;</span><br><span class="line">                    self.notify();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    prev.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object A = <span class="keyword">new</span> Object();</span><br><span class="line">        Object B = <span class="keyword">new</span> Object();</span><br><span class="line">        Object C = <span class="keyword">new</span> Object();</span><br><span class="line">        MyThreadPrint myA = <span class="keyword">new</span> MyThreadPrint(<span class="string">&quot;A&quot;</span>, C, A);</span><br><span class="line">        MyThreadPrint myB = <span class="keyword">new</span> MyThreadPrint(<span class="string">&quot;B&quot;</span>, A, B);</span><br><span class="line">        MyThreadPrint myC = <span class="keyword">new</span> MyThreadPrint(<span class="string">&quot;C&quot;</span>, B, C);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(myA).start();</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">new</span> Thread(myB).start();</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">new</span> Thread(myC).start();</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Obj.wait()，与Obj.notify()必须要与synchronized(Obj)一起使用，也就是wait,与notify是针对已经获取了Obj锁进行操作，从语法角度来说就是Obj.wait(),Obj.notify必须在synchronized(Obj){…}语句块内。从功能上来说wait就是说线程在获取对象锁后，主动释放对象锁，同时本线程休眠。直到有其它线程调用对象的notify()唤醒该线程，才能继续获取对象锁，并继续执行。但有一点需要注意的是notify()调用后，并不是马上就释放对象锁的，而是在相应的synchronized(){}语句块执行结束，自动释放锁后，JVM会在wait()对象锁的线程中随机选取一线程，赋予其对象锁，唤醒线程，继续执行。Thread.sleep()与Object.wait()二者都可以暂停当前线程，释放CPU控制权，主要的区别在于<strong>Object.wait()在释放CPU同时，释放了对象锁的控制</strong>。</li>
</ul>
<h4 id="wait和sleep区别"><a href="#wait和sleep区别" class="headerlink" title="wait和sleep区别"></a>wait和sleep区别</h4><ul>
<li><p>wait是object的方法，sleep是thread的静态方法</p>
</li>
<li><p>wait会释放对象锁，sleep不会</p>
</li>
</ul>
<p>共同点： </p>
<ol>
<li><p>他们都是在多线程的环境下，都可以在程序的调用处阻塞指定的毫秒数，并返回。 </p>
</li>
<li><p>wait()和sleep()都可以通过interrupt()方法 打断线程的暂停状态 ，从而使线程立刻抛出InterruptedException。<br>如果线程A希望立即结束线程B，则可以对线程B对应的Thread实例调用interrupt方法。如果此刻线程B正在wait/sleep /join，则线程B会立刻抛出InterruptedException，在catch() {} 中直接return即可安全地结束线程。<br>需要注意的是，InterruptedException是线程自己从内部抛出的，并不是interrupt()方法抛出的。对某一线程调用 interrupt()时，如果该线程正在执行普通的代码，那么该线程根本就不会抛出InterruptedException。但是，一旦该线程进入到 wait()/sleep()/join()后，就会立刻抛出InterruptedException 。<br>不同点： </p>
</li>
<li><p>每个对象都有一个锁来控制同步访问。Synchronized关键字可以和对象的锁交互，来实现线程的同步。<br>sleep方法没有释放锁，而wait方法释放了锁，使得其他线程可以使用同步控制块或者方法。 </p>
</li>
<li><p>wait，notify和notifyAll只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用<br>所以sleep()和wait()方法的最大区别是：</p>
<p>sleep()睡眠时，保持对象锁，仍然占有该锁；而wait()睡眠时，释放对象锁。但是wait()和sleep()都可以通过interrupt()方法打断线程的暂停状态，从而使线程立刻抛出InterruptedException（但不建议使用该方法）。</p>
</li>
</ol>
<h3 id="Join"><a href="#Join" class="headerlink" title="Join()"></a>Join()</h3><p>在一个线程中调用另一个线程的join方法，会将当前线程挂起，直到目标线程结束。在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是<strong>主线程需要等待子线程执行完成之后再结束</strong>，这个时候就要用到join()方法了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">&quot;主线程运行开始!&quot;</span>);</span><br><span class="line">		Thread1 mTh1=<span class="keyword">new</span> Thread1(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">		Thread1 mTh2=<span class="keyword">new</span> Thread1(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">		mTh1.start();</span><br><span class="line">		mTh2.start();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			mTh1.join();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			mTh2.join();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;主线程运行结束!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程其他函数"><a href="#线程其他函数" class="headerlink" title="线程其他函数"></a>线程其他函数</h2><h3 id="start与run区别"><a href="#start与run区别" class="headerlink" title="start与run区别"></a>start与run区别</h3><p>start()是启动一个新线程。<br>通过start()方法来启动的新线程，处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行相应线程的run()方法，</p>
<ol>
<li>start() 可以启动一个新线程，run()不能</li>
<li>start()不能被重复调用，run()可以</li>
<li>start()中的run代码可以不执行完就继续执行下面的代码，即进行了线程切换。直接调用run方法必须等待其代码全部执行完才能继续执行下面的代码。</li>
<li>start() 实现了多线程，run()没有实现多线程。</li>
</ol>
<h3 id="yield"><a href="#yield" class="headerlink" title="yield():"></a>yield():</h3><p>暂停当前正在执行的线程对象，并执行其他线程。</p>
<p>yield()应该做的是让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。<br>结论：yield()从未导致线程转到等待/睡眠/阻塞状态。在大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。</p>
<h4 id="sleep-和yield-的区别"><a href="#sleep-和yield-的区别" class="headerlink" title="sleep()和yield()的区别"></a>sleep()和yield()的区别</h4><ul>
<li>sleep()和yield()的区别):sleep()使当前线程进入停滞状态，所以执行sleep()的线程在指定的时间内肯定不会被执行；yield()只是使当前线程重新回到可执行状态，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行。  </li>
<li>sleep 方法使当前运行中的线程睡眼一段时间，进入不可运行状态，这段时间的长短是由程序设定的，yield 方法使当前线程让出 CPU   占有权，但让出的时间是不可设定的。实际上，yield()方法对应了如下操作：先检测当前是否有相同优先级的线程处于同可运行状态，如有，则把 CPU  的占有权交给此线程，否则，继续运行原来的线程。所以yield()方法称为“退让”，它把运行机会让给了同等优先级的其他线程  </li>
<li>另外，sleep 方法允许较低优先级的线程获得运行机会，但 yield()  方法执行时，当前线程仍处在可运行状态，所以，不可能让出较低优先级的线程些时获得 CPU 占有权。在一个运行系统中，如果较高优先级的线程没有调用 sleep 方法，又没有受到 I\O 阻塞，那么，较低优先级线程只能等待所有较高优先级的线程运行结束，才有机会运行。 </li>
</ul>
<h3 id="setPriority-更改线程的优先级。"><a href="#setPriority-更改线程的优先级。" class="headerlink" title="setPriority(): 更改线程的优先级。"></a>setPriority(): 更改线程的优先级。</h3><blockquote>
<p>MIN_PRIORITY = 1<br>NORM_PRIORITY = 5<br>MAX_PRIORITY = 10  </p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/evankaka/article/details/44153709">Java多线程学习（吐血超详细总结）</a></p>
<p><a href="https://www.jianshu.com/p/e87ee54a13a4">Java多线程基础学习</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发学习-三</title>
    <url>/2019/03/28/Java%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0-%E4%B8%89/</url>
    <content><![CDATA[<p>Java中的锁，本文主要介绍synchronized关键字和ReentrantLock</p>
<a id="more"></a>

<h2 id="锁的分类"><a href="#锁的分类" class="headerlink" title="锁的分类"></a>锁的分类</h2><p>悲观锁：对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。<strong>Synchronize关键字和Lock的实现类都是悲观锁</strong></p>
<p>乐观锁：自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。Java中常用<strong>CAS算法实现乐观锁</strong>。</p>
<ul>
<li>Synchronized。JVM实现</li>
<li>显式Lock。JDK实现</li>
</ul>
<h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p>首先需要理解线程安全的两个方面：执行控制和内存可见。</p>
<p><strong>执行控制</strong>的目的是控制代码执行（顺序）及是否可以并发执行。</p>
<p><strong>内存可见</strong>控制的是线程执行结果在内存中对其它线程的可见性。根据Java内存模型的实现，线程在具体执行时，会先拷贝主存数据到线程本地（CPU缓存），操作完成后再把结果从线程本地刷到主存。</p>
<h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>基本性质：</p>
<ul>
<li>互斥锁。一次只允许一个线程进入被锁 的代码块。</li>
<li>使用对象的内置锁将代码块锁定。Java中每个对象都有一个<strong>内置锁</strong></li>
<li>保证线程的<strong>原子性</strong>。被保护的代码块是一次被执行的，没有任何线程会同时访问</li>
<li>保证线程的<strong>可见性</strong>。当执行完synchronized之后，修改后的变量对其他的线程是可见的</li>
</ul>
<p><strong>通过内置锁实现原子性和可见性</strong>。</p>
<p>synchronized是Java提供的原子性内置锁，每个对象都可以把它当做锁来使用，称为内部锁，监视器锁。synchronized代码块自动获取内部锁，。</p>
<p><strong>synchronized</strong>关键字解决的是执行控制的问题，它会阻止其它线程获取当前对象的监控锁，这样就使得当前对象中被synchronized关键字保护的代码块无法被其它线程访问，也就无法并发执行。</p>
<p>更重要的是，synchronized还会创建一个内存屏障，内存屏障指令保证了所有CPU操作结果都会直接刷到主存中，从而保证了操作的内存可见性，同时也使得先获得这个锁的线程的所有操作，都happens-before于随后获得这个锁的线程的操作。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>几种用途：</p>
<ul>
<li>修饰代码块。被修饰的代码块称为同步语句块，作用范围是大括号括起来的代码，作用对象是调用这个代码块的对象。</li>
<li>修饰普通方法。被修饰的方法为同步方法，作用是整个方法，作用对象是调用这个方法的对象。s</li>
<li>修饰静态方法。作用于整个静态方法，作用对象是这个类的所有对象。</li>
<li>修饰类：作用是synchronized括号中的部分，对象是这个类中所有对象。</li>
</ul>
<h4 id="修饰代码块"><a href="#修饰代码块" class="headerlink" title="修饰代码块"></a>修饰代码块</h4><p>作用于同一个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + count++);</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BlockDemo blockDemo = <span class="keyword">new</span> BlockDemo();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(blockDemo, <span class="string">&quot;thread1&quot;</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(blockDemo, <span class="string">&quot;thread2&quot;</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">thread1: 0</span></span><br><span class="line"><span class="comment">thread1: 1</span></span><br><span class="line"><span class="comment">thread1: 2</span></span><br><span class="line"><span class="comment">thread1: 3</span></span><br><span class="line"><span class="comment">thread1: 4</span></span><br><span class="line"><span class="comment">thread2: 5</span></span><br><span class="line"><span class="comment">thread2: 6</span></span><br><span class="line"><span class="comment">thread2: 7</span></span><br><span class="line"><span class="comment">thread2: 8</span></span><br><span class="line"><span class="comment">thread2: 9</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>

<p>两个并发线程(thread1和thread2)访问同一个对象(blockDemo)中的synchronized代码块，同一时刻只能有一个线程执行，必须等到一个线程执行完另一个线程才执行。</p>
<p>修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> BlockDemo(), <span class="string">&quot;thread1&quot;</span>);</span><br><span class="line">Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> BlockDemo(), <span class="string">&quot;thread2&quot;</span>);</span><br><span class="line">thread1.start();</span><br><span class="line">thread2.start();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">thread1: 0</span></span><br><span class="line"><span class="comment">thread2: 1</span></span><br><span class="line"><span class="comment">thread1: 2</span></span><br><span class="line"><span class="comment">thread2: 3</span></span><br><span class="line"><span class="comment">thread2: 4</span></span><br><span class="line"><span class="comment">thread1: 5</span></span><br><span class="line"><span class="comment">thread2: 6</span></span><br><span class="line"><span class="comment">thread1: 7</span></span><br><span class="line"><span class="comment">thread1: 8</span></span><br><span class="line"><span class="comment">thread2: 9</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>

<p>两把锁分别锁定两个对象，而这两把锁是互不干扰的，不形成互斥，所以两个线程可以同时执行</p>
<h4 id="修饰方法"><a href="#修饰方法" class="headerlink" title="修饰方法"></a>修饰方法</h4><p>作用于同一个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">func</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>synchronized关键字不能继承。 </p>
<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>态方法是属于类的而不属于对象的。同样的，synchronized修饰的静态方法锁定的是这个类的所有对象。</p>
<h4 id="修饰类"><a href="#修饰类" class="headerlink" title="修饰类"></a>修饰类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SynchronizedExample.class) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个线程调用同一个类的不同对象上的这种同步语句，也会进行同步。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>Java虚拟机中的同步基于进入和退出monitor对象实现，无论是显式同步哈市隐式同步都是如此。</p>
<p><strong>Monitor</strong>：一个同步工具或同步机制。每个Java对象都有一个看不见的锁，称为内部锁或Monitor锁。</p>
<p>synchronized底层是是<strong>通过进入和退出monitor对象实现，对象有自己的对象头，存储了很多信息，其中一个信息标示是被哪个线程持有</strong>。</p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>锁有四种状态：无锁，偏向锁，轻量级锁，重量级锁。锁可以升级，但是是单向的，只能从低到高级，不会出现锁的降级。</p>
<h4 id="无锁"><a href="#无锁" class="headerlink" title="无锁"></a>无锁</h4><p>没有对资源进行锁定，但是同时只有一个线程能修改成功。修改会在循环内进行，线程不断尝试修改共享资源，成功就退出，失败继续尝试。<strong>CAS即是无锁的实现</strong>。</p>
<h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><p>同一段代码一直被一个线程访问，那该线程自动获取锁，降低所得获取代价。目标就是在只有一个线程同步代码块时能够提高性能。</p>
<p>可以通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，关闭之后程序默认会进入轻量级锁状态。</p>
<h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><p>当锁是偏向锁时，被另外的线程访问，偏向锁升级为轻量级锁，其他线程通过自旋的形式获取锁，不会阻塞。</p>
<h4 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h4><p>当自旋超过一定的次数，升级为重量级锁</p>
<h4 id="可重入性"><a href="#可重入性" class="headerlink" title="可重入性"></a>可重入性</h4><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁</p>
<h2 id="与volatile比较"><a href="#与volatile比较" class="headerlink" title="与volatile比较"></a>与volatile比较</h2><ol>
<li>volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读。synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</li>
<li>volatile仅能够修饰变量，synchronized可以修饰变量，方法，类级别</li>
<li>volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性</li>
<li>volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。</li>
<li>volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化</li>
</ol>
<p>对于工作内存与主内存同步延迟现象导致的可见性问题，可以使用synchronized关键字或者volatile关键字解决，它们都可以使一个线程修改后的变量立即对其他线程可见。对于指令重排导致的可见性问题和有序性问题，则可以利用volatile关键字解决，因为volatile的另外一个作用就是禁止重排序优化。</p>
<h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockExample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LockExample lockExample = <span class="keyword">new</span> LockExample();</span><br><span class="line">        ExecutorService service = Executors.newCachedThreadPool();</span><br><span class="line">        service.execute(lockExample::function);</span><br><span class="line">        service.execute(lockExample::function);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">// 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 </span></span><br></pre></td></tr></table></figure>

<h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>ReentrantLock是基于AQS（AbstractQueuedSynchronizer）实现的，AQS的基础是CAS。</p>
<h3 id="与synchronized比较"><a href="#与synchronized比较" class="headerlink" title="与synchronized比较"></a>与synchronized比较</h3><ul>
<li>synchronize是JVM实现，Lock是JDK实现。</li>
<li>性能差别不大</li>
<li>synchronize的锁和Lock都是非公平锁，Lock可以实现公平锁</li>
<li>一个 ReentrantLock 可以同时绑定多个 Condition 对象。</li>
</ul>
<p>除非需要使用 ReentrantLock 的高级功能，否则优先使用 synchronized。这是因为 synchronized 是 JVM 实现的一种锁机制，JVM 原生地支持它，而 ReentrantLock 不是所有的 JDK 版本都支持。并且使用 synchronized 不用担心没有释放锁而导致死锁问题，因为 JVM 会确保锁的释放。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://juejin.im/post/5adf14dcf265da0b7b358d58">掘金 - Java锁机制了解一下</a></li>
<li>[CS-Notes](<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java">https://github.com/CyC2018/CS-Notes/blob/master/notes/Java</a> 并发.md#五互斥同步)</li>
<li><a href="https://tech.meituan.com/2018/11/15/java-lock.html">美团技术团队 - 不可不说的Java“锁”事</a></li>
<li><a href="https://blog.csdn.net/javazejian/article/details/72828483">深入理解Java并发之synchronized实现原理</a></li>
<li>《Java并发编程的艺术》</li>
<li>[CSDN - 全面理解Java内存模型(JMM)及volatile关键字</li>
<li><a href="https://blog.csdn.net/luoweifu/article/details/46613015">Java中Synchronized的用法</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发学习-二</title>
    <url>/2019/03/28/Java%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0-%E4%BA%8C/</url>
    <content><![CDATA[<p>Java内存模型，volatile关键字</p>
<a id="more"></a>

<h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p>线程安全问题。《深入理解Java虚拟机》定义，当多个线程访问同一个对象，如果不考虑这些线程在运行时环境下的调度和交替运行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获取正确结果，藏鞥对象是线程安全的。</p>
<p>出现线程安全的原因一般是 主内存和工作内存数据不一致和重排序导致。</p>
<h3 id="Java内存模型-1"><a href="#Java内存模型-1" class="headerlink" title="Java内存模型"></a>Java内存模型</h3><ul>
<li>并发编程两个关键问题：<br>线程之间如何通信，线程之间如何同步。</li>
<li>两种通信机制：共享内存，消息传递<ul>
<li>共享内存：线程之间共享程序的公共状态，线程之间通过写-读内存中的公共状态来隐式进行通信，典型的共享内存通信方式就是通过<strong>共享对象</strong>进行通信。</li>
<li>消息传递：线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行通信，在java中典型的消息传递方式就是<strong>wait()**和</strong>notify()**。</li>
</ul>
</li>
</ul>
<p>Java并发采用共享内存。  </p>
<p>Java线程之间的通信有Java内存模型（JMM）控制，他决定了一个线程的共享变量的写入何时对另一个线程可见。</p>
<p>从抽象角度：JMM定义了线程和主内存之间的抽象关系，线程之间的共享变量存储在主内存中，每个线程都有一个私有本地内存，本地内存中存储了该线程共享变量的副本。本地内存并不真实存在。</p>
<p><img src="20160921182337904"></p>
<p>两个线程，A和B通信，经历步骤：</p>
<ol>
<li>线程A将本地内存A中更新过的共享变量刷新到主内存中</li>
<li>线程B到主内存中读取A更新过得变量。</li>
</ol>
<h3 id="内存模型三大特性"><a href="#内存模型三大特性" class="headerlink" title="内存模型三大特性"></a>内存模型三大特性</h3><p>三大特性：原子性，可见性，有序性</p>
<h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p>
<p>举个最简单的例子，大家想一下假如为一个32位的变量赋值过程不具备原子性的话，会发生什么后果？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;i &#x3D; &#96;&#96;9&#96;&#96;;&#96;</span><br></pre></td></tr></table></figure>

<p> 　　假若一个线程执行到这个语句时，我暂且假设为一个32位的变量赋值包括两个过程：为低16位赋值，为高16位赋值。</p>
<p>　　那么就可能发生一种情况：当将低16位数值写入之后，突然被中断，而此时又有一个线程去读取i的值，那么读取到的就是错误的数据。</p>
<h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>可见性指当一个线程修改了共享变量的值，其它线程能够立即得知这个修改。Java 内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值来实现可见性的。</p>
<p>主要有三种实现可见性的方式：</p>
<ul>
<li>volatile</li>
<li>synchronized，对一个变量执行 unlock 操作之前，必须把变量值同步回主内存。</li>
<li>final，被 final 关键字修饰的字段在构造器中一旦初始化完成，并且没有发生 this 逃逸（其它线程通过 this 引用访问到初始化了一半的对象），那么其它线程就能看见 final 字段的值。</li>
</ul>
<h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>有序性指，在本线程内观察，所有操作都是有序的，在一个线程观察另一个线程，所有操作都是无序的。无序是因为发生了<strong>指令重排序</strong>。在Java内存模型，允许编译器和处理器对指令进行重排序，重排序不会影响单线程程序的执行，会影响到多线程并发执行的正确性。</p>
<p>volatile 关键字通过添加内存屏障的方式来禁止指令重排，即重排序时不能把后面的指令放到内存屏障之前。</p>
<p>也可以通过 synchronized 来保证有序性，它保证每个时刻只有一个线程执行同步代码，相当于是让线程顺序执行同步代码。</p>
<h3 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h3><p>为提高性能，编译器处理器对指令进行重排序，分为三种：</p>
<ul>
<li>编译器优化</li>
<li>指令级并行</li>
<li>内存系统</li>
</ul>
<p><strong>针对编译器重排序</strong>，JMM的编译器重排序规则会禁止一些<strong>特定类型的编译器重排序</strong>；<strong>针对处理器重排序</strong>，编译器在生成指令序列的时候会通过<strong>插入内存屏障指令来禁止某些特殊的处理器重排序</strong>。</p>
<p><strong>编译器和处理器在重排序时，会遵守数据依赖性，编译器和处理器不会改变存在数据依赖性关系的两个操作的执行顺序</strong></p>
<h2 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h2><p>两个作用：</p>
<ul>
<li>保证volatile修饰的变量对所有线程可见</li>
<li>禁止指令重排序优化</li>
</ul>
<p><strong>volatile</strong>关键字解决的是内存可见性的问题，会使得所有对volatile变量的读写都会直接刷到主存，即保证了变量的可见性。这样就能满足一些对变量可见性有要求而对读取顺序没有要求的需求。</p>
<p>使用volatile关键字仅能实现对原始变量(如boolen、 short 、int 、long等)操作的原子性，但需要特别注意， <strong>volatile不能保证复合操作的原子性</strong>，即使只是i++，实际上也是由多个原子操作组成：read i; inc; write i，假如多个线程同时执行i++，volatile只能保证他们操作的i是同一块内存，但依然可能出现写入脏数据的情况。</p>
<p>volatile 关键字通过添加内存屏障的方式来禁止指令重排，即重排序时不能把后面的指令放到内存屏障之前。</p>
<p><strong>实现方式</strong>：写一个volatile变量时，JMM将线程对应的工作内存中共享变量刷新到主内存中，读取volatile变量，JMM将该线程对应的工作内存设置为无效，该线程从主内存中读取更像变量。</p>
<p>volatile自身变量具有特性：</p>
<ul>
<li>可见性。对一个volatile变量的读，总是能看到任意线程对这个volatile变量最后的写入。</li>
<li>原子性。对任意单个volatile变量的读/写具有原子性，但i++不具有。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/javazejian/article/details/72772461">全面理解Java内存模型(JMM)及volatile关键字</a>  </li>
<li><a href="https://blog.csdn.net/suifeng3051/article/details/52611310">全面理解Java内存模型</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/Java%20%E5%B9%B6%E5%8F%91.md#%E5%8D%81java-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">Java-并发-Java内存模型</a></li>
<li><a href="https://www.cnblogs.com/yjd_hycf_space/p/7505372.html">Java内存模型和JVM内存管理</a></li>
<li><a href="https://juejin.im/post/5ae6d309518825673123fd0e">掘金-Java内存模型以及happens-before规则</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发学习-四</title>
    <url>/2019/04/11/Java%E5%B9%B6%E5%8F%91%E5%AD%A6%E4%B9%A0-%E5%9B%9B/</url>
    <content><![CDATA[<p>线程池</p>
<a id="more"></a>



<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p><img src="1.jpg"></p>
<p><img src="2.jpg"></p>
<h2 id="使用线程池好处"><a href="#使用线程池好处" class="headerlink" title="使用线程池好处"></a>使用线程池好处</h2><ul>
<li>降低资源消耗，重复利用已创建线程</li>
<li>提高响应速度，任务可以不创建就立即执行</li>
<li>提高线程可管理性，线程池统一分配，监控</li>
</ul>
<h1 id="Executor框架接口"><a href="#Executor框架接口" class="headerlink" title="Executor框架接口"></a>Executor框架接口</h1><h2 id="Executor接口"><a href="#Executor接口" class="headerlink" title="Executor接口"></a>Executor接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动线程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread();</span><br><span class="line">executor.execute(t);</span><br></pre></td></tr></table></figure>

<h2 id="ExecutorService接口"><a href="#ExecutorService接口" class="headerlink" title="ExecutorService接口"></a>ExecutorService接口</h2><p>一般使用该接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executor = Executors.newFixedThreadPool(args...);</span><br><span class="line">ExecutorService executor = Executors.newCachedThreadPool(args...);</span><br></pre></td></tr></table></figure>



<h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p>ThreadPoolExecutor 是 JDK 中的线程池实现，这个类实现了一个线程池需要的各个方法，它实现了任务提交、线程管理、监控等等方法。</p>
<h3 id="构造函数及重要属性"><a href="#构造函数及重要属性" class="headerlink" title="构造函数及重要属性"></a>构造函数及重要属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>corePoolSize</strong>：核心线程数量，默认不会被回收</li>
<li><strong>maximumPoolSize</strong>：最大线程数量，线程池能容纳的最大容量，上限被CAPACITY限制（2^29-1）。corePoolSize到maximumPoolSize之间的线程会被回收</li>
<li><strong>keepAliveTime</strong>：如果线程数超过corePoolSize，有些线程空闲时间超过该值，执行关闭这些线程</li>
<li><strong>unit</strong>：keepAliveTime单位</li>
<li><strong>workQueue</strong>：存放任务的队列，添加任务时如果当前线程数超过corePoolsize，向该队列添加任务，线程池中的线程负责到队列中拉取任务</li>
<li><strong>threadFactory</strong>：创建线程的工厂类</li>
<li><strong>handler</strong>：任务执行失败使用handler通知调用者，默认为抛出异常。</li>
</ul>
<h3 id="线程池状态"><a href="#线程池状态" class="headerlink" title="线程池状态"></a>线程池状态</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Packing and unpacking ctl</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Running</strong>：接受新任务，处理队列中的任务</li>
<li><strong>Shutdown</strong>：不接受提交新任务，处理等待队列中的任务</li>
<li><strong>Stop</strong>：不接受提交新任务，不处理队列中任务，中断正在执行的线程</li>
<li><strong>Tidying</strong>：所有任务销毁，执行terminated()</li>
<li><strong>Terminated</strong>：terminated()结束后</li>
</ul>
<p><img src="3.jpg"></p>
<h3 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h3><p>队列和线程池都满了，线程池饱和，采取一种策略处理提交的新任务。</p>
<p>线程池框架提供四种策略：</p>
<ol>
<li>AbortPolicy：直接抛出异常。（默认策略）</li>
<li>CallerRunsPolicy：只用调用者所在线程来运行任务。</li>
<li>DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务</li>
<li>DiscardPolicy：不处理，丢弃。</li>
</ol>
<h2 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h2><p>工具类，提供工厂方法创建不同类型的线程池。</p>
<h3 id="四种常用线程池"><a href="#四种常用线程池" class="headerlink" title="四种常用线程池"></a>四种常用线程池</h3><ul>
<li>**newFixedThreadPool(int Threads)**：创建固定数目线程的线程池</li>
<li>**newCachedThreadPool()**：创建一个可缓存的线程池，调用execute 将重用以前构造的线程（如果线程可用）。如果没有可用的线程，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。</li>
<li>**newSingleThreadExecutor()**：创建一个单线程化的Executor。</li>
<li>**newScheduledThreadPool(int corePoolSize)**：建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。</li>
</ul>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>一般不建议使用Executors创建。使用Executors创建线程池可能会导致OOM(OutOfMemory ,内存溢出)</p>
<h3 id="正确创建线程池"><a href="#正确创建线程池" class="headerlink" title="正确创建线程池"></a>正确创建线程池</h3><p>直接调用<code>ThreadPoolExecutor</code>的构造函数来自己创建线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutorService executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">10</span>, <span class="number">10</span>,</span><br><span class="line">        <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<p>使用Guava的ThreadFactoryBuilder创建，不仅可以避免OOM的问题，还可以自定义线程名称，更加方便的出错的时候溯源。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecutorsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadFactory namedThreadFactory = <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">        .setNameFormat(<span class="string">&quot;demo-pool-%d&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutorService pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">200</span>,</span><br><span class="line">        <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">1024</span>), namedThreadFactory, <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</span><br><span class="line">            pool.execute(<span class="keyword">new</span> SubThread());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="线程创建时机"><a href="#线程创建时机" class="headerlink" title="线程创建时机"></a>线程创建时机</h2><ol>
<li>当前线程数少于corePoolSize，提交任务时新建一个新线程，有该线程执行这个任务</li>
<li>如果当前线程数已经达到corePoolSize，将提交的任务添加到队列中，等待线程池中的线程取队列中取任务。</li>
<li>如果队列已满，就创建新的线程执行任务，需要保证线程池中的线程数不超过maximumPoolSize，如果超过，执行拒绝策略。</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://www.javadoop.com/post/java-thread-pool">Javadoop - 深度解读 java 线程池设计思想及源码实现</a></li>
<li><a href="https://juejin.im/entry/58fada5d570c350058d3aaad">掘金 - 深入理解 Java 线程池：ThreadPoolExecutor</a></li>
<li><a href="https://juejin.im/post/5c99c29ee51d4559bb5c6541">掘金 - 重走JAVA之路（五）：面试又被问线程池原理？教你如何反击</a></li>
<li><a href="https://www.hollischuang.com/archives/2888">Java中线程池，你真的会用吗？</a></li>
<li>方腾飞等. Java并发编程的艺术. 机械工业出版社, 2015.</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用脚本收集</title>
    <url>/2019/05/30/Linux%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>包括Docker, Docker-compose</p>
<a id="more"></a>

<h2 id="服务器评测"><a href="#服务器评测" class="headerlink" title="服务器评测"></a>服务器评测</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -qO- git.io/superbench.sh | bash</span><br></pre></td></tr></table></figure>



<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>适用于Ubuntu 18.04</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line">apt-get update</span><br><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot;</span><br><span class="line">sudo apt update</span><br><span class="line">apt-get install docker-ce docker-ce-cli containerd.io</span><br><span class="line">docker --version</span><br></pre></td></tr></table></figure>

<p>如果出现 <code>unable to resolve host ubuntu</code>，首先查看<code>/etc/hostname</code>中的内容，之后编辑<code>/etc/hosts</code>，添加以下内容：<code>127.0.1.1        ubutnu</code></p>
<h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-Linux-x86_64&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br><span class="line">echo &#x27;docker docker-compose installed&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="安装-Miniconda"><a href="#安装-Miniconda" class="headerlink" title="安装 Miniconda"></a>安装 Miniconda</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>

<p>之后执行脚本，选择安装位置（我一般选<code>/usr/local/bin/miniconda3</code>）</p>
<h2 id="plus"><a href="#plus" class="headerlink" title="plus"></a>plus</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure>

<h2 id="Rclone"><a href="#Rclone" class="headerlink" title="Rclone"></a>Rclone</h2><p>使用Rclone挂载Onedriver网盘</p>
<p><a href="https://rclone.org/install/">官网安装教程</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://rclone.org/install.sh | sudo bash</span><br></pre></td></tr></table></figure>

<p>客户端授权。</p>
<p>需要在本地Windows上下载rclone。<a href="https://rclone.org/downloads/">下载</a>。解压。使用cmd进入rclone文件夹。执行<code>reclone authorize “onedrive”</code>，选择，登录onedriver账号后会出现<code>&#123;&#39;accss_token&#39;:&#39;xxx&#39;&#125;</code>，复制xxx内容</p>
<p>之后在Linux上通过脚本安装。安装完成执行：</p>
<blockquote>
<p>rclone config</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">No remotes found - make a new one</span><br><span class="line">n) New remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line"><span class="meta">n/s/q&gt;</span><span class="bash"> n</span></span><br><span class="line"><span class="meta">name&gt;</span><span class="bash"> spring</span></span><br><span class="line">Type of storage to configure.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line">Choose a number from below, or type in your own value</span><br><span class="line"> ....</span><br><span class="line">19 / Microsoft OneDrive</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">Storage&gt;</span><span class="bash"> 19</span></span><br><span class="line">** See help for onedrive backend at: https://rclone.org/onedrive/ **</span><br><span class="line"></span><br><span class="line">Microsoft App Client Id</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line"><span class="meta">client_id&gt;</span><span class="bash"> </span></span><br><span class="line">Microsoft App Client Secret</span><br><span class="line">Leave blank normally.</span><br><span class="line">Enter a string value. Press Enter for the default (&quot;&quot;).</span><br><span class="line"><span class="meta">client_secret&gt;</span><span class="bash"> </span></span><br><span class="line">Edit advanced config? (y/n)</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line"><span class="meta">y/n&gt;</span><span class="bash"> n</span></span><br><span class="line">Remote config</span><br><span class="line">Use auto config?</span><br><span class="line"> * Say Y if not sure</span><br><span class="line"> * Say N if you are working on a remote or headless machine</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line"><span class="meta">y/n&gt;</span><span class="bash"> n</span></span><br><span class="line">For this to work, you will need rclone available on a machine that has a web browser available.</span><br><span class="line">Execute the following on your machine:</span><br><span class="line">	rclone authorize &quot;onedrive&quot;</span><br><span class="line">Then paste the result below:</span><br><span class="line"><span class="meta">result&gt;</span><span class="bash"> <span class="comment">## 刚才复制的token</span></span></span><br><span class="line">Choose a number from below, or type in an existing value</span><br><span class="line"> 1 / OneDrive Personal or Business</span><br><span class="line">   \ &quot;onedrive&quot;</span><br><span class="line">Your choice&gt; 1</span><br><span class="line">Found 1 drives, please select the one you want to use:</span><br><span class="line">0:  (personal) id=xxx</span><br><span class="line">Chose drive to use:&gt; 0</span><br><span class="line">Found drive &#x27;root&#x27; of type &#x27;personal&#x27;, URL: https://onedrive.live.com/?cid=xx</span><br><span class="line">Is that okay?</span><br><span class="line">y) Yes</span><br><span class="line">n) No</span><br><span class="line"><span class="meta">y/n&gt;</span><span class="bash"> y</span></span><br><span class="line">--------------------</span><br><span class="line">[spring]</span><br><span class="line">type = onedrive</span><br><span class="line">token = xxx</span><br><span class="line">drive_id = xxx</span><br><span class="line">drive_type = personal</span><br><span class="line">--------------------</span><br><span class="line">y) Yes this is OK</span><br><span class="line">e) Edit this remote</span><br><span class="line">d) Delete this remote</span><br><span class="line"><span class="meta">y/e/d&gt;</span><span class="bash"> y</span></span><br><span class="line">Current remotes:</span><br><span class="line"></span><br><span class="line">Name                 Type</span><br><span class="line">====                 ====</span><br><span class="line">xxx               onedrive</span><br><span class="line"></span><br><span class="line">e) Edit existing remote</span><br><span class="line">n) New remote</span><br><span class="line">d) Delete remote</span><br><span class="line">r) Rename remote</span><br><span class="line">c) Copy remote</span><br><span class="line">s) Set configuration password</span><br><span class="line">q) Quit config</span><br><span class="line"><span class="meta">e/n/d/r/c/s/q&gt;</span><span class="bash"> q</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>挂载</p>
<blockquote>
<p>rclone mount DriveName:Folder LocalFolder –copy-links –no-gzip-encoding –no-check-certificate –allow-other –allow-non-empty –umask 00</p>
</blockquote>
<p>这样挂载后会卡住不动，因此可以让其在后台运行：</p>
<blockquote>
<p>nohup rclone mount DriveName:Folder LocalFolder –copy-links –no-gzip-encoding –no-check-certificate –allow-other –allow-non-empty –umask 00 &amp;</p>
</blockquote>
<p>之后使用<code>df -h</code>可以查看</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok安装及使用</title>
    <url>/2019/05/23/Lombok%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>使用IDEA安装Lombok及其使用。</p>
<a id="more"></a>

<h2 id="Lombok是什么"><a href="#Lombok是什么" class="headerlink" title="Lombok是什么"></a>Lombok是什么</h2><p>Lombok是一个通过注解以达到减少代码的Java库,如通过注解的方式减少get,set方法,构造方法等。</p>
<p>官网：<a href="https://projectlombok.org/">Project Lombok</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先向<code>pom.xml</code>中添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中 <code>scope=provided</code>，就说明 <code>Lombok</code> 只在编译阶段生效。也就是说，<code>Lombok</code> 会在编译期静悄悄地将带 <code>Lombok</code> 注解的源码文件正确编译为完整的 <code>class</code> 文件。</p>
<h3 id="IDEA插件"><a href="#IDEA插件" class="headerlink" title="IDEA插件"></a>IDEA插件</h3><p>通过安装插件，让IDEA能够识别。安装过程可参考官网：<a href="https://projectlombok.org/setup/intellij">setup - IntelliJ IDEA</a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>常用注解</p>
<ul>
<li><p>@var</p>
</li>
<li><p>@Data</p>
</li>
<li><p>@Setter @Getter</p>
</li>
<li><p>@NonNull</p>
</li>
<li><p>@Synchronized</p>
</li>
<li><p>@ToString</p>
</li>
<li><p>@Log</p>
</li>
<li><p>@EqualsAndHashCode</p>
</li>
<li><p>@Cleanup</p>
</li>
<li><p>@SneakyThrows</p>
</li>
</ul>
<h3 id="var"><a href="#var" class="headerlink" title="@var"></a>@var</h3><blockquote>
<p>Mutably! Hassle-free local variables.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList&lt;String&gt;(<span class="number">10</span>);</span><br><span class="line">    list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;Ming&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> one = list.get(<span class="number">0</span>);</span><br><span class="line">    System.out.println(one);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> a : list) &#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">    list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    list.add(<span class="string">&quot;Ming&quot;</span>);</span><br><span class="line">    String one = list.get(<span class="number">0</span>);</span><br><span class="line">    System.out.println(one);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String a : list) &#123;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h3><blockquote>
<p> All together now: A shortcut for <code>@ToString</code>, <code>@EqualsAndHashCode</code>, <code>@Getter</code> on all fields, and <code>@Setter</code> on all non-final fields, and <code>@RequiredArgsConstructor</code>!</p>
</blockquote>
<p>作用于类。相当于同时加上以下注解@Setter @Getter,@ToString,@EqualsAndHashCode</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="@Getter/@Setter"></a>@Getter/@Setter</h3><blockquote>
<p>Never write <code>public int getFoo() &#123;return foo;&#125;</code> again.</p>
</blockquote>
<p>作用于属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Getter</span><span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h3><blockquote>
<p>You can use <code>@NonNull</code> on the parameter of a method or constructor to have lombok generate a null-check statement for you.</p>
</blockquote>
<p>该注解快速判断是否为空,如果为空,则抛出java.lang.NullPointerException</p>
<p>官网例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonNullExample</span> <span class="keyword">extends</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NonNullExample</span><span class="params">(<span class="meta">@NonNull</span> Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.name = person.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NonNullExample</span> <span class="keyword">extends</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">NonNullExample</span><span class="params">(<span class="meta">@NonNull</span> Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (person == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;person is marked @NonNull but is null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = person.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Synchronized"><a href="#Synchronized" class="headerlink" title="@Synchronized"></a>@Synchronized</h3><p>作用范围为方法。自动添加到同步机制,有趣的是,生成的代码锁代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;MM-dd-YYYY&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Synchronized</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">synchronizedFormat</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> format.format(date);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> java.lang.Object $lock = <span class="keyword">new</span> java.lang.Object[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">private</span> DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;MM-dd-YYYY&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">synchronizedFormat</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> ($lock) &#123;</span><br><span class="line">        <span class="keyword">return</span> format.format(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h3><p>可以进一步设置：</p>
<ul>
<li>callSuper 是否输出父类的toString方法,默认为false</li>
<li>includeFieldNames 是否包含字段名称,默认为true</li>
<li>exclude 排除生成tostring的字段</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ToString(callSuper = true, exclude = &#123;&quot;address&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Log"><a href="#Log" class="headerlink" title="@Log"></a>@Log</h3><p>可以使用Log4j，Log4j2，Slf4j等。具体看<a href="https://projectlombok.org/features/log">官方文档</a></p>
<p><strong>SpringBoot选用 SLF4j和logback</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogEx</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h3><p>用于确保已分配的资源被释放,如IO的连接关闭。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCleanUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="meta">@Cleanup</span> ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        baos.write(<span class="keyword">new</span> <span class="keyword">byte</span>[] &#123;<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>&#125;);</span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>官方文档：<a href="https://projectlombok.org/features/all">Lombok features</a></li>
<li><a href="https://www.andyqian.com/2017/04/22/java/tools/Lombok%E8%AF%A6%E8%A7%A3/">Lombok使用详解</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基本语句总结</title>
    <url>/2019/04/03/MySQL%E5%9F%BA%E6%9C%AC%E8%AF%AD%E5%8F%A5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>学习《MySQL必知必会》，整理基本语句</p>
<a id="more"></a>

<h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="普通查询"><a href="#普通查询" class="headerlink" title="普通查询"></a>普通查询</h3><h4 id="DISTINCT-返回唯一的结果"><a href="#DISTINCT-返回唯一的结果" class="headerlink" title="DISTINCT 返回唯一的结果"></a>DISTINCT 返回唯一的结果</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">id</span> </span><br><span class="line"><span class="keyword">FROM</span> products</span><br></pre></td></tr></table></figure>

<h4 id="LIMIT-限制查询结果"><a href="#LIMIT-限制查询结果" class="headerlink" title="LIMIT 限制查询结果"></a>LIMIT 限制查询结果</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LIMIT 5,5</span><br></pre></td></tr></table></figure>
<p>从5行开始的第五行。（检索的第一行为0为而不是1）</p>
<h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><h4 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h4><p>默认按照升序排序。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> age, <span class="keyword">name</span>;</span><br></pre></td></tr></table></figure>
<p>首先按照age，在按照name，仅age 有多个相同的时候。</p>
<h5 id="排序方向"><a href="#排序方向" class="headerlink" title="排序方向"></a>排序方向</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ORDER BY age DESC, name</span><br></pre></td></tr></table></figure>
<p>按照age降序排序。name 升序排序。</p>
<h3 id="过滤数据"><a href="#过滤数据" class="headerlink" title="过滤数据"></a>过滤数据</h3><h4 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h4><p>在SELECT语句中，数据根据WHERE子句中指定的搜索条件进行过滤。 WHERE子句在表名（FROM子句）之后给出 。</p>
<p>WHERE子句的位置 在同时使用ORDER BY和WHERE子句时，应 该让ORDER BY位于WHERE之后， 否则将会产生错误  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span> </span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h5 id="BETWEEN"><a href="#BETWEEN" class="headerlink" title="BETWEEN"></a>BETWEEN</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHERE price BETWEEN 5 AND 10;</span><br></pre></td></tr></table></figure>
<p>BETWEEN匹配范围中所有的值，包括指定的开始值和结束值。  </p>
<h5 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">WHERE price age &lt; 10 AND price &gt; 5;</span><br></pre></td></tr></table></figure>

<h5 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h5><figure class="highlight"><table><tr><td class="code"><pre><span class="line">WHERE price age &lt; 10 OR price &gt; 5;</span><br></pre></td></tr></table></figure>

<h5 id="计算次序"><a href="#计算次序" class="headerlink" title="计算次序"></a>计算次序</h5><p>WHERE可包含任意数目的AND和OR操作符。允许两者结合以进行复杂 和高级的过滤。 </p>
<p>SQL（像多数语言一样）在处理OR操作符前，<strong>优先处理AND操 作符</strong>。AND在计算次序中优先级更高</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">WHERE (id = 1001 OR id = 1003) AND price &gt; 10;</span><br></pre></td></tr></table></figure>
<p>因为圆括号具有较AND或OR操作符高 的计算次序，DBMS首先过滤圆括号内的OR条件。<br> 任何时候使用具有AND和OR操作 符的WHERE子句，都应该使用圆括号明确地分组操作符。</p>
<h5 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h5><p>IN  WHERE子句中用来指定要匹配值的清单的关键字，功能与OR 相当。 </p>
<p>IN操作符用来指定条件范 围，范围中的每个条件都可以进行匹配。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">WHERE id IN (1002, 1004);</span><br></pre></td></tr></table></figure>
<p> <strong>IN操作符一般比OR操作符清单执行更快。</strong> IN的最大优点是可以包含其他SELECT语句，使得能够更动态地建 立WHERE子句。  </p>
<h3 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a>使用别名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, <span class="string">&#x27;(&#x27;</span>,vend_country, <span class="string">&#x27;)&#x27;</span> <span class="keyword">AS</span> vend_title</span><br></pre></td></tr></table></figure>

<p>使用<strong>Concat</strong>拼接字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	CONCAT(vend_name,&#39;(&#39;,vend_country, &#39;)&#39;)</span><br><span class="line">FROM</span><br><span class="line">	vendors </span><br><span class="line">order by vend_name</span><br></pre></td></tr></table></figure>

<p>执行算数计算</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><ul>
<li>AVG()</li>
<li>COUNT</li>
<li>MAX</li>
<li>MIN()</li>
<li>SUM()</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(age) <span class="keyword">AS</span> avg_price</span><br></pre></td></tr></table></figure>

<h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_prods</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span>;</span><br></pre></td></tr></table></figure>
<p>将分别计算每个id的数量。GROUP BY子句指 示MySQL按vend_id排序并分组数据。这导致对每个vend_id而不是整个表 计算num_prods一次 。</p>
<p>GROUP BY子句必须出现在WHERE子句之后， ORDER BY子句之前。  </p>
<h3 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h3><p>大部分类型的WHERE子句都可以用HAVING来替代。唯一的差别是 WHERE过滤行，而HAVING过滤分组。<br>HAVING支持所有WHERE操作符 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> orders</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>HAVING子句，它过滤COUNT(*) &gt;=2（两个以上的订单）的那些<br>分组。</p>
<p>有另一种理解方法，WHERE在数据 分组前进行过滤，HAVING在数据分组后进行过滤。这是一个重 要的区别，WHERE排除的行不包括在分组中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> orders</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">WHERE</span> price &gt;= <span class="number">10</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">id</span></span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*) &gt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>第一行是使用了聚集函数的基本SELECT，它与前 面的例子很相像。WHERE子句过滤所有prod_price至少为10的 行。然后按vend_id分组数据，HAVING子句过滤计数为2或2以上的分组。 </p>
<h3 id="分组和排序"><a href="#分组和排序" class="headerlink" title="分组和排序"></a>分组和排序</h3><p>一般在使用GROUP BY子句时，应该也给 出ORDER BY子句。这是保证数据正确排序的唯一方法。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num, <span class="keyword">SUM</span>(quantity*item_price) <span class="keyword">AS</span> ordertotal</span><br><span class="line"><span class="keyword">FROM</span> orderitems</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> order_num</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">SUM</span>(quantity*item_price) &gt;= <span class="number">50</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ordertotal</span><br></pre></td></tr></table></figure>

<p>GROUP BY子句用来按订单号（order_num列） 分组数据，以便SUM(*)函数能够返回总计订单价格。HAVING子 句过滤数据，使得只返回总计订单价格大于等于50的订单。后，用ORDER BY子句排序输出。 </p>
<h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><p><strong>DISTINCT</strong>和 <strong>GROUP BY</strong>都可用于去重，但是大表一般用distinct效率不高。</p>
<ol>
<li>当对系统的性能高并数据量大时使用group by</li>
<li>当对系统的性能不高时使用数据量少时两者皆可</li>
<li>尽量使用group by</li>
</ol>
<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> order_num</span><br><span class="line"><span class="keyword">FROM</span> orderitems</span><br><span class="line"><span class="keyword">WHERE</span> prod_id = <span class="string">&#x27;TNT2&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (<span class="number">20005</span>, <span class="number">20007</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_id</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">WHERE</span> order_num <span class="keyword">IN</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> order_num</span><br><span class="line">    <span class="keyword">FROM</span> orderitems</span><br><span class="line">    <span class="keyword">WHERE</span> prod_id = <span class="string">&#x27;TNT2&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>首先执行括号中的查询</p>
<h2 id="联结-Join"><a href="#联结-Join" class="headerlink" title="联结 Join"></a>联结 Join</h2><p>外键（foreign key）  外键为某个表中的一列，它包含另一个表 的主键值，定义了两个表之间的关系</p>
<h3 id="创建联结"><a href="#创建联结" class="headerlink" title="创建联结"></a>创建联结</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vent_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> vendors, products</span><br><span class="line"><span class="keyword">WHERE</span> vendors.vend_id = products.vend_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> vend_name, prod_name</span><br></pre></td></tr></table></figure>

<p>WHERE子句 指示MySQL匹配vendors表中的vend_id和products表中的vend_id。 </p>
<h3 id="内部联结-INNER-JOIN-ON"><a href="#内部联结-INNER-JOIN-ON" class="headerlink" title="内部联结(INNER JOIN ON)"></a>内部联结(INNER JOIN ON)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_name, prod_name, prod_price</span><br><span class="line"><span class="keyword">FROM</span> vendors <span class="keyword">INNER</span> <span class="keyword">JOIN</span> products</span><br><span class="line"><span class="keyword">ON</span> vendors.vend_id = products.vend_id</span><br></pre></td></tr></table></figure>

<p>与前面语句相同。两个表之间的关系是FROM子句的组成部分，以INNER JOIN指定。联结条件用特定的ON子句而不是WHERE 子句给出。传递给ON的实际条件与传递给WHERE的相同。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	cust_name,</span><br><span class="line">	cust_contact </span><br><span class="line">FROM</span><br><span class="line">	customers as c,</span><br><span class="line">	orders as o,</span><br><span class="line">	orderitems as oi </span><br><span class="line">WHERE</span><br><span class="line">	c.cust_id &#x3D; o.cust_id</span><br><span class="line">	AND o.order_num &#x3D; oi.order_num </span><br><span class="line">	AND prod_id &#x3D; &#39;TNT2&#39;</span><br></pre></td></tr></table></figure>

<p>首选 INNER JOIN</p>
<h2 id="高级联结"><a href="#高级联结" class="headerlink" title="高级联结"></a>高级联结</h2><h3 id="使用表别名"><a href="#使用表别名" class="headerlink" title="使用表别名"></a>使用表别名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, cust_age</span><br><span class="line"><span class="keyword">FROM</span> customers <span class="keyword">AS</span> c, orders <span class="keyword">AS</span> o, ordertimes <span class="keyword">AS</span> oi</span><br></pre></td></tr></table></figure>

<p>建立c作为customers 的别名</p>
<h3 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a>自联结</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	p1.prod_id,</span><br><span class="line">	p1.prod_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	products <span class="keyword">AS</span> p1,</span><br><span class="line">	products <span class="keyword">as</span> p2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	p1.vend_id = p2.vend_id</span><br><span class="line">	<span class="keyword">AND</span> p2.prod_id = <span class="string">&#x27;DTNTR&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>products是同一张表，第一次出现使用p1,p1前缀明确地给出所需列的全名；第二次出现使用p2</p>
<p><strong>使用自联结替代子查询</strong></p>
<h3 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a>自然联结</h3><h3 id="外部联结-LEFT-OUTER-JOIN"><a href="#外部联结-LEFT-OUTER-JOIN" class="headerlink" title="外部联结(LEFT OUTER JOIN)"></a>外部联结(LEFT OUTER JOIN)</h3><p>联结包含了那些在相关表中没有关联行的行。这种 类型的联结称为外部联结  </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	customers.cust_id,</span><br><span class="line">	orders.order_num </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	customers</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders <span class="keyword">ON</span> customers.cust_id = orders.cust_id</span><br></pre></td></tr></table></figure>

<p>使用<strong>LEFT OUTER JOIN</strong>从FROM 子句的左边表（customers表）中选择所有行。</p>
<h2 id="联结详解"><a href="#联结详解" class="headerlink" title="联结详解"></a>联结详解</h2><h3 id="内连接-INNER-JOIN-ON"><a href="#内连接-INNER-JOIN-ON" class="headerlink" title="内连接 INNER JOIN ON"></a>内连接 INNER JOIN ON</h3><p><img src="https://img-blog.csdn.net/20171209135846780?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcGxnMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p>
<h3 id="左连接-LEFT-JOIN-ON-LEFT-OUTER-JOIN-ON"><a href="#左连接-LEFT-JOIN-ON-LEFT-OUTER-JOIN-ON" class="headerlink" title="左连接 LEFT JOIN ON / LEFT OUTER JOIN ON"></a>左连接 LEFT JOIN ON / LEFT OUTER JOIN ON</h3><p>左边的表选择所有行，右边只显示符合搜索条件的记录</p>
<p><img src="F:\Hexo\source_posts\MySQL基本语句总结\SouthEast" alt="image"></p>
<h3 id="右连接-RIGHT-JOIN-ON-RIGHT-OUTRE-JOIN-ON"><a href="#右连接-RIGHT-JOIN-ON-RIGHT-OUTRE-JOIN-ON" class="headerlink" title="右连接 RIGHT JOIN ON / RIGHT OUTRE JOIN ON"></a>右连接 RIGHT JOIN ON / RIGHT OUTRE JOIN ON</h3><p><img src="https://img-blog.csdn.net/20171209144056668?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcGxnMTc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>
<h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><p>可用UNION操作符来组合数条SQL查询。利用UNION，可给出多条SELECT语句，将它们的结果组合成单个结果集。 </p>
<h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	vend_id,</span><br><span class="line">	prod_id,</span><br><span class="line">	prod_price </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	products </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	prod_price &lt;= <span class="number">5</span> </span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	vend_id,</span><br><span class="line">	prod_id,</span><br><span class="line">	prod_price </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	products </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	vend_id <span class="keyword">IN</span> ( <span class="number">1001</span>, <span class="number">1002</span> )</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> vend_id, prod_id, prod_price</span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> prod_price &lt;=<span class="number">5</span> <span class="keyword">OR</span> vend_id <span class="keyword">IN</span> (<span class="number">1001</span>, <span class="number">1002</span>)</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>UNION中的每个查询必须包含相同的列、表达式或聚集函数</li>
<li>UNION必须由两条或两条以上的SELECT语句组成，语句之间用关 键字UNION分隔（因此，如果组合4条SELECT语句，将要使用3个 UNION关键字） </li>
</ul>
<h3 id="UNION-ALL"><a href="#UNION-ALL" class="headerlink" title="UNION ALL"></a>UNION ALL</h3><p>UNION默认去除重复的行，使用UNION ALL 避免。</p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>SELECT语句的输出用ORDER BY子句排序。在用UNION组合查询时，只 能使用一条ORDER BY子句，它必须出现在最后一条SELECT语句之后。对 于结果集，不存在用一种方式排序一部分，而又用另一种方式排序另一 部分的情况，因此不允许使用多条ORDER BY子句。 </p>
<h2 id="增改删"><a href="#增改删" class="headerlink" title="增改删"></a>增改删</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers(cust_name,</span><br><span class="line">                      cust_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;id&#x27;</span>),</span><br><span class="line">      (<span class="string">&#x27;name_2&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;id_2&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> customers</span><br><span class="line"><span class="keyword">SET</span> cust_email = <span class="string">&#x27;mail&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> cust_id = <span class="number">1001</span>;</span><br></pre></td></tr></table></figure>

<p><strong>注意不要忘了where</strong></p>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> cust_di = <span class="number">1002</span>;</span><br></pre></td></tr></table></figure>

<h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> customers(</span><br><span class="line">    cust_id		<span class="built_in">int</span>		<span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    cust_name	<span class="built_in">char</span>(<span class="number">50</span>)<span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIVARY <span class="keyword">KEY</span> (cust_id)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span>;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>《MySQL必知必会》</p>
<p><a href="https://blog.csdn.net/plg17/article/details/78758593">CSDN-图解MySQL 内连接、外连接、左连接、右连接、全连接……太多了</a></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis设计与实现-笔记</title>
    <url>/2019/05/09/Redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>《Redis设计与实现》读书笔记，和其他资料，</p>
<a id="more"></a>

<h2 id="Redis使用场景"><a href="#Redis使用场景" class="headerlink" title="Redis使用场景"></a>Redis使用场景</h2><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><p>对String进行自增自减。Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</p>
<h3 id="查找表"><a href="#查找表" class="headerlink" title="查找表"></a>查找表</h3><p>例如 DNS 记录就很适合使用 Redis 进行存储。</p>
<p>查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</p>
<h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息</p>
<p>不过最好使用 Kafka、RabbitMQ 等消息中间件。</p>
<h3 id="实时消息系统"><a href="#实时消息系统" class="headerlink" title="实时消息系统"></a>实时消息系统</h3><p>通过发布与订阅实现</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Set 可以实现交集、并集等操作，从而实现共同好友等功能。</p>
<p>ZSet 可以实现有序性操作，从而实现排行榜等功能。</p>
<h2 id="简单动态字符串"><a href="#简单动态字符串" class="headerlink" title="简单动态字符串"></a>简单动态字符串</h2><p>相比于C字符串，SDS的优点：</p>
<ol>
<li>O(1)时间复杂度获取字符串长度</li>
<li>杜绝缓冲区溢出</li>
<li>减少修改字符串长度时所需的内存重新分配次数。<ol>
<li>空间预分配。</li>
<li>惰性空间释放。</li>
</ol>
</li>
<li>二进制安全。</li>
<li>兼容部分C字符串函数。</li>
</ol>
<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><ol>
<li>Redis的链表是双端链表，是无环链表。每个节点都有一个前指针和后指针。</li>
<li>Redis中的链表实现了很多功能，如列表键，发布与订阅，慢查询，监视器等。</li>
</ol>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ol>
<li>字典用于：数据库和哈希键等。</li>
<li>使用哈希表作为字典的底层实现，每个字典两个哈希表，一个平时使用，另一个在rehash是使用。</li>
<li>哈希表使用渐进式rehash进行扩容或收操作。</li>
<li>哈希表使用链地址法解决哈希冲突。同一个索引上的多个键值连接成一个单向链表。（类似Java中HashMap解决哈希冲突）<ol>
<li>备注：常用四种解决哈希冲突方法：开放定址法，链地址法，再哈希，建立公共溢出区。</li>
</ol>
</li>
</ol>
<h2 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h2><ol>
<li>跳跃表是有序集合的底层实现之一</li>
<li>每个跳跃表节点的层高都是1至32之间的随机数。</li>
<li>同一个跳跃表中，多个节点可以有相同的分值，成员对象必须是唯一的。</li>
<li>跳跃表中节点按分值大小排序，分值相同，节点按照成员对象大小排序。</li>
</ol>
<p>与红黑树相比，跳跃表的优点：</p>
<ol>
<li>实现简单</li>
<li>插入速度快速，不需要进行旋转</li>
<li>支持无锁操作。31</li>
</ol>
<h2 id="整数集合"><a href="#整数集合" class="headerlink" title="整数集合"></a>整数集合</h2><ol>
<li>是集合键的底层实现之一</li>
<li>底层为数组，有序，无重复的保存集合元素，有需要时，会根据新添加元素的类型，改变数组的类型。</li>
<li>升级好处：提升灵活性（不必担心类型错误），节约内存。</li>
<li>只支持升级，不支持降级。</li>
</ol>
<h2 id="压缩列表"><a href="#压缩列表" class="headerlink" title="压缩列表"></a>压缩列表</h2><ol>
<li>为节约内存而开发的顺序型数据结构</li>
<li>列表建和哈希键的底层实现之一</li>
<li>添加新节点，或者删除新节点，可能引发连锁更新（每个节点previous_entry_length更新），但出现几率不高。</li>
<li>可以包含多个节点，每个节点可以保存一个字节数组或者整数值。 </li>
</ol>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ol>
<li>数据库中每个键值对的键和值都是一个对象。</li>
<li>Redis共享值为0-9999的字符串对象。 </li>
</ol>
<h3 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h3><p>编码：int, raw, embstr</p>
<p>long类型的整数—int</p>
<p>long double类型的浮点数 — embstr或raw</p>
<p>字符串值或长度大的long类型 — embstr或raw。</p>
<p>embstr编码的对象被修改时总会变成raw编码。</p>
<h3 id="列表对象"><a href="#列表对象" class="headerlink" title="列表对象"></a>列表对象</h3><p>编码：ziplist或linkedlist(底层使用双端列表)</p>
<p>使用ziplist编码的条件：列表对象所有字符串长度都不小于64字节。列表对象保存的元素数量小于512个。</p>
<h3 id="哈希对象"><a href="#哈希对象" class="headerlink" title="哈希对象"></a>哈希对象</h3><p>编码：ziplist（底层压缩列表）或hashtable（字典）</p>
<h3 id="集合对象"><a href="#集合对象" class="headerlink" title="集合对象"></a>集合对象</h3><p>编码：intset(底层整数集合)或hashtable(底层字典)</p>
<h3 id="有序集合对象"><a href="#有序集合对象" class="headerlink" title="有序集合对象"></a>有序集合对象</h3><p>编码：ziplist 或 skiplist</p>
<h3 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h3><p>使用<strong>引用计数</strong>实现内存回收机制。对象不再被使用时就回收。</p>
<p>对象的生命周期：创建对象，操作对象，释放对象。</p>
<h3 id="对象共享"><a href="#对象共享" class="headerlink" title="对象共享"></a>对象共享</h3><p>通过对象的引用计数属性实现。</p>
<p>多个键共享一个值对象：</p>
<ol>
<li>数据库键的值指向一个现有值对象</li>
<li>被共享的值对象引用计数增一。</li>
</ol>
<p>Redis在初始化时，创建一万个字符串对象(0 - 9999的整数值)。用到时，服务器共享这些对象。</p>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a>RDB持久化</h3><ul>
<li><p>将某个时间点的所有数据都存放到硬盘上。保存数据库中的键值对</p>
</li>
<li><p>可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。</p>
</li>
<li><p>如果系统发生故障，将会丢失最后一次创建快照之后的数据。</p>
</li>
<li><p>如果数据量很大，保存快照的时间会很长。</p>
</li>
<li><p>两种生成RDB文件的命令：SAVE, BGSAVE</p>
</li>
<li><p>SAVE命令由服务器进程执行操作，会阻塞服务器。BGSAVE命令由子进程执行，不会阻塞服务器。</p>
</li>
<li><p>RDB文件是一个经过压缩的文件</p>
</li>
<li><p>如果开启了AOF持久化，会首先使用AOF文件</p>
</li>
</ul>
<h3 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h3><ul>
<li>通过保存Redis服务器所执行的写命令记录数据库状态</li>
<li>AOF文件所有命令都以Redis命令请求协议格式保存。</li>
<li>appendfsync选项对AOF持久化功能的安全性和Redis服务器的性能有很大影响。</li>
<li>服务器载入并执行AOF文件中的命令还原数据库。</li>
<li>AOF重写产生性的AOF文件，保存状态一样，体积更小</li>
<li>AOF重写通过读取数据库中的键值对实现，</li>
<li>使用 BGREWRITEAOF命令，完成AOF文件重写。</li>
</ul>
<h2 id="对比Memchached"><a href="#对比Memchached" class="headerlink" title="对比Memchached"></a>对比Memchached</h2><p>两者都属于内存 键值关系型数据库。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Redis支持五中数据类型，Memchached仅支持字符串类型。</p>
<h3 id="持久化-1"><a href="#持久化-1" class="headerlink" title="持久化"></a>持久化</h3><p>Redis支持AOF日志和RDB快照两种持久化策略，memchached不支持。</p>
<h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p>Redis Cluster实现分布式支持。Memchached不支持。</p>
<h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><p>在 Redis 中，并不是所有数据都一直存储在内存中，可以将一些很久没用的 value 交换到磁盘，而 Memcached 的数据则会一直在内存中。</p>
<p>Memcached 将内存分割成特定长度的块来存储数据，以完全解决内存碎片的问题。但是这种方式会使得内存的利用率不高，例如块的大小为 128 bytes，只存储 100 bytes 的数据，那么剩下的 28 bytes 就浪费掉了。</p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul>
<li>Redis中的事务具有ACID的特性</li>
<li>多个命令进入到事务队列中，按照FIFO顺序执行。</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="http://redisbook.com/index.html">黄健宏. Redis 设计与实现 [M]. 机械工业出版社, 2014.</a></p>
</li>
<li><p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Redis.md">CS-Notes - Redis</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot与MyBatis-Plus进阶使用</title>
    <url>/2019/08/07/Spring-Boot%E4%B8%8EMyBatis-Plus%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>几个月前整合完了MBP，用的比较少，所以MBP的高级功能没有详细体验。今天发先MBP有很多强大的功能，可以少写许多代码，就体验了一下。</p>
<a id="more"></a>

<h2 id="自动生成代码"><a href="#自动生成代码" class="headerlink" title="自动生成代码"></a>自动生成代码</h2><p>不同于mybatis的生成代码，mybatis-plus可以生成controller等代码。AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p>
<p>额外添加依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        代码生成器依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        mybatis-plus代码生成器默认模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="编写SQL"><a href="#编写SQL" class="headerlink" title="编写SQL"></a>编写SQL</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &#96;user&#96;;</span><br><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">  &#96;id&#96; bigint(20) DEFAULT NULL COMMENT &#39;唯一标示&#39;,</span><br><span class="line">  &#96;code&#96; varchar(20) DEFAULT NULL COMMENT &#39;编码&#39;,</span><br><span class="line">  &#96;name&#96; varchar(64) DEFAULT NULL COMMENT &#39;名称&#39;,</span><br><span class="line">  &#96;status&#96; char(1) DEFAULT &#39;1&#39; COMMENT &#39;状态 1启用 0 停用&#39;,</span><br><span class="line">  &#96;gmt_create&#96; datetime DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span><br><span class="line">  &#96;gmt_modified&#96; datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;修改时间&#39;</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure>

<h3 id="编写配置"><a href="#编写配置" class="headerlink" title="编写配置"></a>编写配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE_NAME = <span class="string">&quot;com.example&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String OUT_PATH = <span class="string">&quot;/src/main/java&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTHOR = <span class="string">&quot;spring&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODULE_NAME = <span class="string">&quot;demo&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库相关连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://[]:3306/springboot_mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER = <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator generator = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        generator.setGlobalConfig(<span class="keyword">new</span> GlobalConfig()</span><br><span class="line">                <span class="comment">// 输出目录</span></span><br><span class="line">                .setOutputDir(projectPath + OUT_PATH)</span><br><span class="line">                <span class="comment">// 覆盖文件</span></span><br><span class="line">                .setFileOverride(<span class="keyword">true</span>)</span><br><span class="line">                .setOpen(<span class="keyword">false</span>)</span><br><span class="line">                .setAuthor(AUTHOR)</span><br><span class="line">                .setXmlName(<span class="string">&quot;%sMapper&quot;</span>)</span><br><span class="line">                <span class="comment">// 自定义文件命名，注意 %s 会自动填充表实体属性！</span></span><br><span class="line">                .setMapperName(<span class="string">&quot;%sDao&quot;</span>)</span><br><span class="line">                .setServiceName(<span class="string">&quot;%Service&quot;</span>)</span><br><span class="line">                <span class="comment">// 开启resultMap</span></span><br><span class="line">                .setBaseResultMap(<span class="keyword">true</span>)</span><br><span class="line">                <span class="comment">// 开启BaseColumnList</span></span><br><span class="line">                .setBaseColumnList(<span class="keyword">true</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        generator.setDataSource(<span class="keyword">new</span> DataSourceConfig()</span><br><span class="line">                .setUrl(URL)</span><br><span class="line">                .setUsername(USERNAME)</span><br><span class="line">                .setPassword(PASSWORD)</span><br><span class="line">                .setDriverName(DRIVER)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包配置</span></span><br><span class="line">        generator.setPackageInfo(<span class="keyword">new</span> PackageConfig()</span><br><span class="line">                .setModuleName(MODULE_NAME)</span><br><span class="line">                .setParent(PACKAGE_NAME)</span><br><span class="line">                .setMapper(<span class="string">&quot;dao&quot;</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果模板引擎是 velocity</span></span><br><span class="line">        String templatePath = <span class="string">&quot;/templates/mapper.xml.vm&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig cfg = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 配置xxxMapper.xml路径和文件名</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">&quot;/src/main/resources/mapper/&quot;</span></span><br><span class="line">                        + <span class="string">&quot;/&quot;</span> + tableInfo.getEntityName() + <span class="string">&quot;Mapper.xml&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        cfg.setFileOutConfigList(focList);</span><br><span class="line">        generator.setCfg(cfg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置模板</span></span><br><span class="line">        generator.setTemplate(<span class="keyword">new</span> TemplateConfig()</span><br><span class="line">                .setXml(<span class="keyword">null</span>)</span><br><span class="line">                <span class="comment">// 禁止生成Controller</span></span><br><span class="line">                <span class="comment">//.setController(null)</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        generator.setStrategy(<span class="keyword">new</span> StrategyConfig()</span><br><span class="line">                .setNaming(NamingStrategy.underline_to_camel)</span><br><span class="line">                .setColumnNaming(NamingStrategy.underline_to_camel)</span><br><span class="line">                <span class="comment">// public User setName(String name) &#123;this.name = name; return this;&#125;</span></span><br><span class="line">                .setEntityColumnConstant(<span class="keyword">true</span>)</span><br><span class="line">                .setEntityLombokModel(<span class="keyword">true</span>)</span><br><span class="line">                .setControllerMappingHyphenStyle(<span class="keyword">true</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        generator.setTemplateEngine(<span class="keyword">new</span> VelocityTemplateEngine());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行</span></span><br><span class="line">        generator.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="assets/1565161529519.png" alt="1565161529519"></p>
<p>生成后运行如图所示。第一次编写比较麻烦，但是编写完成后可以存入到IDEA的模板中，下次直接生成<code>MysqlGenerate.java</code>模板，只需做些小小的修改即可使用。</p>
<p>官网<a href="https://mp.baomidou.com/guide/generator.html#%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8">代码生成器指南</a></p>
<h2 id="通用的CRUD"><a href="#通用的CRUD" class="headerlink" title="通用的CRUD"></a>通用的CRUD</h2><p>配置MyBatis-Plus</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.demo.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于常用的CRUD，不用自己写xml，因为MyBatis-Plus内置了一些常用操作。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void insert() &#123;</span><br><span class="line">	User user &#x3D; new User();</span><br><span class="line">	user.setName(&quot;Jon&quot;);</span><br><span class="line">	user.setCode(&quot;009&quot;);</span><br><span class="line">	user.setStatus(&quot;0&quot;);</span><br><span class="line">	int res &#x3D; userDao.insert(user);</span><br><span class="line">	log.info(&quot;--插入 &#123;&#125; 条&quot;, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>批量插入。属于Service CRUD的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveMany</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cap = <span class="number">15</span>;</span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;(cap);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cap; ++i) &#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">&quot;Jon + &quot;</span> + i);</span><br><span class="line">        user.setStatus(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        user.setCode(<span class="string">&quot;007&quot;</span> + i);</span><br><span class="line">        users.add(user);</span><br><span class="line">    &#125;</span><br><span class="line">    userService.saveBatch(users);</span><br><span class="line">    log.info(<span class="string">&quot;-----批量插入--------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更多使用：<a href="https://mp.baomidou.com/guide/crud-interface.html#mapper-crud-%E6%8E%A5%E5%8F%A3">CRUD接口</a></p>
<h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><p>在MyBatisPlusConfig中配置如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// paginationInterceptor.setLimit(你的最大单页限制数量，默认 500 条，小于 0 如 -1 不受限制);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dao层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 查询 : 根据state状态查询用户列表，分页显示</span></span><br><span class="line"><span class="comment">     * 注意!!: 如果入参是有多个,需要加注解指定参数名才能在xml中取值</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page   分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位(你可以继承Page实现自己的分页对象)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status 状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">IPage&lt;User&gt; <span class="title">selectPage</span><span class="params">(Page page, <span class="meta">@Param(&quot;status&quot;)</span> String status)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mapper编写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPage&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">    from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 当前页码 每页数</span></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        IPage&lt;User&gt; userIPage = userDao.selectPage(page, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        log.info(userIPage.toString());</span><br><span class="line">        log.info(<span class="string">&quot;---总条数：&#123;&#125; ---&quot;</span>, userIPage.getTotal());</span><br><span class="line">        log.info(<span class="string">&quot;---当前页：&#123;&#125; ---&quot;</span>, userIPage.getCurrent());</span><br><span class="line">        log.info(<span class="string">&quot;---总页码：&#123;&#125; ---&quot;</span>, userIPage.getPages());</span><br><span class="line">        log.info(<span class="string">&quot;---每页多少条：&#123;&#125; ---&quot;</span>, userIPage.getSize());</span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; users = userIPage.getRecords();</span><br><span class="line">        users.forEach(user -&gt; log.info(user.toString()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://mp.baomidou.com/">官网</a></li>
<li><a href="https://blog.lqdev.cn/2018/08/06/%E6%97%A5%E5%B8%B8%E7%A7%AF%E7%B4%AF/mybatis-plus-guide-one/">Mybatis-Plus使用全解</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合Kafka</title>
    <url>/2019/07/27/Spring-Boot%E6%95%B4%E5%90%88Kafka/</url>
    <content><![CDATA[<p>整合Kafka。</p>
<a id="more"></a>

<h2 id="Kafka介绍"><a href="#Kafka介绍" class="headerlink" title="Kafka介绍"></a>Kafka介绍</h2><p>Kafka是一种高吞吐量的分布式发布订阅消息系统，是消息中间件的一种。它一些基本术语：</p>
<ol>
<li>Kafka将消息以<strong>topic</strong>为单位进行归纳</li>
<li>向Kafka topic发布消息的程序称为<strong>producers</strong></li>
<li>预定topic并消费消息的程序称为<strong>consumer</strong></li>
<li>Kafka以集群方式运行，可由一个或多个服务组成，每个服务叫做一个broker</li>
</ol>
<p>前面已经搭建好了Kafka，<a href="https://springlych.github.io/2019/07/26/Docker%E6%90%AD%E5%BB%BAKafka/">搭建过程</a></p>
<h2 id="Spring-Boot整合Kafka"><a href="#Spring-Boot整合Kafka" class="headerlink" title="Spring Boot整合Kafka"></a>Spring Boot整合Kafka</h2><p>使用IDEA构建项目Spring Boot项目，选择依赖message-Apache Kafka。</p>
<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String form;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(String form, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.form = form;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><code>application.yml</code>。Spring Boot支持在application.yml中配置Kafka的生产者配置和消费者配置。当然也可以使用<code>@Configuration</code>使用Java类配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">consumer:</span></span><br><span class="line">      <span class="attr">bootstrap-servers:</span> <span class="string">localhost:9092</span></span><br><span class="line">      <span class="attr">group-id:</span> <span class="string">test-consumer</span></span><br><span class="line">      <span class="attr">auto-offset-reset:</span> <span class="string">latest</span></span><br><span class="line">      <span class="attr">key-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line">      <span class="attr">value-deserializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line">    <span class="attr">producer:</span></span><br><span class="line">      <span class="attr">bootstrap-servers:</span> <span class="string">localhost:9092</span></span><br><span class="line">      <span class="attr">key-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br><span class="line">      <span class="attr">value-serializer:</span> <span class="string">org.apache.kafka.common.serialization.StringDeserializer</span></span><br></pre></td></tr></table></figure>

<h3 id="创建生产者"><a href="#创建生产者" class="headerlink" title="创建生产者"></a>创建生产者</h3><p>发送消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC = <span class="string">&quot;users&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        ListenableFuture&lt;SendResult&lt;String, String&gt;&gt; future</span><br><span class="line">                = <span class="keyword">this</span>.kafkaTemplate.send(TOPIC, message);</span><br><span class="line">        future.addCallback(<span class="keyword">new</span> ListenableFutureCallback&lt;SendResult&lt;String, String&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable ex)</span> </span>&#123;</span><br><span class="line">                logger.error(<span class="string">&quot;消息：&#123;&#125; 发送失败，原因：&#123;&#125;&quot;</span>, message, ex.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult&lt;String, String&gt; result)</span> </span>&#123;</span><br><span class="line">                logger.info(<span class="string">&quot;成功发送消息：&#123;&#125;, offset=[&#123;&#125;]&quot;</span>, message, result.getRecordMetadata());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在send方法中，通过回调的方式确定消息是否发送成功。</p>
<p>我们没有配置KafkaTemplate，因此使用<code>@Service</code>自动配置。</p>
<h3 id="创建消费者"><a href="#创建消费者" class="headerlink" title="创建消费者"></a>创建消费者</h3><p>接受消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;users&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;接受消息：&#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@KafkaListener</code>注解来监听名称为users的Topic</p>
<p><code>bootstrap-servers</code>:生产者消费者的地址。</p>
<p><code>key-deserializer</code>和<code>value-deserializer</code>指定了序列化策略，生产者指定为kafka提供的StringSerializer，用来发送简单的String类消息</p>
<h3 id="发布消息"><a href="#发布消息" class="headerlink" title="发布消息"></a>发布消息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Producer producer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SendMessageController(Producer producer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.producer = producer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;send/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.producer.sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>启动后，访问<code>http://localhost:8080/send/hello</code>，发现报告一下错误：</p>
<blockquote>
<p>消息：hello,mrbird 发送失败，原因：Failed to send; nested exception is org.apache.kafka.common.errors.TimeoutException: Expiring 1 record(s) for users-0: 30047 ms has passed since batch creation plus linger time</p>
<p>[Producer clientId=producer-1] Connection to node 1001 could not be established. Broker may not be available.</p>
</blockquote>
<p>猜测是由于使用Docker创建了Kafka，导致外网访问Kafka时没有配置好正确的IP。该问题待解决。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.confluent.io/blog/apache-kafka-spring-boot-application">How to Work with Apache Kafka in Your Spring Boot Application</a></li>
<li><a href="https://mrbird.cc/Spring-Boot-Kafka.html">MrBird - Spring Boot整合Kafka</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合MyBatis-Plus</title>
    <url>/2019/05/24/Spring-Boot%E6%95%B4%E5%90%88MyBatis-Plus/</url>
    <content><![CDATA[<p>MyBatis-Plus是MyBatis的增强工具。</p>
<a id="more"></a>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>官网：<a href="https://mybatis.plus/">官网</a></p>
<p>由于Mybatis plus完全基于Mybatis,且吸收了一部分HIbernate的优点,提供集成的CRUD,基本上现在开发中都使用Mybatis Plus替代原生Mybatis框架</p>
<p><strong>MybatisPlus 不能和 Mybatis同时使用</strong></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>数据库 Schema 脚本:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS user;</span><br><span class="line"></span><br><span class="line">CREATE TABLE user</span><br><span class="line">(</span><br><span class="line">	id BIGINT(20) NOT NULL COMMENT &#39;主键ID&#39;,</span><br><span class="line">	name VARCHAR(30) NULL DEFAULT NULL COMMENT &#39;姓名&#39;,</span><br><span class="line">	age INT(11) NULL DEFAULT NULL COMMENT &#39;年龄&#39;,</span><br><span class="line">	email VARCHAR(50) NULL DEFAULT NULL COMMENT &#39;邮箱&#39;,</span><br><span class="line">	PRIMARY KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>其对应的数据库 Data 脚本如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM user;</span><br><span class="line"></span><br><span class="line">INSERT INTO user (id, name, age, email) VALUES</span><br><span class="line">(1, &#39;Jone&#39;, 18, &#39;test1@baomidou.com&#39;),</span><br><span class="line">(2, &#39;Jack&#39;, 20, &#39;test2@baomidou.com&#39;),</span><br><span class="line">(3, &#39;Tom&#39;, 28, &#39;test3@baomidou.com&#39;),</span><br><span class="line">(4, &#39;Sandy&#39;, 21, &#39;test4@baomidou.com&#39;),</span><br><span class="line">(5, &#39;Billie&#39;, 24, &#39;test5@baomidou.com&#39;);</span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>可以参考<a href="">Spring-Boot整合MyBatis</a></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot_mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">654321</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注：这里<code>driver-class-name</code>使用的是<code>com.mysql.cj.jdbc.Driver</code>，<code>com.mysql.cj.jdbc.Driver</code> 是 mysql-connector-java 6中的，需要指定时区serverTimezone。</li>
</ul>
<h3 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h3><p>设置。指定mapper地址，启用分页功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.demo.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用lombok创建实体类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建mapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查询一个和查询全部</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = userMapper.selectById(<span class="number">1L</span>);</span><br><span class="line">    logger.info(<span class="string">&quot;user = &#123;&#125;&quot;</span>, user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;User&gt; list = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">    list.forEach(user -&gt; &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;user = &#123;&#125;&quot;</span>, user);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分页查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;----------分页---------&quot;</span>);</span><br><span class="line">    Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    IPage&lt;User&gt; userIPage = userMapper.selectPage(page,</span><br><span class="line">                                                  <span class="keyword">new</span> QueryWrapper&lt;User&gt;().gt(<span class="string">&quot;age&quot;</span>, <span class="number">6</span>));</span><br><span class="line">    logger.info(<span class="string">&quot;总条数：&#123;&#125;&quot;</span>, userIPage.getTotal());</span><br><span class="line">    logger.info(<span class="string">&quot;当前页数：&#123;&#125;&quot;</span>, userIPage.getCurrent());</span><br><span class="line">    logger.info(<span class="string">&quot;当前每页显示数：&#123;&#125;&quot;</span>, userIPage.getSize());</span><br><span class="line">    logger.info(<span class="string">&quot;----------分页---------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更新</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = userMapper.selectById(<span class="number">2L</span>);</span><br><span class="line">    assertThat(user.getAge()).isEqualTo(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    userMapper.update(</span><br><span class="line">        <span class="keyword">null</span>,</span><br><span class="line">        Wrappers.&lt;User&gt;lambdaUpdate().set(User::getEmail, <span class="string">&quot;123@123&quot;</span>).eq(User::getId, <span class="number">2</span>)</span><br><span class="line">    );</span><br><span class="line">    assertThat(userMapper.selectById(<span class="number">2</span>).getEmail()).isEqualTo(<span class="string">&quot;123@123&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更多CRUD接口可以查看这里：<a href="https://mybatis.plus/guide/crud-interface.html#mapper-crud-%E6%8E%A5%E5%8F%A3">CRUD接口</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://mybatis.plus/guide/#%E7%89%B9%E6%80%A7">官网</a></li>
<li><a href="http://www.ityouknow.com/springboot/2019/05/14/spring-boot-mybatis-plus.html">纯洁的微笑 - Spring Boot 2 (十一)：如何优雅的使用 MyBatis 之 MyBatis-Plus</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合MyBatis</title>
    <url>/2019/05/21/Spring-Boot%E6%95%B4%E5%90%88MyBatis/</url>
    <content><![CDATA[<p>整合MyBatis。</p>
<a id="more"></a>

<h2 id="使用IDEA构建"><a href="#使用IDEA构建" class="headerlink" title="使用IDEA构建"></a>使用IDEA构建</h2><ol>
<li><p>打开IDEA，新建Spring Boot项目，依赖选择Web-web，SQL-MyBatis, SQL-JDBC,SQL-MySQL。</p>
</li>
<li><p>(暂时不用)更改<code>pom.xml</code>，添加PageHelper和mybatis generator依赖。在dependencies中太添加以下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- alibaba的druid数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在build-plugins中添加以下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis generator 自动生成代码插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目下新建包model，新建实体类<code>User.java</code></p>
</li>
<li><p>mybatis相关文件配置：在<code>resources</code>文件夹下新建<code>mybatis</code>文件夹，在mybatis文件夹下新建<code>mybatis-config.xml</code>作为mybatis的配置文件；再新建mapper文件夹，存放mapper文件。</p>
</li>
<li><p>使用更精简的yml替代properties配置文件：将<code>application.properties</code>更改为<code>application.yml</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot_mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">654321</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.mybatis.model</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 开启获取数据库自增主键</span></span><br><span class="line">    <span class="attr">use-generated-keys:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 开启驼峰命名转换</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &#96;users&#96;;</span><br><span class="line">CREATE TABLE &#96;users&#96; (</span><br><span class="line">  &#96;id&#96; bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#39;主键id&#39;,</span><br><span class="line">  &#96;userName&#96; varchar(32) DEFAULT NULL COMMENT &#39;用户名&#39;,</span><br><span class="line">  &#96;passWord&#96; varchar(32) DEFAULT NULL COMMENT &#39;密码&#39;,</span><br><span class="line">  &#96;user_sex&#96; varchar(32) DEFAULT NULL,</span><br><span class="line">  &#96;nick_name&#96; varchar(32) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;28 DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="使用XML"><a href="#使用XML" class="headerlink" title="使用XML"></a>使用XML</h2><p>至此的配置都是xml版本的</p>
<h3 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h3><p>创建model：/model/User.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建interface：/mapper/UserMapper.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">getById</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 resources/mapper下创建 UserMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    namespace xxMapper.java文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span></span><br><span class="line">        id, username, password, sex</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">        FROM users</span><br><span class="line">        WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.example.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">        FROM users</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO user(username, password, sex)</span><br><span class="line">        VALUES (#&#123;username&#125;, #&#123;password&#125;, #&#123;sex&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.example.mybatis.model.User&quot;</span>&gt;</span></span><br><span class="line">        UPDATE users</span><br><span class="line">        SET</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;userName != null&quot;</span>&gt;</span>username = #&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;passWord != null&quot;</span>&gt;</span>password = #&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        WHERE</span><br><span class="line">        id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">        DELETE</span><br><span class="line">        FROM users</span><br><span class="line">        WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>更改xxApplication，在项目入口添加<code>@MapperScan(&quot;com.example.mybatis.mapper&quot;)</code>，使其能够扫描到mapper。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.insert(<span class="keyword">new</span> User(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;pass1&quot;</span>, <span class="string">&quot;man&quot;</span>));</span><br><span class="line">        userMapper.insert(<span class="keyword">new</span> User(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;pass1&quot;</span>, <span class="string">&quot;man&quot;</span>));</span><br><span class="line">        userMapper.insert(<span class="keyword">new</span> User(<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;pass1&quot;</span>, <span class="string">&quot;man&quot;</span>));</span><br><span class="line">        assertEquals(<span class="number">3</span>, userMapper.getAll().size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h2><h3 id="开发Mapper"><a href="#开发Mapper" class="headerlink" title="开发Mapper"></a>开发Mapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapperAno</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM users&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;username&quot;, column = &quot;username&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM users WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Results(&#123;</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;username&quot;, column = &quot;username&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">User <span class="title">getById</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO users(username, password, sex) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;values(#&#123;username&#125;, #&#123;password&#125;, #&#123;sex&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Delete(&quot;DELETE FROM users WHERE id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="与"><a href="#与" class="headerlink" title="#与$"></a>#与$</h3><ol>
<li>#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。如：order by #user_id#，如果传入的值是111,那么解析成sql时的值为order by “111”, 如果传入的值是id，则解析成的sql为order by “id”. 　　 </li>
<li>$将传入的数据直接显示生成在sql中。如：order by $user_id$，如果传入的值是111,那么解析成sql时的值为order by user_id,  如果传入的值是id，则解析成的sql为order by id. 　　 </li>
<li>#方式能够很大程度防止sql注入。 　　 </li>
<li>$方式无法防止Sql注入。 </li>
<li>$方式一般用于传入数据库对象，例如传入表名. </li>
<li>一般能用#的就别用$.</li>
</ol>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperAnoTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapperAno userMapperAno;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; users = userMapperAno.getAll();</span><br><span class="line">        users.forEach(user -&gt;</span><br><span class="line">                logger.info(<span class="string">&quot;user = &#123;&#125;&quot;</span>, user)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = userMapperAno.getById(<span class="number">29L</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;user = &#123;&#125;&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注解-对比-xml"><a href="#注解-对比-xml" class="headerlink" title="注解 对比 xml"></a>注解 对比 xml</h2><p>两种模式各有特点，注解版适合简单快速的模式，其实像现在流行的这种微服务模式，一个微服务就会对应一个自已的数据库，多表连接查询的需求会大大的降低，会越来越适合这种模式。</p>
<p>复杂的查询，比如Mybatis的动态SQL特性在注解中应该很难体现，而在XML中就很容易实现了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/winter_chen001/article/details/77249029">CSDN - Spring boot Mybatis 整合（完整版）</a></li>
<li><a href="https://github.com/ityouknow/spring-boot-examples">Github - spring-boot-examples</a></li>
<li><a href="http://www.ityouknow.com/springboot/2016/11/06/spring-boot-mybatis.html">纯洁的微笑 - Spring Boot(六)：如何优雅的使用 Mybatis</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合RabbitMq</title>
    <url>/2019/08/06/Spring-Boot%E6%95%B4%E5%90%88RabbitMq/</url>
    <content><![CDATA[<p>整合RabbitMQ</p>
<a id="more"></a>

<p>启动IDEA，初始化Spring Boot，选择message - rabbitmq</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">rabbitmq</span> <span class="string">ip地址</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Rabbit设置"><a href="#Rabbit设置" class="headerlink" title="Rabbit设置"></a>Rabbit设置</h2><p>RabbitMqConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMqConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一对一</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(RabbitConst.QUEUE_ONE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来测试一对多</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueMany</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(RabbitConst.QUEUE_MANY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象的发送和接受</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">objectQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(RabbitConst.QUEUE_OBJECT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="一对一测试"><a href="#一对一测试" class="headerlink" title="一对一测试"></a>一对一测试</h2><p>发送者</p>
<p>rabbitTemplate 是 Spring Boot 提供的默认实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSender</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AmqpTemplate rabbitTemplate;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloSender</span><span class="params">(AmqpTemplate rabbitTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate = rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String context = <span class="string">&quot;send hello&quot;</span> + <span class="keyword">new</span> Date();</span><br><span class="line">        logger.info(<span class="string">&quot;Send: &#123;&#125;&quot;</span>, context);</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.convertAndSend(RabbitConst.QUEUE_ONE, context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接受者</p>
<p>通过@RabbitListener注解要接收消息的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = RabbitConst.QUEUE_ONE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloReceiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String hello)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;HelloReceive &#123;&#125;&quot;</span>, hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="高级使用"><a href="#高级使用" class="headerlink" title="高级使用"></a>高级使用</h2><h3 id="对象支持"><a href="#对象支持" class="headerlink" title="对象支持"></a>对象支持</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">发送者</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectSender</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AmqpTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjectSender</span><span class="params">(AmqpTemplate rabbitTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate = rabbitTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;-----ObjectSender send user: &#123;&#125;-----&quot;</span>, user.toString());</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitConst.QUEUE_OBJECT, user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">接受者</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = RabbitConst.QUEUE_OBJECT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectReceiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;-----receive user: &#123;&#125; -----&quot;</span>, user.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="1565096910459.png" alt="1565096910459"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.ityouknow.com/springboot/2016/11/30/spring-boot-rabbitMQ.html">纯洁的微笑 - Spring Boot(八)：RabbitMQ 详解</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合Redis</title>
    <url>/2019/05/12/Spring-Boot%E6%95%B4%E5%90%88Redis/</url>
    <content><![CDATA[<p>Spring Boot整合Redis</p>
<a id="more"></a>

<h2 id="建立项目"><a href="#建立项目" class="headerlink" title="建立项目"></a>建立项目</h2><ol>
<li><p>使用IDEA新建Spring Boot项目，依赖选择 web-web，NoSQL-redis。</p>
</li>
<li><p>application.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Spring Boot启动端口号</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">149.129.78.187</span></span><br><span class="line"><span class="comment"># Redis端口</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment"># Redis密码</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># Redis数据库索引</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 连接池最大连接数</span></span><br><span class="line"><span class="meta">spring.redis.jedis.pool.max-active</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间 负值没有限制</span></span><br><span class="line"><span class="meta">spring.redis.jedis.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment"># 连接池最大空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.jedis.pool.max-idle</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 最小空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.jedis.pool.min-idle</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="meta">spring.redis.timeout</span>=<span class="string">100</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试用例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;aaa&quot;</span>, redisTemplate.opsForValue().get(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单的测试与Redis的连接，使用自动配置的<code>StringRedisTemplate</code>对象进行Redis的读写操作</p>
</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://juejin.im/post/5ad6acb4f265da239e4e9906">掘金-SpringBoot整合Redis</a></li>
<li><a href="http://www.spring4all.com/article/254">Spring Boot 使用NoSQL数据库 Redis</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合Shiro</title>
    <url>/2019/05/27/Spring-Boot%E6%95%B4%E5%90%88Shiro/</url>
    <content><![CDATA[<p>整合Shiro</p>
<a id="more"></a>

<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>使用IDEA创建项目。</p>
<p><code>pom.xml</code>依赖如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中，使用Shiro官方支持的ehcache缓存。</p>
<blockquote>
<p>修改<code>application.yml</code></p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot_shiro?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">654321</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">LEGACYHTML5</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>初始化数据库</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &#96;user&#96;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;user&#96; (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,</span><br><span class="line">  &#96;username&#96; varchar(255) DEFAULT NULL COMMENT &#39;用户名&#39;,</span><br><span class="line">  &#96;password&#96; varchar(255) DEFAULT NULL COMMENT &#39;密码&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实体类Usre.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>mapper，service</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where username = #&#123;username&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">findByUserName</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// impl</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserMapper userMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMapper = userMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findByUsername</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findByUsername(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Shiro配置</p>
</blockquote>
<p>首先要配置的是 ShiroConfig 类，Apache Shiro 核心通过 Filter 来实现，就好像 SpringMvc 通过 DispachServlet 来主控制一样。 既然是使用 Filter 一般也就能猜到，是通过 URL 规则来进行过滤和权限校验，所以我们需要定义一系列关于 URL 的规则和访问权限。</p>
<p>shiroConfig.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean filterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        filterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">        filterFactoryBean.setLoginUrl(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拦截器</span></span><br><span class="line">        Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 配置退出</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/logout&quot;</span>, <span class="string">&quot;logout&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果不设置默认会自动寻找Web工程根目录下的&quot;/login.jsp&quot;页面;</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 静态资源</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/lib/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 其他请求都拦截，</span></span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        <span class="keyword">return</span> filterFactoryBean;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyShiroRealm <span class="title">myShiroRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyShiroRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(myShiroRealm());</span><br><span class="line">        securityManager.setSessionManager(sessionManager());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SessionManager <span class="title">sessionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSessionManager sessionManager = <span class="keyword">new</span> DefaultWebSessionManager();</span><br><span class="line">        <span class="comment">// 10min</span></span><br><span class="line">        sessionManager.setGlobalSessionTimeout(<span class="number">60</span> * <span class="number">60</span> * <span class="number">10</span>);</span><br><span class="line">        sessionManager.setSessionDAO(<span class="keyword">new</span> EnterpriseCacheSessionDAO());</span><br><span class="line">        <span class="keyword">return</span> sessionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Filter Chain 定义说明：</p>
<ul>
<li>1、一个URL可以配置多个 Filter，使用逗号分隔</li>
<li>2、当设置多个过滤器时，全部验证通过，才视为通过</li>
<li>3、部分过滤器可指定参数，如 perms，roles</li>
</ul>
<blockquote>
<p>自定义Realm实现</p>
</blockquote>
<p>在认证、授权内部实现机制中都有提到，最终处理都将交给Real进行处理。因为在 Shiro 中，最终是通过 Realm 来获取应用程序中的用户、角色及权限信息的。通常情况下，在 Realm 中会直接从我们的数据源中获取 Shiro 需要的验证信息。可以说，Realm 是专用于安全框架的 DAO. Shiro 的认证过程最终会交由 Realm 执行，这时会调用 Realm 的<code>getAuthenticationInfo(token)</code>方法。</p>
<p>该方法主要执行以下操作:</p>
<ul>
<li>1、检查提交的进行认证的令牌信息</li>
<li>2、根据令牌信息从数据源(通常为数据库)中获取用户信息</li>
<li>3、对用户信息进行匹配验证。</li>
<li>4、验证通过将返回一个封装了用户信息的<code>AuthenticationInfo</code>实例。</li>
<li>5、验证失败则抛出<code>AuthenticationException</code>异常信息。</li>
</ul>
<p>而在我们的应用程序中要做的就是自定义一个 Realm 类，继承AuthorizingRealm 抽象类，重载 doGetAuthenticationInfo()，重写获取用户信息的方法。</p>
<p>MyShiroRealm.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 权限校检</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主要是用来进行身份认证的，也就是说验证用户输入的账号和密码是否正确。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 1. 从Token中获取输入的用户名密码</span></span><br><span class="line"><span class="comment">         * 2. 通过输入的用户名查询数据库得到密码</span></span><br><span class="line"><span class="comment">         * 3. 调用Authentication进行密码校验</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 获取用户名和密码</span></span><br><span class="line">        String username = (String) authenticationToken.getPrincipal();</span><br><span class="line">        String password = <span class="keyword">new</span> String((<span class="keyword">char</span>[]) authenticationToken.getCredentials());</span><br><span class="line"></span><br><span class="line">        User user = userService.findByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!password.equals(user.getPassword())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IncorrectCredentialsException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user, password, getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>AuthorizationInfo</code>用于权限校验</li>
<li><code>AuthenticationInfo</code>用于身份验证</li>
</ul>
<p>以上，shiro配置便完成了</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote>
<p>创建<code>LoginController.java</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 首页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value = &#123;&quot;/&quot;, &quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 状态信息，或成功页面视图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password, Model model)</span> </span>&#123;</span><br><span class="line">        String info = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装Token信息 = 用户名+密码</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">        <span class="comment">// shiro subject 实例</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">            info = String.valueOf(subject.isAuthenticated());</span><br><span class="line">            model.addAttribute(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;登录状态 ==&gt;&quot;</span> + info);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;/index&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            info = <span class="string">&quot;未知账户异常&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            info = <span class="string">&quot;账户名密码错误&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            info = <span class="string">&quot;其他异常&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;info&quot;</span>, <span class="string">&quot;登录状态 ==&gt;&quot;</span> + info);</span><br><span class="line">        logger.info(<span class="string">&quot;登录状态 ==&gt;&#123;&#125;&quot;</span> + info);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>@Controller</code>用来告诉Spring这是个处理HTTP请求的控制器。</li>
<li><code>@RestController</code>是<code>@ResponseBody</code>和<code>@Controller</code>的组合，被标记的控制器类所有<code>return</code>数据都自动封装为JSON格式。</li>
<li><code>@GetMapping</code>标记该请求是Get请求，如果用Post请求则会报错no support</li>
</ul>
<p>对于出现的两个<code>login</code>接口，<code>@GetMapping</code>和<code>@PostMapping</code>利用Java的方法重载创建了两个名称相同的接口，但是根据HTTP请求方法的不同（Get还是Post）会自动寻找对应的映射方法。</p>
<blockquote>
<p>登录页面</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/login&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;info&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如上，前台form表单中的<code>action=&quot;/login&quot;</code>和<code>method=&quot;post&quot;</code>决定了请求走这个地址，通过调用<code>subject.login(token)</code>，Shiro自动查询Realm实现，于是找到我们自定义的Realm实现：<code>AuthRealm</code>，进而通过<code>SimpleAuthenticationInfo</code>方法验证了登录用户的身份，如果身份认证成功，就<code>return &quot;/index&quot;</code>，否则就<code>return &quot;/login&quot;</code>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.ityouknow.com/springboot/2017/06/26/spring-boot-shiro.html">纯洁的微笑 - Spring Boot (十四)： Spring Boot 整合 Shiro-登录认证和权限管理</a></li>
<li><a href="https://github.com/TyCoding/spring-learn/tree/master/boot-shiro">TyCoding</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合Thymeleaf</title>
    <url>/2019/05/27/Spring-Boot%E6%95%B4%E5%90%88Thymeleaf/</url>
    <content><![CDATA[<p>Thymeleaf是一个跟freemarker等类似的模板引擎，能够替代JSP，它也是springboot的官方推荐方案。</p>
<a id="more"></a>

<p>但是我一般倾向于使用前后端分离的模式，前端使用Vus.js 等框架，这里学习Thymeleaf主要是快速实现一些网页，以便继续学习Spring Boot中需要用到网页的部分。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>使用IDEA新建Spring Boot项目，依赖中选择 Core-Lombok，Web- web, Template Engines-Thymeleaf。</p>
<p>修改applicatiom.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">LEGACYHTML5</span></span><br><span class="line">    <span class="attr">encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">servlet:</span></span><br><span class="line">      <span class="attr">content-type:</span> <span class="string">text/html</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">    <span class="attr">cache:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>其中<code>spring.thymeleaf.mode = LEGACYHTML5</code>配置thymeleaf的模式，不要使用<code>spring.thymeleaf.mode = HTML5</code>，因为严格遵循HTML5规范会对非严格的报错，例如<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>，<code>&lt;meta&gt;</code>标签没有结束<code>&lt;meta /&gt;</code>就会报错。</p>
<p>在 main/resources/templates新建<code>index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is index page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>若想要在HTML页面中使用Thymeleaf，需要<code>&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code></p>
</blockquote>
<p>新建RouterController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的 <code>return “index”</code>中的index 是指sources/template中的 <code>index.html</code>文件。如果是<code>templates/common/main.html</code>页面，就应该<code>return &quot;/common/main.html&quot;</code></p>
<p>浏览器访问<code>http://localhost:8080/</code>便可看到刚才的页面。</p>
<h2 id="Thymeleaf常用表达式"><a href="#Thymeleaf常用表达式" class="headerlink" title="Thymeleaf常用表达式"></a>Thymeleaf常用表达式</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote>
<p>${user.username}</p>
</blockquote>
<p>修改RouterController.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;demo&quot;</span>, <span class="string">&quot;一个测试&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is index page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>表达式：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;demo&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>更多Thymeleaf相关可以参考<a href="http://www.ityouknow.com/springboot/2016/05/01/spring-boot-thymeleaf.html">这里</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/TyCoding/spring-learn/tree/master/boot-thymeleaf">TyCoding</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot返回结果封装</title>
    <url>/2020/04/08/Spring-Boot%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<p>创建统一的数据返回格式，有助于更好的同前端交互，也能让后端的代码看起来更早有呀简介。</p>
<a id="more"></a>

<h2 id="返回结果封装"><a href="#返回结果封装" class="headerlink" title="返回结果封装"></a>返回结果封装</h2><p>Result.java。使用了Lombok。如果没有使用lombok，一定要重写toString()方法，不然返回调用Resut时将出错.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Result</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = <span class="number">200</span>;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.msg = <span class="string">&quot;操作成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Result</span><span class="params">(<span class="keyword">int</span> code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功直接返回数据和状态</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 返回数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">ok</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">ok</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(CodeMsg.SUCCESS.getCode(), CodeMsg.SUCCESS.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 失败调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Result&lt;T&gt; <span class="title">error</span><span class="params">(<span class="keyword">int</span> code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result&lt;&gt;(code, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="返回消息统一定义文件"><a href="#返回消息统一定义文件" class="headerlink" title="返回消息统一定义文件"></a>返回消息统一定义文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">CodeMsg</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作成功调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUCCESS(<span class="number">0</span>, <span class="string">&quot;成功&quot;</span>),</span><br><span class="line">    ACTION_ERROR(<span class="number">11</span>, <span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    CodeMsg(<span class="keyword">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在Controller层，如果要调用，可以这样（未在Service层处理）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">(<span class="meta">@RequestBody</span> Note note)</span> </span>&#123;</span><br><span class="line">    log.info(note.toString());</span><br><span class="line">    <span class="keyword">int</span> res = noteMapper.insert(note);</span><br><span class="line">    <span class="keyword">if</span> (res == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(CodeMsg.ACTION_ERROR.getCode(), CodeMsg.ACTION_ERROR.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Security与OAuth2的常用配置</title>
    <url>/2020/10/19/Spring-Security%E4%B8%8EOAuth2%E7%9A%84%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>整理Spring Security以及结合OAuth2的一些配置</p>
<a id="more"></a>



<h1 id="Spring-Security的配置"><a href="#Spring-Security的配置" class="headerlink" title="Spring Security的配置"></a>Spring Security的配置</h1><p>Spring Security 的配置主要在 WebSecurityConfigurerAdapter 类，一般新建一个 WebSecurityConfig 类继承该类进行配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">        <span class="comment">//        return new BCryptPasswordEncoder();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用于配置用户相关</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">            .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            .password(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">            .roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置用户</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InMemoryUserDetailsManager manager = <span class="keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">&quot;admin&quot;</span>).password(<span class="string">&quot;123&quot;</span>).roles(<span class="string">&quot;admin&quot;</span>).build());</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">&quot;test&quot;</span>).password(<span class="string">&quot;123&quot;</span>).roles(<span class="string">&quot;test&quot;</span>).build());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 处理http认证相关</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.configure(http);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="OAuth2配置"><a href="#OAuth2配置" class="headerlink" title="OAuth2配置"></a>OAuth2配置</h1><h2 id="AuthorizationServerConfigurerAdapter"><a href="#AuthorizationServerConfigurerAdapter" class="headerlink" title="AuthorizationServerConfigurerAdapter"></a>AuthorizationServerConfigurerAdapter</h2><p>配置OAuth2 主要重写 AuthorizationServerConfigurerAdapter 类中的三个 configure 方法，该类中的三个方法都是空的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title">AuthorizationServerConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthorizationServerConfigurerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="configure-AuthorizationServerSecurityConfigurer-security"><a href="#configure-AuthorizationServerSecurityConfigurer-security" class="headerlink" title="configure(AuthorizationServerSecurityConfigurer security)"></a>configure(AuthorizationServerSecurityConfigurer security)</h3><p>配置令牌的端点约束，一个端点谁能访问</p>
<h3 id="configure-ClientDetailsServiceConfigurer-clients"><a href="#configure-ClientDetailsServiceConfigurer-clients" class="headerlink" title="configure(ClientDetailsServiceConfigurer clients)"></a>configure(ClientDetailsServiceConfigurer clients)</h3><p>这里用来配置客户端信息，可以配置信息存在内存或数据库中，示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">clients.inMemory()</span><br><span class="line">        .withClient(<span class="string">&quot;baby&quot;</span>)</span><br><span class="line">        .secret(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123&quot;</span>))</span><br><span class="line">        .resourceIds(<span class="string">&quot;res1&quot;</span>)</span><br><span class="line">        .authorizedGrantTypes(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>)</span><br><span class="line">        .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">        .redirectUris(<span class="string">&quot;http://localhost:8082/index.html&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>在 authorizedGrantTypes 中配置 OAuth2 的模式：授权码、密码等模式</p>
<p>存入数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">clients.withClientDetails(clientDetailsService());</span><br></pre></td></tr></table></figure>



<h3 id="configure-AuthorizationServerEndpointsConfigurer-endpoints"><a href="#configure-AuthorizationServerEndpointsConfigurer-endpoints" class="headerlink" title="configure(AuthorizationServerEndpointsConfigurer endpoints)"></a>configure(AuthorizationServerEndpointsConfigurer endpoints)</h3><p>配置令牌端点约束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">endpoints.authenticationManager(authenticationManager)</span><br><span class="line">                .tokenStore(jwtTokenStore())</span><br><span class="line">                .accessTokenConverter(accessTokenConverter());</span><br></pre></td></tr></table></figure>





<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="令牌保存位置-TokenStore"><a href="#令牌保存位置-TokenStore" class="headerlink" title="令牌保存位置 TokenStore"></a>令牌保存位置 TokenStore</h3><p>。TokenStore 接口有多种实现类用来保存 access_token：</p>
<ul>
<li>JDBCTokenStore：令牌保存到数据库中</li>
<li>InMemoryTokenStore：令牌保存到内存中</li>
<li>RedisTokenStore：保存到Redis</li>
<li>JwtTokenStore：使用jwt就是无状态登录，服务端不保存</li>
<li>JwkTokenStore：保存到 JSON Web Key 中</li>
</ul>
<h3 id="AuthorizationServerTokenServices"><a href="#AuthorizationServerTokenServices" class="headerlink" title="AuthorizationServerTokenServices"></a>AuthorizationServerTokenServices</h3><p>生成 access_token </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">AuthorizationServerTokenServices <span class="title">tokenServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DefaultTokenServices services = <span class="keyword">new</span> DefaultTokenServices();</span><br><span class="line">    services.setClientDetailsService(clientDetailsService());</span><br><span class="line">    services.setSupportRefreshToken(<span class="keyword">true</span>);</span><br><span class="line">    services.setTokenStore(tokenStore());</span><br><span class="line">    services.setAccessTokenValiditySeconds(<span class="number">60</span> * <span class="number">60</span> * <span class="number">2</span>);</span><br><span class="line">    services.setRefreshTokenValiditySeconds(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> services;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 <strong>DefaultTokenServices</strong>，就是默认生成 access_token 的实例。</p>
<h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>我们可以定义 AuthorizationServer 类实现 AuthorizationServerConfigurerAdapter 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServer</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码模式用到</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RedisConnectionFactory redisConnectionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">TokenStore <span class="title">tokenStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisTokenStore(redisConnectionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置客户端信息存储在 MySQL 中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ClientDetailsService <span class="title">clientDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcClientDetailsService(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">AuthorizationServerTokenServices <span class="title">tokenServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultTokenServices services = <span class="keyword">new</span> DefaultTokenServices();</span><br><span class="line">        services.setClientDetailsService(clientDetailsService());</span><br><span class="line">        services.setSupportRefreshToken(<span class="keyword">true</span>);</span><br><span class="line">        services.setTokenStore(tokenStore());</span><br><span class="line">        services.setAccessTokenValiditySeconds(<span class="number">60</span> * <span class="number">60</span> * <span class="number">2</span>);</span><br><span class="line">        services.setRefreshTokenValiditySeconds(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置客户端详细信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.withClientDetails(clientDetailsService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置令牌点约束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        endpoints.authenticationManager(authenticationManager)</span><br><span class="line">                .tokenStore(tokenStore());</span><br><span class="line"><span class="comment">//                .accessTokenConverter(accessTokenConverter());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Security结合OAuth2</title>
    <url>/2020/10/19/Spring-Security%E7%BB%93%E5%90%88OAuth2/</url>
    <content><![CDATA[<p>Spring Security 与 OAuth2结合</p>
<a id="more"></a>

<h1 id="Oauth2介绍"><a href="#Oauth2介绍" class="headerlink" title="Oauth2介绍"></a>Oauth2介绍</h1><p>OAuth 是一个开放标准，该标准允许用户让第三方应用访问该用户在某一网站上存储的私密资源（如头像、照片、视频等），而在这个过程中无需将用户名和密码提供给第三方应用。</p>
<p>实现这一功能是通过提供一个令牌（token），而不是用户名和密码来访问他们存放在特定服务提供者的数据。采用令牌（token）的方式可以让用户灵活的对第三方应用授权或者收回权限。</p>
<p>互联网应用中最常见的 OAuth2 应该就是各种第三方登录了，例如 QQ 授权登录、微信授权登录、微博授权登录、GitHub 授权登录等</p>
<h2 id="授权模式"><a href="#授权模式" class="headerlink" title="授权模式"></a>授权模式</h2><p>客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式。</p>
<ul>
<li>授权码模式（authorization code）</li>
<li>简化模式（implicit）</li>
<li>密码模式（resource owner password credentials）</li>
<li>客户端模式（client credentials）</li>
</ul>
<h1 id="spring-security-结合-oauth2"><a href="#spring-security-结合-oauth2" class="headerlink" title="spring security 结合 oauth2"></a>spring security 结合 oauth2</h1><p>使用spring security 结合 oauth2授权码模式搭建一个demo来学习。</p>
<p>首先使用IDEA创建一个Spring Boot项目，然后在项目上右键 New - module ，创建三个 module：auth-server（授权服务器）、user-server（资源服务器）、client-app（第三方应用），</p>
<table>
<thead>
<tr>
<th align="left">项目</th>
<th align="left">端口</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">auth-server</td>
<td align="left">8080</td>
<td align="left">授权服务器</td>
</tr>
<tr>
<td align="left">user-server</td>
<td align="left">8081</td>
<td align="left">资源服务器</td>
</tr>
<tr>
<td align="left">client-app</td>
<td align="left">8082</td>
<td align="left">第三方应用</td>
</tr>
</tbody></table>
<h2 id="搭建授权服务器"><a href="#搭建授权服务器" class="headerlink" title="搭建授权服务器"></a>搭建授权服务器</h2><p>首先提供一个 TokenStore 实例，指生成的 token 存储在哪里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessTokenConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">TokenStore <span class="title">tokenStore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InMemoryTokenStore();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>配置授权服务器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServer</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TokenStore tokenStore;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ClientDetailsService clientDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 token 的基本信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">AuthorizationServerTokenServices <span class="title">tokenServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultTokenServices services = <span class="keyword">new</span> DefaultTokenServices();</span><br><span class="line">        services.setClientDetailsService(clientDetailsService);</span><br><span class="line">        services.setSupportRefreshToken(<span class="keyword">true</span>);</span><br><span class="line">        services.setTokenStore(tokenStore);</span><br><span class="line">        services.setAccessTokenValiditySeconds(<span class="number">60</span> * <span class="number">60</span> * <span class="number">2</span>);</span><br><span class="line">        services.setRefreshTokenValiditySeconds(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置令牌端点约束，即该端点谁能访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerSecurityConfigurer security)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        security.checkTokenAccess(<span class="string">&quot;permitAll()&quot;</span>)</span><br><span class="line">                .allowFormAuthenticationForClients();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置客户端详细信息，校验客户端，可以将信息存到数据库，本次存入内存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer clients)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        clients.inMemory()</span><br><span class="line">                .withClient(<span class="string">&quot;baby&quot;</span>)</span><br><span class="line">                .secret(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123&quot;</span>))</span><br><span class="line">                .resourceIds(<span class="string">&quot;res1&quot;</span>)</span><br><span class="line">                .authorizedGrantTypes(<span class="string">&quot;authorization_code&quot;</span>, <span class="string">&quot;refresh_token&quot;</span>)</span><br><span class="line">                .scopes(<span class="string">&quot;all&quot;</span>)</span><br><span class="line">                .redirectUris(<span class="string">&quot;http://localhost:8082/index.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置令牌的访问端点和令牌服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        endpoints.authorizationCodeServices(authorizationCodeServices())</span><br><span class="line">                .tokenServices(tokenServices());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">AuthorizationCodeServices <span class="title">authorizationCodeServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InMemoryAuthorizationCodeServices();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>@EnableAuthorizationServer 注解告诉 Spring 激活 authorization server，开启授权服务器的自动化配置。</p>
</li>
<li><p>@Configuration 注解表明这是一个 authorization server 配置类。</p>
</li>
<li><p>AuthorizationServerConfigurerAdapter 是 Spring 提供的默认实现 AuthorizationServerConfigurer 接口的类，里面都是空方法。</p>
</li>
<li><p>ClientDetailsServiceConfigurer 是配置 authorization server 颁发的 client 的凭证</p>
</li>
</ul>
<p>AuthorizationServer 类记得加上 @EnableAuthorizationServer 注解，表示开启授权服务器的自动化配置。</p>
<p>在 AuthorizationServer 类中，主要重写三个 configure 方法</p>
<ol>
<li>AuthorizationServerSecurityConfigurer 配置令牌端点安全约束。checkTokenAccess 是校检 token 的端点，当资源服务器收到 token 后，需要校检 token 的合法性，就会访问该端点。</li>
<li>ClientDetailsServiceConfigurer 配置客户端详细信息，此处将客户端信息存在内存中，分别配置了客户端的 id，secret，资源id，授权类型，授权范围以及重定向url</li>
<li>AuthorizationServerEndpointsConfigurer 配置令牌的访问端点和令牌服务。authorizationCodeServices 配置<strong>授权码</strong>的存储，此处存在内存中。tokenServices 配置令牌的存储，即 access_token 的存储位置。</li>
<li>AuthorizationServerTokenServices 配置 token 的基本信息</li>
</ol>
<h2 id="搭建资源服务器"><a href="#搭建资源服务器" class="headerlink" title="搭建资源服务器"></a>搭建资源服务器</h2><p>配置代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceServerConfig</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 资源服务器和授权服务器是分开的，配置该项</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RemoteTokenServices <span class="title">tokenServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RemoteTokenServices services = <span class="keyword">new</span> RemoteTokenServices();</span><br><span class="line">        services.setCheckTokenEndpointUrl(<span class="string">&quot;http://localhost:8080/oauth/check_token&quot;</span>);</span><br><span class="line">        services.setClientId(<span class="string">&quot;baby&quot;</span>);</span><br><span class="line">        services.setClientSecret(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> services;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        resources.resourceId(<span class="string">&quot;res1&quot;</span>).tokenServices(tokenServices());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>测试接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/admin/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>项目地址：<a href="https://github.com/SpringLych/spring-learning">https://github.com/SpringLych/spring-learning</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><p><a href="https://mp.weixin.qq.com/s?__biz=MzI1NDY0MTkzNQ==&mid=2247488214&idx=1&sn=5601775213285217913c92768d415eca&chksm=e9c340b6deb4c9a01bc383b2c0ab124358663adf22a58ba385f792224ba532079a028ba92a3d&scene=178#rd">这个案例写出来，还怕跟面试官扯不明白 OAuth2 登录流程？</a></p>
</li>
<li><p><a href="https://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose收集</title>
    <url>/2019/03/26/docker-compose%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>自己写的，收集整理的一些docker-compose.yml。</p>
<a id="more"></a>

<p>[TOC]</p>
<h2 id="Aria2"><a href="#Aria2" class="headerlink" title="Aria2"></a>Aria2</h2><p>一个多线程下载器，可由网页端管理</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">aria2:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">wahyd4/aria2-ui</span></span><br><span class="line">      <span class="attr">container_name:</span> <span class="string">aria2</span></span><br><span class="line">      <span class="attr">ports:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;6810:80&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;6800:6800&quot;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/usr/conf/aria2:/root/conf</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/media/download/aria2:/var/www:rw</span></span><br><span class="line">          <span class="comment">#- /usr/data/aria2:/var/www:rw</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">DOMAIN=:80</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>

<p>安装完成后通过<code>http:ip/端口/ui</code>才能访问到ui页面</p>
<h2 id="BaiduPCS-web"><a href="#BaiduPCS-web" class="headerlink" title="BaiduPCS-web"></a>BaiduPCS-web</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">aria2:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">johngong/baidupcs-web</span></span><br><span class="line">      <span class="attr">container_name:</span> <span class="string">baidupcs</span></span><br><span class="line">      <span class="attr">ports:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;5299:5299&quot;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/usr/conf/baidupcs:/config</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/media/download/baidupcs:/root/Downloads</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure>



<h2 id="filebrowser"><a href="#filebrowser" class="headerlink" title="filebrowser"></a>filebrowser</h2><p><a href="https://filebrowser.xyz/installation">installation</a></p>
<p>首先需要在你需要准备<code>config.json</code>和<code>database.db</code>。默认用户名/密码为<code>admin/admin</code></p>
<p>config.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;port&quot;</span>: <span class="number">80</span>,</span><br><span class="line">  <span class="attr">&quot;baseURL&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;address&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;log&quot;</span>: <span class="string">&quot;stdout&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;database&quot;</span>: <span class="string">&quot;/database.db&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;root&quot;</span>: <span class="string">&quot;/srv&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>docker-compose.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">filebrowser</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">filebrowser/filebrowser</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6880:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/media:/srv</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/conf/filebrowser/config.json:/config.json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/conf/filebrowser/database.db:/database.db</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure>

<h2 id="filebrowser-ehanced"><a href="#filebrowser-ehanced" class="headerlink" title="filebrowser-ehanced"></a>filebrowser-ehanced</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">fbe:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">80x86/filebrowser</span></span><br><span class="line">      <span class="attr">container_name:</span> <span class="string">fbe</span></span><br><span class="line">      <span class="attr">ports:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;8083:8083&quot;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/usr/conf/fbe:/config</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/srv/dev:/myfiles</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">PGID=1000</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">UMASK_SET=000</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">WEB_PORT=8083</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure>

<p><a href="https://hub.docker.com/r/80x86/filebrowser">fbe</a></p>
<h2 id="jellyfin"><a href="#jellyfin" class="headerlink" title="jellyfin"></a>jellyfin</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">jellyfin:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">linuxserver/jellyfin</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">jellyfin</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">&#x27;0.75&#x27;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">UMASK_SET=022</span> <span class="comment">#optional</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/config/jellyfin:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/tvshows:/data/tvshows</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/movie:/data/movies</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/transcode:/transcode</span> <span class="comment">#optional</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8096</span><span class="string">:8096</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动时加入 <code>--compatibility</code> 参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose --compatibility up -d</span><br></pre></td></tr></table></figure>





<h2 id="Kod"><a href="#Kod" class="headerlink" title="Kod"></a>Kod</h2><p><a href="https://kodcloud.com/">可道云</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">kod:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">qinkangdeid/kodexplorer</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kod</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/conf/kod:/var/www/html</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/media:/data</span></span><br></pre></td></tr></table></figure>

<h2 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h2> <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">zookeeper:</span> </span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/zookeeper</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;2181:2181&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wurstmeister/kafka</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9092:9092&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># 注意这里填写宿主的ip</span></span><br><span class="line">      <span class="attr">KAFKA_ADVERTISED_HOST_NAME:</span> <span class="number">172.18</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="string">zookeeper:2181</span></span><br><span class="line">      <span class="attr">KAFKA_MESSAGE_MAX_BYTES:</span> <span class="number">20000</span></span><br><span class="line">      <span class="attr">KAFKA_HEAP_OPTS:</span> <span class="string">-Xmx256M</span> <span class="string">-Xms256M</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br></pre></td></tr></table></figure>

<h2 id="lychee"><a href="#lychee" class="headerlink" title="lychee"></a>lychee</h2><p>基于PHP语言的相册管理程序。这里展示荒野无灯大专为N1优化的镜像,不需要额外的数据库。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">lychee:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">80x86/lychee</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lychee-deng</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PHP_MAX_EXECUTION_TIME=600</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PHP_TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_CONNECTION=sqlite</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DB_DATABASE=/conf/lychee.db</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/conf/lychee-deng:/conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/download:/uploads</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://hub.docker.com/r/linuxserver/lychee">linuxserver版</a>，需要额外的数据库。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">lychee:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">linuxserver/lychee</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">lychee-server</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/conf/lychee-server:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/media/download:/pictures</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="mariadb"><a href="#mariadb" class="headerlink" title="mariadb"></a>mariadb</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mariadb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mariadb</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">example</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/data/mysql:/var/lib/mysql</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongodb</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">username</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;27017:27017&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/data/mongodb:/data/db</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>MongoDB删除重复字段</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">db.climage.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        $group: &#123;</span><br><span class="line">            _id: &#123;</span><br><span class="line">                title: &#x27;$title&#x27;,</span><br><span class="line">                page_url: &#x27;$page_url&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            count: &#123;</span><br><span class="line">                $sum: 1</span><br><span class="line">            &#125;,</span><br><span class="line">            dups: &#123;</span><br><span class="line">                $addToSet: &#x27;$_id&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        $match: &#123;</span><br><span class="line">            count: &#123;</span><br><span class="line">                $gt: 1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]).forEach(function(doc) &#123;</span><br><span class="line">    doc.dups.shift();</span><br><span class="line">    db.climage.remove(&#123;</span><br><span class="line">        _id: &#123;</span><br><span class="line">            $in: doc.dups</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="NextCloud"><a href="#NextCloud" class="headerlink" title="NextCloud"></a>NextCloud</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nextcloud:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">linuxserver/nextcloud</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nextcloud</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/conf/nextcloud:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/media:/data</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure>



<h2 id="qBittorrent"><a href="#qBittorrent" class="headerlink" title="qBittorrent"></a>qBittorrent</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">qbittorrent:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">linuxserver/qbittorrent</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">qbittorrent</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">UMASK_SET=022</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WEBUI_PORT=8080</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/conf/qbit:/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/downloads:/downloads</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6881</span><span class="string">:6881</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6881</span><span class="string">:6881/udp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://hub.docker.com/r/linuxserver/qbittorrent">linuxserver/qbittorrent </a></p>
<p>其中，8080端口为webUI端口。</p>
<p>在宿主机和容器中会发生用户不一致导致的权限问题，因此定义PUID和PGID来解决权限问题。</p>
<p>例如，在宿主机有一个用户dockeruser和用户组dockergroup，其uid=100，gid=100，那么指定PUID=100和PGID=100，则容器中的相关目录拥有和dockeruser，dockergroup同样的权限。</p>
<p>该镜像支持x86-64,arm64和armhf，拉取是会自动拉取合适的架构镜像，也可指定tag拉取。</p>
<p>注意volumes那里要对应downloads，不然PUID和PGID不会生效。</p>
<p>升级：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up -d qbittorrent</span><br></pre></td></tr></table></figure>





<h2 id="RabbitMq"><a href="#RabbitMq" class="headerlink" title="RabbitMq"></a>RabbitMq</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">rabbitmq:management-alpine</span></span><br><span class="line">      <span class="attr">container_name:</span> <span class="string">rabbitmq</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RABBITMQ_DEFAULT_USER=root</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RABBITMQ_DEFAULT_PASS=654321</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;1560:15672&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;5672:5672&quot;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./data:/var/lib/rabbitmq</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>

<p>5672：rabbitmq服务端口</p>
<p>1560：rabbitmq网页端口</p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/conf/redis/redis.conf:/usr/local/etc/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/conf/redis/data:/data</span>  </span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure>

<h2 id="Webdav"><a href="#Webdav" class="headerlink" title="Webdav"></a>Webdav</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webdav:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bytemark/webdav</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">webdav</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">AUTH_TYPE:</span> <span class="string">Digest</span></span><br><span class="line">      <span class="attr">USERNAME:</span> <span class="string">username</span></span><br><span class="line">      <span class="attr">PASSWORD:</span> <span class="string">pass</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/media/download:/var/lib/dav/data</span></span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security入门</title>
    <url>/2020/10/16/spring-security%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>Spring Security 是 Spring 家族中的一个安全管理框架，结合Spring Boot，能够零配置使用 Spring Security。</p>
<a id="more"></a>



<h1 id="配置类-WebSecurityConfigurerAdapter-详解"><a href="#配置类-WebSecurityConfigurerAdapter-详解" class="headerlink" title="配置类 WebSecurityConfigurerAdapter 详解"></a>配置类 WebSecurityConfigurerAdapter 详解</h1><p>配置 Spring Security 主要通过继承 WebSecurityConfigurerAdapter 实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> NoOpPasswordEncoder.getInstance();</span><br><span class="line">        <span class="comment">//        return new BCryptPasswordEncoder();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用于配置用户相关</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">            .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            .password(<span class="string">&quot;123&quot;</span>)</span><br><span class="line">            .roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置用户</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InMemoryUserDetailsManager manager = <span class="keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">&quot;admin&quot;</span>).password(<span class="string">&quot;123&quot;</span>).roles(<span class="string">&quot;admin&quot;</span>).build());</span><br><span class="line">        manager.createUser(User.withUsername(<span class="string">&quot;test&quot;</span>).password(<span class="string">&quot;123&quot;</span>).roles(<span class="string">&quot;test&quot;</span>).build());</span><br><span class="line">        <span class="keyword">return</span> manager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationManager <span class="title">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 处理http认证相关</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>待完善</p>
<h1 id="项目体验"><a href="#项目体验" class="headerlink" title="项目体验"></a>项目体验</h1><p>使用IDEA创建 Spring Boot 项目并添加 <code>spirng-security</code> 相关依赖，之后什么都不用做，Spring Security 能够自动保护所有接口。</p>
<p>创建一个Congroller:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问定义的 “/hello” 接口，会跳转到 spirng security 自带的登录界面，默认用户名是 user，默认密码是在控制台打印的一串 UUID 密码。</p>
<h2 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h2><p>配置有三种配置方式：</p>
<ul>
<li>通过配置文件配置</li>
<li>通过配置类配置</li>
<li>使用数据库</li>
</ul>
<h3 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h3><p>可以在 <code>application.yaml</code> 配置文件中添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">day</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">36987</span></span><br></pre></td></tr></table></figure>

<p>重启项目，就能使用自定义的用户和密码了</p>
<h3 id="配置类配置"><a href="#配置类配置" class="headerlink" title="配置类配置"></a>配置类配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;boy&quot;</span>).roles(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;$2a$10$OR3VSksVAmCzc.7WeaRPR.t0wyCsIj24k0Bne8iKWV1o.V9wsP8Xe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol>
<li>首先定义 <code>SecurityConfig</code> 继承 <code>WebSecurityConfigurerAdapter</code> ，重写 <code>configure</code> 方法</li>
<li>提供 <code>PasswordEncoder</code> 实例</li>
<li>configure 方法中，<code>PasswordEncoder</code> 开启内存中定义用户</li>
<li>使用 <code>and()</code> 配置多个用户</li>
</ol>
<p>还有一种方式重写 WebSecurityConfigurerAdapter 中的 userDetailsService 方法来提供一个 UserDetailService 实例进而配置多个用户：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    InMemoryUserDetailsManager manager = <span class="keyword">new</span> InMemoryUserDetailsManager();</span><br><span class="line">    manager.createUser(User.withUsername(<span class="string">&quot;admin&quot;</span>).password(<span class="string">&quot;123&quot;</span>).roles(<span class="string">&quot;admin&quot;</span>).build());</span><br><span class="line">    manager.createUser(User.withUsername(<span class="string">&quot;test&quot;</span>).password(<span class="string">&quot;123&quot;</span>).roles(<span class="string">&quot;test&quot;</span>).build());</span><br><span class="line">    <span class="keyword">return</span> manager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="登录使用JSON交互"><a href="#登录使用JSON交互" class="headerlink" title="登录使用JSON交互"></a>登录使用JSON交互</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">        .and()</span><br><span class="line">        .formLogin()</span><br><span class="line">        .loginProcessingUrl(<span class="string">&quot;/doLogin&quot;</span>)</span><br><span class="line">        .successHandler((req, resp, authentication) -&gt; &#123;</span><br><span class="line">            Object principal = authentication.getPrincipal();</span><br><span class="line">            resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            PrintWriter out = resp.getWriter();</span><br><span class="line">            out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(principal));</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;)</span><br><span class="line">        .failureHandler((req, resp, e) -&gt; &#123;</span><br><span class="line">            resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            PrintWriter out = resp.getWriter();</span><br><span class="line">            out.write(e.getMessage());</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;)</span><br><span class="line">        .and()</span><br><span class="line">        .logout()</span><br><span class="line">        .logoutSuccessHandler((req, resp, authentication) -&gt; &#123;</span><br><span class="line">            resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            PrintWriter out = resp.getWriter();</span><br><span class="line">            out.write(<span class="string">&quot;注销成功&quot;</span>);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;)</span><br><span class="line">        .and()</span><br><span class="line">        .csrf().disable().exceptionHandling()</span><br><span class="line">        .authenticationEntryPoint((req, resp, authException) -&gt; &#123;</span><br><span class="line">            resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">            PrintWriter out = resp.getWriter();</span><br><span class="line">            out.write(<span class="string">&quot;尚未登录，请先登录&quot;</span>);</span><br><span class="line">            out.flush();</span><br><span class="line">            out.close();</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>successHandler</code> 中定义登录成功的操作，返回JSON给前端；<code>successHandler</code> 中利用 <code>req</code> 参数做服务端跳转 ，使用 <code>resp</code> 做客户端跳转，返回JSON数据； 第三个参数 <code>authentication</code> 保存了登录成功的用户信息。</p>
<p><code>failureHandler</code> 定义登录失败的操作，返回JSON提示给前端；第三个参数 保存了登录失败的原因，使用JSON返回给前端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.logout()</span><br><span class="line">    .logoutSuccessHandler((req, resp, authentication) -&gt; &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.write(<span class="string">&quot;注销成功&quot;</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>



<p><code>logoutSuccessHandler</code> 注销登录的方案</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.csrf().disable().exceptionHandling()</span><br><span class="line">    .authenticationEntryPoint((req, resp, authException) -&gt; &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.write(<span class="string">&quot;尚未登录，请先登录&quot;</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p><code>authenticationEntryPoint</code> 未认证处理方案</p>
<h2 id="授权操作"><a href="#授权操作" class="headerlink" title="授权操作"></a>授权操作</h2><h3 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h3><p>使用基于内存的方式提供 UserDetailService 实例来配置。</p>
<h3 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/admin/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;admin hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>配置拦截规则，在 <code>WebSecurityConfigurerAdapter</code> 重写 <code>configure(HttpSecurity http)</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    http.authorizeRequests()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        .antMatchers(<span class="string">&quot;/test/**&quot;</span>).hasRole(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">        .and()</span><br><span class="line">        .formLogin() <span class="comment">// 要有这一项，不然无法跳转至登录页面</span></span><br><span class="line">        .and()</span><br><span class="line">        .csrf().disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，<code>anyRequest</code> 一定要在所有的 <code>antMatchers</code> 后面。</p>
<p>antMatchers 中的配置为 Ant 风格，规则如下：</p>
<table>
<thead>
<tr>
<th align="left">通配符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">**</td>
<td align="left">匹配多层路径</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">匹配一层路径</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">匹配任意单个字符</td>
</tr>
</tbody></table>
<ol>
<li>如果请求路径满足 <code>/admin/**</code> 格式，则用户需要具备 admin 角色。</li>
<li>如果请求路径满足 <code>/user/**</code> 格式，则用户需要具备 user 角色。</li>
<li>剩余的其他格式的请求路径，只需要认证（登录）后就可以访问。</li>
</ol>
<p>通过以上配置，admin 角色不能访问 <code>/usr/**</code> ，实现了授权配置。</p>
<h3 id="角色继承"><a href="#角色继承" class="headerlink" title="角色继承"></a>角色继承</h3><p>实现 admin 具有 test 的所有权限，在 <code>securityConfig</code> 中添加以下配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">RoleHierarchy <span class="title">roleHierarchy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RoleHierarchyImpl hierarchy = <span class="keyword">new</span> RoleHierarchyImpl();</span><br><span class="line">    hierarchy.setHierarchy(<span class="string">&quot;ROLE_admin &gt; ROLE_text&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> hierarchy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给相应的角色手动添加 <code>ROLE_</code> 前缀，上面的配置表示 <code>ROLE_admin</code> 自动具备 <code>ROLE_user</code> 的权限。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://juejin.im/post/6844903896687575047#heading-0">手把手带你入门 Spring Security！</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;亲密关系&gt;笔记整理</title>
    <url>/2020/10/31/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB-%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>第一章 人际关系的构成</p>
<a id="more"></a>



<h1 id="第一章-人际关系的构成"><a href="#第一章-人际关系的构成" class="headerlink" title="第一章 人际关系的构成"></a>第一章 人际关系的构成</h1><h2 id="亲密关系的性质"><a href="#亲密关系的性质" class="headerlink" title="亲密关系的性质"></a>亲密关系的性质</h2><p>亲密关系和泛泛之交至少在六个方面存在程度差异：了解、关心、依赖、相互一致性、信任、承诺。</p>
<h3 id="归属需要"><a href="#归属需要" class="headerlink" title="归属需要"></a>归属需要</h3><ul>
<li>归属需要得到满足后，我们建立人际关系的内驱力就会降低（因而人际关系的质量比数量更重要）</li>
<li>一般而言，具有亲密关系的人较之单身生活的人更幸福、健康。</li>
</ul>
<p>为什么我们需要亲密关系 - 可能的解释是：归属需要是人类长期演化的产物，逐渐成为所有人共同的自然倾向。</p>
<h2 id="文化的影响"><a href="#文化的影响" class="headerlink" title="文化的影响"></a>文化的影响</h2><p>在美国，与上一代人的婚姻相比，如今新郎与新娘的年龄更大，更可能有上次婚姻的子女，更可能兼顾事业和家庭。</p>
<h4 id="同居的影响"><a href="#同居的影响" class="headerlink" title="同居的影响"></a>同居的影响</h4><p>未婚同居并不能增加随后的婚姻幸福美满；相反，同居增加了夫妻离婚的危险。原因：</p>
<ol>
<li>比已婚夫妻面临更多的问题和不确定性</li>
<li>同居时间越长，对婚姻的热情越低</li>
</ol>
<h4 id="亲密关系变化的根源"><a href="#亲密关系变化的根源" class="headerlink" title="亲密关系变化的根源"></a>亲密关系变化的根源</h4><ul>
<li>经济发展水平</li>
<li>个人主义</li>
<li>新科技</li>
<li>特定文化下青年男女的相对数量。<ul>
<li>男女数量发生变化时，人际关系的规范总是向着有利于男性的方向变化</li>
</ul>
</li>
</ul>
<h2 id="个人经历的影响"><a href="#个人经历的影响" class="headerlink" title="个人经历的影响"></a>个人经历的影响</h2><h3 id="巴塞洛缪认为成人有四种依恋类型"><a href="#巴塞洛缪认为成人有四种依恋类型" class="headerlink" title="巴塞洛缪认为成人有四种依恋类型"></a>巴塞洛缪认为成人有四种依恋类型</h3><ul>
<li>安全型：感情上容易接近，不管依赖他人还是被人依赖都感觉心安。不会担忧独处和不被人接纳。</li>
<li>痴迷型：这种人若要感觉心安，就要过分的依赖于他人的赞许，所以他们过度地追求认同，沉溺于人际关系，担心关系破裂。渴望亲密接触但害怕被拒绝。</li>
<li>恐惧型：和他人发生亲密接触会不安，感情上渴望亲密关系，但很难完全相信或依赖他人。担心自己和他人变得太亲密会受到伤害。</li>
<li>疏离型：认为和他人发生亲密关系得不偿失，拒绝和他人相互依赖，不在乎他人是否喜欢自己。</li>
</ul>
<p>不要绝对化的理解依恋类型。应该理解依恋的复杂性：存在忧虑和回避这两个重要因素，它们塑造了人们在人际交往中表现出的全部适应性行为。</p>
<p>依恋类型受到个体与生俱来的特质影响，基因塑造了我们的依恋类型。</p>
<p>依恋类型不断地受到我们成人后经历的影响。</p>
<h2 id="个体差异的影响"><a href="#个体差异的影响" class="headerlink" title="个体差异的影响"></a>个体差异的影响</h2><h3 id="性别差异"><a href="#性别差异" class="headerlink" title="性别差异"></a>性别差异</h3><p>心理学上两性差异的三个重要观点：</p>
<ul>
<li>两性差异的确存在，但非常小</li>
<li>两性性别内的行为和观点差异通常远大于两性之间的平均差异</li>
<li>两性的行为和观点在正态分布上重合程度高，即使平均得分低的性别中也有许多人的得分高于另一性别的平均水平。</li>
</ul>
<p><strong>个体差异才是影响人际交往的更重要的力量。</strong></p>
<h3 id="性认同差异"><a href="#性认同差异" class="headerlink" title="性认同差异"></a>性认同差异</h3><p>性认同差异指的是由文化和教育引起的两性在社会性和心理上的差异，或者叫社会性别。</p>
<p>性别角色，即社会文化所期待的男女两性应有的正常行为模式。男人应该自信、独立；女人应该热情、敏感。只有一半人的特质刚好符合性别角色期望。</p>
<p>将与任务有关的“男子气”的才能称为<strong>工具性</strong>，与社交和情感有关的“女人味”技能称为<strong>表达性</strong>。双性化的男女同时具有开放性和表达性。</p>
<p>表达性低的人（传统男性特质）不太容易表现出热情和温柔；也不怎么充满深情。低工具性（传统女性特质）的人往往不如高工具性的人（任务导向的技能高）自尊程度高和适应能力强。</p>
<h3 id="人格差异"><a href="#人格差异" class="headerlink" title="人格差异"></a>人格差异</h3><p>人格特质较稳定，长期也只会缓慢地变化。</p>
<p><strong>大五人格特质</strong>：</p>
<ul>
<li>开放性：富有想象力、不墨守成规、艺术气质，相对应的是拘泥、僵化和教条</li>
<li>外倾性：开朗、合群、热情、喜欢社交，相对应的是谨慎、内敛、害羞。</li>
<li>尽责性：勤劳、可依赖、有序，相对应的是不可靠、粗心。</li>
<li>宜人性：同情心、合作性、对人信任，相对应的是易怒、暴躁、充满敌意。</li>
<li>神经质：善变、易担忧、焦虑和愤怒的程度。</li>
</ul>
<p>最重要的是具有消极作用的特质：神经质。神经质的人往往会引起人际摩擦、悲观和争执。</p>
<p><strong>人格影响人际关系的程度远大于人际关系影响人格的程度</strong>。</p>
<p>人们是否会结婚，似乎有部分是由基因决定的。</p>
<h3 id="自尊差异"><a href="#自尊差异" class="headerlink" title="自尊差异"></a>自尊差异</h3><p>对自我的评价构成的<strong>自尊</strong>。对自己的能力和特质持正面评价，自尊水平高；怀疑自己，自尊水平低。</p>
<p>自尊是“社会关系测量仪”，可以测量我们人际关系的质量。他人喜欢我们，我们就喜欢自己；如果别人不在意我们是否会介入他们的生活，自尊水平就低。</p>
<p>在许多领域，自我评价似乎极大地受到我们所以为的他人的看法的影响。如果他人不喜欢我们，我们要喜欢自己非常困难。大多数情况下，如果不能从他人那里获得足够的接纳和欣赏，长期处在低自尊的人就会形成负面的自我评价。</p>
<p>低自尊的人即使处在亲密关系中也往往认为伴侣对自己的感情非常不可靠。高自尊的人因为对伴侣给自己的爱恋和关心充满信心，即使亲密关系出现困难也能和伴侣拉近距离；低自尊的人则持续地怀疑伴侣对自己的关心和依赖，所以一旦关系变糟就从伴侣身边离去，以保护自己免受伤害。</p>
<p>我们对自己的认识来自于与他人的人际关系，并影响人际关系的后续发展。</p>
<h2 id="人类本性的影响"><a href="#人类本性的影响" class="headerlink" title="人类本性的影响"></a>人类本性的影响</h2><p>演化历经无数代塑造着我们的人际关系，潜移默化的使每个人都表现出一定的倾向性。</p>
<h3 id="演化心理学三个假设"><a href="#演化心理学三个假设" class="headerlink" title="演化心理学三个假设"></a>演化心理学三个假设</h3><p><strong>性选择使人类成为今天这样的物种</strong></p>
<p>任何普遍的心理机制之所以以它目前的形式存在，是因为它一直有利于人类解决国区的生存或繁殖问题。</p>
<p><strong>两性之所以存在差异，是因为某种程度上他们在过去面临着不同的繁殖困境</strong></p>
<p>男女双方在生养孩子上的养育投入的生物学差别，引起了男女上方在选择配偶时进化出不同的策略。</p>
<p>女性在选择性伴侣时更为谨慎，而男性则更随便。</p>
<p>女性总能确定孩子是不是自己亲生的的，而男性则不能。或许因为这样，男人对红杏出墙的威胁更为警惕。</p>
<p>男女双方在短期艳遇和长期稳定关系中所追求的异性特征存在差别：男人比女人更渴望短期性关系，也比女性更早地发生性关系；如果想确立长期亲密关系，男人比女人更看重外表。女人选择短期性伙伴时，更看重性感、强势等有阳刚之气的男人；评价有潜力的丈夫时，经济前景作为首选。一般，女性比男性更关注长期伴侣的经济前景和社会地位。</p>
<p><strong>文化决定了演化所形成的的行为模式是否具有适应性，并且文化的变化比演化快得多</strong></p>
<h2 id="人际互动的影响"><a href="#人际互动的影响" class="headerlink" title="人际互动的影响"></a>人际互动的影响</h2><p>人际关系是一种不稳定的存在</p>
<h2 id="人际关系的消极面"><a href="#人际关系的消极面" class="headerlink" title="人际关系的消极面"></a>人际关系的消极面</h2><p>亲密关系中失望和烦恼的恶果会严重影响我们的身体健康。</p>
<p>我们人类是社会化的动物，我们需要彼此。没有与他人的亲密联系，我们就会枯萎和死亡。</p>
]]></content>
      <categories>
        <category>心理学</category>
      </categories>
      <tags>
        <tag>心理学</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Scoop管理Windows软件</title>
    <url>/2019/05/14/%E4%BD%BF%E7%94%A8Scoop%E7%AE%A1%E7%90%86Windows%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<p>体验了一下Scoop这款Windows上的软件包管理器，记录下其安装，配置过程。</p>
<a id="more"></a>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><a href="https://scoop.sh/">官方网址</a></li>
<li><a href="https://github.com/lukesampson/scoop/wiki/Quick-Start">快速入门</a></li>
</ul>
<p>我的电脑是Windows 10 1903，满足基础环境。打开PowerShell</p>
<ol>
<li><p>保证允许本地脚本运行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned <span class="literal">-scope</span> currentuser</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果你不想将scoop将软件默认安装到C盘，可以自定义scoop包安装路径</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env:SCOOP</span>=<span class="string">&#x27;D:\scoop&#x27;</span></span><br><span class="line">[<span class="type">environment</span>]::setEnvironmentVariable(<span class="string">&#x27;SCOOP&#x27;</span>,<span class="variable">$env:SCOOP</span>,<span class="string">&#x27;User&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装scoop</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">iex</span> (<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>安装完成，使用 <code>scoop help</code>验证。出现“Usage: scoop <command> [<args>]</p>
<p>Some useful commands are…”等字样说明安装成功。</p>
<p>之后可以使用 <code>scoop help</code>查看命令参考</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安装软件：<code>scoop install 软件名</code></p>
<p>更新：<code>scoop update</code></p>
<p>移除所有旧版本：<code>scoop cleanup *</code></p>
<p>卸载：<code>scoop uninstall 软件名</code></p>
<h2 id="软件仓库"><a href="#软件仓库" class="headerlink" title="软件仓库"></a>软件仓库</h2><p>Scoop默认仓库（main bucket）是有限的，但是可以添加仓库。</p>
<p>最常见的bucket - <a href="https://github.com/lukesampson/scoop-extras">extras</a>，其包含各个版本的 Firefox、福昕阅读器、Geek Uninstaller、Inkscape、Snipaste 等等</p>
<p>添加：<code>scoop bucket add extras </code></p>
<p>查找官方维护的仓库：<code>scoop bucket known</code></p>
<p>关于更多Scoop仓库的信息，可以参考少数派<a href="https://sspai.com/post/52710">这篇文章</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://sspai.com/post/52496">少数派 - 「一行代码」搞定软件安装卸载，用 Scoop 管理你的 Windows 软件</a></li>
<li><a href="https://www.limufang.com/post/569.html">Windows | Scoop软件包管理神器</a></li>
<li><a href="https://sspai.com/post/52710">少数派 - 给 Scoop 加上这些软件仓库，让它变成强大的 Windows 软件管理器</a></li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>使用aiohttp进行异步爬虫</title>
    <url>/2019/04/04/%E4%BD%BF%E7%94%A8aiohttp%E8%BF%9B%E8%A1%8C%E5%BC%82%E6%AD%A5%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p>不久前出于兴趣需要爬取一个网站的图片，保存到本地。这里记录下使用aiohttp的过程。</p>
<a id="more"></a>

<p>使用成熟的框架Scrapy爬虫时，其对于图片处理的不是很好，对于GIF也没有太大的支持。查找资料后发现了aiohttp这个框架。</p>
<h2 id="单独使用aiohttp"><a href="#单独使用aiohttp" class="headerlink" title="单独使用aiohttp"></a>单独使用aiohttp</h2><p>使用BeautifulSoup解析HTML页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">process_html</span>(<span class="params">page_url</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;解析文章页面，填充item&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(page_url) <span class="keyword">as</span> response:</span><br><span class="line">            cont = <span class="keyword">await</span> response.read()</span><br><span class="line">            soup = bs(cont, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">            item[<span class="string">&#x27;title&#x27;</span>] = soup.find(<span class="string">&#x27;h1&#x27;</span>).string</span><br><span class="line">            item[<span class="string">&#x27;page_url&#x27;</span>] = page_url</span><br><span class="line">            item[<span class="string">&#x27;time&#x27;</span>] = item[<span class="string">&#x27;page_url&#x27;</span>].split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            content = soup.find(<span class="string">&#x27;div&#x27;</span>, class_ = <span class="string">&#x27;main&#x27;</span>)</span><br><span class="line">            data_src_temp = content.find_all(</span><br><span class="line">                <span class="string">&#x27;img&#x27;</span>, attrs = &#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;image&#x27;</span>&#125;)</span><br><span class="line">            <span class="comment"># 得到图片链接</span></span><br><span class="line">            <span class="keyword">for</span> link <span class="keyword">in</span> data_src_temp:</span><br><span class="line">                src_temp = link.get(<span class="string">&#x27;image&#x27;</span>)</span><br><span class="line">                item[<span class="string">&#x27;images_url&#x27;</span>].append(src_temp)</span><br><span class="line">            time_path = os.path.join(<span class="string">&#x27;imagepath&#x27;</span>, item[<span class="string">&#x27;time&#x27;</span>])</span><br><span class="line">            page_path = set_down_path(time_path, item[<span class="string">&#x27;title&#x27;</span>])</span><br><span class="line">            <span class="comment"># print(item[&#x27;images_url&#x27;])</span></span><br><span class="line">            <span class="keyword">for</span> idx, image_url <span class="keyword">in</span> enumerate(item[<span class="string">&#x27;images_url&#x27;</span>]):</span><br><span class="line">                <span class="keyword">await</span> down_one(image_url, page_path, idx)</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">down_one</span>(<span class="params">img_url, page_path_temp, idx</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;得到content后保存到本地&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 图片后缀</span></span><br><span class="line">    suffix = img_url.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">-1</span>]</span><br><span class="line">    <span class="comment"># 组装单个图片路径</span></span><br><span class="line">    image_name = page_path_temp + <span class="string">&quot;/&quot;</span> + str(idx) + <span class="string">&#x27;.&#x27;</span> + suffix</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(image_name):</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 得到图片内容</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(img_url) <span class="keyword">as</span> response:</span><br><span class="line">            content = <span class="keyword">await</span> response.read()</span><br><span class="line">            <span class="keyword">with</span> open(image_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                file.write(content)</span><br><span class="line">                </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>():</span></span><br><span class="line">    print(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [process_html(url) <span class="keyword">for</span> url <span class="keyword">in</span> page_urls]</span><br><span class="line">    loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    loop.close()</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    print(<span class="string">&#x27;总共耗时：%s&#x27;</span> % (t2 - t1))</span><br></pre></td></tr></table></figure>





<h2 id="aiohttp-Scrapy"><a href="#aiohttp-Scrapy" class="headerlink" title="aiohttp+Scrapy"></a>aiohttp+Scrapy</h2><p><a href="https://aiohttp.readthedocs.io/en/stable/">aiohttp</a>是requests的异步替代版。</p>
<p>下面是结合Scrapy的代码，由Scrapy处理得到每页中每张图片的地址，在<code>pipelines.py</code>中使用aiohttp+asyncio下载图片。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SaveImagePipeline</span>(<span class="params">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_down_path</span>(<span class="params">self, time_path, title</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        设置图片的文件夹路径</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(time_path):</span><br><span class="line">                os.mkdir(time_path)</span><br><span class="line">            page_path = os.path.join(time_path, title)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(page_path):</span><br><span class="line">                os.mkdir(page_path)</span><br><span class="line">        <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">            logging.error(e)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> page_path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">down_one</span>(<span class="params">self, img_url, page_path, idx</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;得到content后保存到本地&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 图片后缀</span></span><br><span class="line">        suffix = img_url.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># 组装单个图片路径</span></span><br><span class="line">        image_name = page_path + <span class="string">&quot;/&quot;</span> + str(idx) + <span class="string">&#x27;.&#x27;</span> + suffix</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(image_name):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 得到图片内容</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">async</span> <span class="keyword">with</span> session.get(img_url, verify_ssl = <span class="literal">False</span>) <span class="keyword">as</span> response:</span><br><span class="line">                    <span class="keyword">if</span> response.status == <span class="number">404</span>:</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    content = <span class="keyword">await</span> response.read()</span><br><span class="line">                    <span class="keyword">with</span> open(image_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                        file.write(content)</span><br><span class="line">            <span class="keyword">except</span> aiohttp.client_exceptions.ClientConnectionError:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    tasks = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        post_time = item[<span class="string">&#x27;time&#x27;</span>]</span><br><span class="line">        title = item[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">        time_path = os.path.join(settings[<span class="string">&#x27;SAVE_IMAGE_PATH&#x27;</span>], post_time)</span><br><span class="line">        page_path = self.set_down_path(time_path, title)</span><br><span class="line"></span><br><span class="line">        loop = asyncio.get_event_loop()</span><br><span class="line">        self.tasks = [self.down_one(url, page_path, idx) <span class="keyword">for</span> idx, url <span class="keyword">in</span> enumerate(item[<span class="string">&#x27;images_url&#x27;</span>])]</span><br><span class="line">        loop.run_until_complete(asyncio.wait(self.tasks))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果图片更多，保存图片的操作就成了性能限制，可以尝试使用 <a href="https://github.com/Tinche/aiofiles">aiofiles</a> 进行图片保存</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://aiohttp.readthedocs.io/en/stable/">Welcome to AIOHTTP</a></p>
<p><a href="https://juejin.im/post/5b496e2ce51d45195866d455">掘金-python使用异步每秒钟就能下载一张高清大图，快不快？</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>使用sdkman切换管理多个Java版本</title>
    <url>/2020/03/12/%E4%BD%BF%E7%94%A8sdkman%E5%88%87%E6%8D%A2%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AAJava%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>近两年，Java版本更新变得频繁起来，改为每半年发布一个新版本，伴随着每个新版本的发布都会加入新的特性，无论是想要尝鲜还是项目升级，可能要面临管理多个Java版版本的情况。</p>
<a id="more"></a>

<p>在Python里，可以用Anaconda或者miniconda管理多个Python版本。Java的解决方案有三个：</p>
<ul>
<li>Jabba</li>
<li>jenv</li>
<li>sdkman</li>
</ul>
<p>这里我用sdkman尝鲜。</p>
<p>官网：<a href="https://sdkman.io/">sdkman</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s <span class="string">&quot;https://get.sdkman.io&quot;</span> | bash</span><br></pre></td></tr></table></figure>

<p>在此之前如果你没有安装unzip会报错，Ubuntu安装命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install zip</span><br><span class="line">apt install unzip</span><br></pre></td></tr></table></figure>

<p>之后在终端输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> <span class="string">&quot;<span class="variable">$HOME</span>/.sdkman/bin/sdkman-init.sh&quot;</span></span><br></pre></td></tr></table></figure>

<p>最后，查看sdk版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sdk version</span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="sdk-list"><a href="#sdk-list" class="headerlink" title="sdk list"></a>sdk list</h2><p>查看可用的JDK版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sdk list java</span><br></pre></td></tr></table></figure>

<p><img src="F:\Hexo\source_posts\assets\Snipaste_2020-03-30_18-40-31.png"></p>
<h2 id="sdk-install"><a href="#sdk-install" class="headerlink" title="sdk install"></a>sdk install</h2><p>安装一个Java版本，例如我要安装Amazon的JDK版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sdk install java 11.0.6-amzn</span><br></pre></td></tr></table></figure>

<p>安装完成后，satus就会变成installed状态</p>
<h2 id="sdk-current"><a href="#sdk-current" class="headerlink" title="sdk current"></a>sdk current</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sdk current java</span><br><span class="line"><span class="comment"># Using java version 11.0.6-amzn</span></span><br></pre></td></tr></table></figure>

<h2 id="sdk-use"><a href="#sdk-use" class="headerlink" title="sdk use"></a>sdk use</h2><p>切换到其他Java版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sdk use java 14.0.0-zulu</span><br></pre></td></tr></table></figure>

<h2 id="sdk-default"><a href="#sdk-default" class="headerlink" title="sdk default"></a>sdk default</h2><p>指定某个Java版本为默认版本，例如我指定Amazon的Corretto（11.0.6-amzn）为默认版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sdk default java 11.0.6-amzn</span><br><span class="line"><span class="comment"># 查看Java版本</span></span><br><span class="line">Java -version</span><br><span class="line"><span class="comment"># openjdk version &quot;11.0.6&quot; 2020-01-14 LTS</span></span><br><span class="line"><span class="comment"># OpenJDK Runtime Environment Corretto-11.0.6.10.1 (build 11.0.6+10-LTS)</span></span><br><span class="line"><span class="comment"># OpenJDK 64-Bit Server VM Corretto-11.0.6.10.1 (build 11.0.6+10-LTS, mixed mode)</span></span><br></pre></td></tr></table></figure>

<h2 id="sdk-uninstall"><a href="#sdk-uninstall" class="headerlink" title="sdk uninstall"></a>sdk uninstall</h2><p>卸载某个版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sdk uninstall java ...</span><br></pre></td></tr></table></figure>

<h2 id="sdk-upgrade"><a href="#sdk-upgrade" class="headerlink" title="sdk upgrade"></a>sdk upgrade</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sdk upgrade java</span><br></pre></td></tr></table></figure>

<h1 id="sdkman-卸载"><a href="#sdkman-卸载" class="headerlink" title="sdkman 卸载"></a>sdkman 卸载</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar zcvf ~/sdkman-backup_$(date +%F-%kh%M).tar.gz -C ~/ .sdkman</span><br><span class="line">$ rm -rf ~/.sdkman</span><br></pre></td></tr></table></figure>

<p>之后打开.bashrc，删掉下面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[[ -s <span class="string">&quot;/home/dudette/.sdkman/bin/sdkman-init.sh&quot;</span> ]] &amp;&amp; <span class="built_in">source</span> <span class="string">&quot;/home/dudette/.sdkman/bin/sdkman-init.sh&quot;</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>从Java到Go</title>
    <url>/2020/03/26/%E4%BB%8EJava%E5%88%B0Go/</url>
    <content><![CDATA[<p>趁着有点空闲时间，学习了一下Golang语言，作为Java语言的一种辅助。Go语言与Java有很多相似之处，当然也有它自己的特点，因此记录下Golang的一些特性，与使用了很久的Java做一个对比，便于更快更好的学习。</p>
<a id="more"></a>

<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>package是一个关键字，类似Java里的package</li>
<li>main包是个特殊的包，表示当前是一个可执行程序</li>
<li>import是一个关键字，和Java的import关键字一眼，引入后才可使用</li>
<li>main函数一个主函数，表示程序的入口，和Java的main函数一样</li>
<li>Println是fmt包的函数，和Java的System.out.println()一样</li>
</ul>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h1 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h1><h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="struct组合与继承"><a href="#struct组合与继承" class="headerlink" title="struct组合与继承"></a>struct组合与继承</h2><p>go使用组合来获得类似继承的功能。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Human  <span class="comment">// 匿名字段，默认包含Human的所有字段</span></span><br><span class="line">	school <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	jon := Student&#123;</span><br><span class="line">		Human:  Human&#123;<span class="string">&quot;Jon&quot;</span>, <span class="number">22</span>&#125;,</span><br><span class="line">		school: <span class="string">&quot;NYU&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;His name is %s\n&quot;</span>, jon.name)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;His age is %d\n&quot;</span>, jon.age)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;His school is %s\n&quot;</span>, jon.school)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Student访问属性age的时候，有两种方式可以访问：通过直接访问age和访问Human作为字段名</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">jon.age = <span class="number">35</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;new age is %d\n&quot;</span>, jon.age)</span><br><span class="line">jon.Human.age = <span class="number">29</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;new age is %d\n&quot;</span>, jon.age)</span><br></pre></td></tr></table></figure>

<p>如果Human和Student中含有相同的字段，访问时<strong>最外层优先访问</strong>，即bob.phone访问的是studnet字段</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</span><br><span class="line">	name  <span class="keyword">string</span></span><br><span class="line">	age   <span class="keyword">int</span></span><br><span class="line">	phone <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	Human  <span class="comment">// 匿名字段，默认包含Human的所有字段</span></span><br><span class="line">	school <span class="keyword">string</span></span><br><span class="line">	phone  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	bob := Student&#123;</span><br><span class="line">		Human:  Human&#123;<span class="string">&quot;Bob&quot;</span>, <span class="number">23</span>, <span class="string">&quot;112233&quot;</span>&#125;,</span><br><span class="line">		school: <span class="string">&quot;NYU&quot;</span>,</span><br><span class="line">		phone:  <span class="string">&quot;445566&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Bob&#x27;s work phone is %s\n&quot;</span>, bob.phone)<span class="comment">//445566</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;Bob&#x27;s personal phone is %s&quot;</span>, bob.Human.phone)<span class="comment">//112233</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h1 id="函数与方法"><a href="#函数与方法" class="headerlink" title="函数与方法"></a>函数与方法</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="method-继承"><a href="#method-继承" class="headerlink" title="method 继承"></a>method 继承</h3><p>如果匿名字段实现了一个method，那么包含这个匿名字段的struct也能调用该methond。</p>
<h3 id="method重写"><a href="#method重写" class="headerlink" title="method重写"></a>method重写</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// human定义方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Human)</span> <span class="title">SayHi</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Hi, I am %s , phone is %s \n&quot;</span>, h.name, h.phone)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// employee 重写该方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Employee)</span> <span class="title">SayHi</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;I am %s, work on %s\n&quot;</span>, e.name, e.company)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1>]]></content>
  </entry>
  <entry>
    <title>深入理解Java虚拟机</title>
    <url>/2019/03/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>《深入理解Java虚拟机》读书笔记，以及其他关于JVM的一些博客</p>
<a id="more"></a>    

<h2 id="Java运行时数据区"><a href="#Java运行时数据区" class="headerlink" title="Java运行时数据区"></a>Java运行时数据区</h2><p>分为：程序计数器，Java虚拟机栈，本地方法区，Java堆，方法区</p>
<p>程序计数器，Java虚拟机，本地方法区是线程私有，随线程而生，随线程而灭。</p>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>记录正在执行的虚拟机字节码指令的地址（如果正在执行的是本地方法则为空），分支，跳转，异常处理都需要计数器完成。</p>
<h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><p>每个方法在执行的同时会创建一个栈帧用于存储局部变量表，操作数栈，常量池引用等信息。每一个方法从调用到执行完成的过程，对应一个栈帧在虚拟机中入栈到出栈的过程。</p>
<p>异常：</p>
<ul>
<li>当线程请求的栈深度超过最大值，会抛出 StackOverflowError 异常；</li>
<li>栈进行动态扩展时如果无法申请到足够内存，会抛出 OutOfMemoryError 异常。</li>
</ul>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>为虚拟机使用到的Native方法服务。</p>
<p>异常：</p>
<ul>
<li>StackOverError，</li>
<li>OutOfMemoryError</li>
</ul>
<h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>被所有线程共享。存放对象实例，是垃圾收集器管理的主要区域，“GC堆”。</p>
<p>异常：</p>
<ul>
<li>OutOfMemoryError</li>
</ul>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>线程共享。存放被虚拟机加载的类信息，常量，静态变量，即时编译后的代码等数据。<br>和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。</p>
<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>是方法区的一部分。用于存放编译期生成的各种字面量和符号引用。具备动态性。</p>
<h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>在 JDK 1.4 中新引入了 NIO 类，它可以使用 Native 函数库直接分配堆外内存，然后通过 Java 堆里的 DirectByteBuffer 对象作为这块内存的引用进行操作。</p>
<h2 id="对象-new一个对象的过程"><a href="#对象-new一个对象的过程" class="headerlink" title="对象-new一个对象的过程"></a>对象-new一个对象的过程</h2><ol>
<li>类加载检查。首先检查new指令的参数能否在常量池中定位到一个类的符号引用，检查这个符号引用代表的类是否加载完成，如果没有，执行相应的类加载过程。</li>
<li>为新生对象分配内存。对象所需内存大小在类加载完成后已经确定</li>
<li>内存分配完，将分配到的内存空间初始化为零值</li>
<li>对对象进行必要的设置，如该对象是哪个类的实例等</li>
<li>执行init方法，将对象按照程序员意愿初始化对象。（如 private int age = 10）</li>
</ol>
<h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><p>主要针对堆和方法区。</p>
<h3 id="判断对象是否可回收"><a href="#判断对象是否可回收" class="headerlink" title="判断对象是否可回收"></a>判断对象是否可回收</h3><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>为对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。</p>
<p>目前主流Java虚拟机没有使用这种方法。</p>
<h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>以 GC Roots 为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。</p>
<p>可作为GC Roots的对象：</p>
<ul>
<li>虚拟机栈引用的对象</li>
<li>方法区静态属性引用对象</li>
<li>常量引用的对象</li>
<li>本地方法栈中引用的对象</li>
</ul>
<h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><ul>
<li>强引用</li>
</ul>
<p>强引用的对象不会被回收。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure>

<ul>
<li>软引用</li>
</ul>
<p>有用但非必须的对象。在内存不够的情况下被回收。</p>
<ul>
<li>弱引用</li>
</ul>
<p>一定会被回收。</p>
<ul>
<li>虚引用</li>
</ul>
<p>又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。</p>
<p>为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。</p>
<h4 id="回收过程"><a href="#回收过程" class="headerlink" title="回收过程"></a>回收过程</h4><p>一个对象死亡经历两次标记过程。第一次，使用可达性分析算法标记，判断对象是否需要执行<code>finalize()</code>方法，如果有必要执行，被一个低优先级的Finalizer线程执行。<code>finalize()</code>方法是对象逃脱死亡的最后一次机会。如果对象在<code>finalize()</code>中没有重新与引用链上任何一个对象建立关联，则会被回收。</p>
<p>当一个对象可被回收时，如果需要执行该对象的 finalize() 方法，那么就有可能在该方法中让对象重新被引用，从而实现自救。自救只能进行一次，如果回收的对象之前调用了 finalize() 方法自救，后面回收时不会再调用该方法。任何一个对象的<code>finalize()</code>只会被系统自动调用一次</p>
<h4 id="方法区的回收"><a href="#方法区的回收" class="headerlink" title="方法区的回收"></a>方法区的回收</h4><p>方法区主要存放永久代对象。主要是对常量池的回收和对类的卸载。</p>
<p>类卸载条件：</p>
<ul>
<li>该类所有的实例已经被回收，Java堆中不存在该类的任何实例</li>
<li>加载该类的CladdLoader被回收。</li>
<li>该类对应的java.lang.Class对象没有在任何地方被引用</li>
</ul>
<h3 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h3><h4 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h4><p>两个阶段：标记，清除。首先标记所有需要回收的对象，标记完成统一回收。</p>
<p>不足：</p>
<ul>
<li>标记和清除效率都不高</li>
<li>标记清除后会产生大量不连续的内存碎片</li>
</ul>
<h4 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h4><p>将内存划分为大小相等的两块，每次只使用其中一块，当这一块内存用完了就将还存活的对象复制到另一块上面，然后再把使用过的内存空间进行一次清理。</p>
<p>实现简单，运行高效。不足为只用内存的一半</p>
<p>使用该算法收集新生代</p>
<h4 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h4><p>让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p>
<h4 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h4><p>将Java堆分为新生代和老年代。新生代选用复制算法，老年代使用：标记-清除或者标记-整理算法。</p>
<h3 id="HotSpot算法实现"><a href="#HotSpot算法实现" class="headerlink" title="HotSpot算法实现"></a>HotSpot算法实现</h3><p>GC进行时必须停顿所有Java执行线程，即**STW(Stop The World)**。</p>
<p>程序执行时只有在安全点才能发生GC。</p>
<h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><p><img src="garbaecollection.jpg"></p>
<h4 id="1-Serial-收集器"><a href="#1-Serial-收集器" class="headerlink" title="1. Serial 收集器"></a>1. Serial 收集器</h4><p><strong>单线程收集器</strong>，进行垃圾收集时，必须暂停其他所有线程。</p>
<p>优点：简单高效，单个CPU环境，单线程收集效率高。</p>
<p>是Client模式下默认的新生代收集器。</p>
<h4 id="2-ParNew-收集器"><a href="#2-ParNew-收集器" class="headerlink" title="2. ParNew 收集器"></a>2. ParNew 收集器</h4><p>Serial收集器的<strong>多线程</strong>版。</p>
<p>Server模式下虚拟机的默认新生代收集器。</p>
<h4 id="3-Parallel-Scavenge-收集器"><a href="#3-Parallel-Scavenge-收集器" class="headerlink" title="3. Parallel Scavenge 收集器"></a>3. Parallel Scavenge 收集器</h4><p>使用<strong>复制算法</strong>，多线程。</p>
<p>其他收集器关注点是尽量缩短垃圾收集时用户线程的停顿时间，它的目的是达到一个可控的<strong>吞吐量</strong>。</p>
<h4 id="4-Serial-Old-收集器"><a href="#4-Serial-Old-收集器" class="headerlink" title="4. Serial Old 收集器"></a>4. Serial Old 收集器</h4><p>Serial收集器的老年代版本，<strong>单线程</strong>，使用 <strong>标记-整理算法</strong></p>
<p>Srver场景：</p>
<ul>
<li>作为CMS收集器的后备</li>
<li>JDK1.5 前与 Parallel Scavenge收集器搭配</li>
</ul>
<h4 id="5-Parallel-Old-收集器"><a href="#5-Parallel-Old-收集器" class="headerlink" title="5. Parallel Old 收集器"></a>5. Parallel Old 收集器</h4><p>Parallel Scavenge 收集器的老年代版本。</p>
<p>在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器。</p>
<h4 id="6-CMS收集器"><a href="#6-CMS收集器" class="headerlink" title="6. CMS收集器"></a>6. CMS收集器</h4><p>基于 <strong>标记-清除算法</strong></p>
<p>流程：</p>
<ul>
<li>初始标记：标记GC Roots能直接关联到的对象，速度快。需要<strong>Stop The World</strong></li>
<li>并发标记：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长</li>
<li>重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录。需要<strong>Stop The World</strong></li>
<li>并发清除：不需要停顿。</li>
</ul>
<p>在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。</p>
<p>优点：并发收集，低停顿</p>
<p>缺点：</p>
<ul>
<li>对CPU资源敏感，因此吞吐量低</li>
<li>无法处理浮动垃圾，</li>
<li>标记 - 清除算法导致的空间碎片</li>
</ul>
<h4 id="7-G1-收集器"><a href="#7-G1-收集器" class="headerlink" title="7. G1 收集器"></a>7. G1 收集器</h4><p>G1（Garbage-First），它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。</p>
<p>相比于CMS，G1的优势在于：没有向CMS的碎片化问题，提供可控的停顿时间。G1设计的目的：尽力满足停顿桑蝉爱你</p>
<p>特点：</p>
<ul>
<li>并行与并发：使用多个CPU缩短 STW的时间</li>
<li>分代收集：</li>
<li>空间整合：整体使用 <strong>标记-整理 算法</strong>，局部使用<strong>复制算法</strong></li>
<li>可预测的停顿</li>
</ul>
<p>收集范围是整个Java堆，把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。</p>
<p>通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。</p>
<p>每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。 </p>
<p>步骤：</p>
<ul>
<li>初始标记</li>
<li>并发标记</li>
<li>最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。</li>
<li>筛选回收：首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。</li>
</ul>
<h2 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h2><h3 id="Minor-GC-和-Full-GC"><a href="#Minor-GC-和-Full-GC" class="headerlink" title="Minor GC 和 Full GC"></a>Minor GC 和 Full GC</h3><ul>
<li>Minor GC：发生在新生代的垃圾收集，频繁，回收速度快</li>
<li>Full GC：发生在老年代的垃圾收集。伴随着至少一次的Minor GC，速度慢。</li>
</ul>
<h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><h4 id="1-对象优先在Eden分配"><a href="#1-对象优先在Eden分配" class="headerlink" title="1. 对象优先在Eden分配"></a>1. 对象优先在Eden分配</h4><p>大多数情况下，对象优先在新生代Eden分配。当Eden空间不够时，发起Minor GC。</p>
<h4 id="2-大对象直接进入老年代"><a href="#2-大对象直接进入老年代" class="headerlink" title="2. 大对象直接进入老年代"></a>2. 大对象直接进入老年代</h4><p>最典型的大对象是那种很长的字符串以及数组。</p>
<p>通过<code>-XX:PretenureSizeThreshold</code>参数，大于这个设置值的对象直接在老年代分配。避免在Eden曲和两个Survivor区发生大量内存复制。</p>
<h4 id="3-长期存活对象直接进入老年代"><a href="#3-长期存活对象直接进入老年代" class="headerlink" title="3. 长期存活对象直接进入老年代"></a>3. 长期存活对象直接进入老年代</h4><p>对象在Eden出生并经历第一次Minor GC后任然存活，并能被Survivor接受，将被移动到Survivor空间，对象年龄为1,。对象在Survivor区每熬过一次，Minor GC，年龄增加一岁，增加到（默认15岁）被晋升到老年代中。</p>
<p>年龄阈值通过<code>-XX:PretenureSizeThreshold</code>设定</p>
<h4 id="4-动态对象年龄判定"><a href="#4-动态对象年龄判定" class="headerlink" title="4. 动态对象年龄判定"></a>4. 动态对象年龄判定</h4><p>如果在Survivor空间中，相同年龄所有对象大小的总和大于Survivor空间的一半，年两大于等于改年龄的对象直接进入老年代。</p>
<h4 id="5-空间分配担保"><a href="#5-空间分配担保" class="headerlink" title="5. 空间分配担保"></a>5. 空间分配担保</h4><p>出现大量对象在Minor GC后仍然存活的情况，需要老年代进行分配担保，Survivor空间无法容纳的对象直接进入老年代。</p>
<h2 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h2><h3 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h3><p>比较两个类是否相等，只有在两个类有同一个类加载器加载的前提下才有意义，否则，即使这两个类来自于同一个Class文件，被同一个虚拟机加载，只要加载他们的类加载器不同，这连个类必定不相等。</p>
<h3 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h3><ul>
<li>启动类加载器</li>
<li>扩展类加载器</li>
<li>应用程序类加载器</li>
</ul>
<h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><p><img src="%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B.png"></p>
<p>双亲委派模型要求，除了顶层的启动类加载器，其他加载器都应该有自己的父类加载器。类加载器以组合的关系复用父加载器。</p>
<h4 id="工作过程"><a href="#工作过程" class="headerlink" title="工作过程"></a>工作过程</h4><p>如果一个类加载器收到了类加载请求，它首先不会加载这个类，而是把这个请求委派给父类加载器完成，每一层次都是如此，因此所有的加载请求最终都会传送到顶层的启动类加载器，只有当父类加载器无法完成这个加载请求，子加载器才会尝试自己加载。</p>
<h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><p>Java类随着他的加载器有了带有优先级的层次关系。例如 <code>java.lang.Object</code></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>周志明. 深入理解 Java 虚拟机 [M]. 机械工业出版社, 2017.</li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md">CS-Notes-Java 虚拟机</a></li>
<li><a href="https://www.javadoop.com/post/jvm-memory-management">Javadoop - HotSpot JVM 内存管理</a></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的遍历-算法</title>
    <url>/2019/07/12/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<p>二叉树的先中后遍历的递归与非递归实现，层序遍历，Mirros遍历</p>
<a id="more"></a>

<h2 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h2><p><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/">LeetCode-144. Binary Tree Preorder Traversal</a></p>
<h3 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        preOrderHelp(res, root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrderHelp</span><span class="params">(List&lt;Integer&gt; res, TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        res.add(root.val);</span><br><span class="line">        preOrderHelp(res, root.left);</span><br><span class="line">        preOrderHelp(res, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h3><p>使用栈保存节点。注意入栈时是<strong>右孩子先入栈</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        TreeNode node = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            node = stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node != <span class="keyword">null</span>)&#123;</span><br><span class="line">                res.add(node.val);</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="非递归实现2"><a href="#非递归实现2" class="headerlink" title="非递归实现2"></a>非递归实现2</h3><p>不需要入栈，每次遍历到“左”节点，立即输出即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        TreeNode cur = root;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span> || !stack.empty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">                res.add(cur.val);</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/description/">LeetCode - 94. Binary Tree Inorder Traversal</a></p>
<h3 id="递归实现-1"><a href="#递归实现-1" class="headerlink" title="递归实现"></a>递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        inorderHelp(res, root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorderHelp</span><span class="params">(List&lt;Integer&gt; res, TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        inorderHelp(res, root.left);</span><br><span class="line">        res.add(root.val);</span><br><span class="line">        inorderHelp(res, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="非递归实现-1"><a href="#非递归实现-1" class="headerlink" title="非递归实现"></a>非递归实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        TreeNode cur = root;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span> || !stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            res.add(cur.val);</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><p><a href="">LeetCode - 145. Binary Tree Postorder Traversal</a></p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        postorderHelp(res, root);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postorderHelp</span><span class="params">(List&lt;Integer&gt; res, TreeNode root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        postorderHelp(res, root.left);</span><br><span class="line">        postorderHelp(res, root.right);</span><br><span class="line">         res.add(root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><p><a href="https://www.nowcoder.com/practice/7fe2212963db4790b57431d9ed259701?tpId=13&tqId=11175&tPage=2&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking">newcoder - 从上往下打印二叉树</a></p>
<p><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/description/">LeetCode - 102. Binary Tree Level Order Traversal</a></p>
<p>使用队列作为辅助结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">PrintFromTopToBottom</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        TreeNode node = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            node = queue.poll();</span><br><span class="line">            res.add(node.val);</span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) queue.offer(node.left);</span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="keyword">null</span>) queue.offer(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Morris遍历"><a href="#Morris遍历" class="headerlink" title="Morris遍历"></a>Morris遍历</h2><p>Morris遍历可以在O(N)的时间复杂度内完成遍历，且空间复杂度为O(1)，N：二叉树节点个数。其遍历规则为：</p>
<ol>
<li>当前节点cur，如果cur无左孩子，cur右移（cur = cur.right）</li>
<li>如果cur 有左孩子，找到cur左子树最右的节点，记为mostright。<ol>
<li>如果mostright的right指向空，让其指向cur，cur 左移（cur = cur.left）</li>
<li>如果mostright的right指向cur，让其指向空，cur 右移</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mirros</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    TreeNode cur = root;</span><br><span class="line">    TreeNode mostRight = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">        mostRight = cur.left;</span><br><span class="line">        <span class="keyword">if</span>(mostRight != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(mostRight.right != <span class="keyword">null</span> &amp;&amp; mostRight.right != cur)&#123;</span><br><span class="line">                mostRight = mostRight.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mostRight.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">                mostRight.right = cur;</span><br><span class="line">                cur = cur.left;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                mostRight.right = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="先序遍历-1"><a href="#先序遍历-1" class="headerlink" title="先序遍历"></a>先序遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        TreeNode cur = root;</span><br><span class="line">        TreeNode mostRight = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            mostRight = cur.left;</span><br><span class="line">            <span class="keyword">if</span>(mostRight != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(mostRight.right != <span class="keyword">null</span> &amp;&amp; mostRight.right != cur)&#123;</span><br><span class="line">                    mostRight = mostRight.right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(mostRight.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    mostRight.right = cur;</span><br><span class="line">                    <span class="comment">// 先序</span></span><br><span class="line">                    res.add(cur.val);</span><br><span class="line">                    cur = cur.left;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    mostRight.right = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">// 先序</span></span><br><span class="line">                res.add(cur.val);</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        </span><br><span class="line">        TreeNode cur = root;</span><br><span class="line">        TreeNode most = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>)&#123;</span><br><span class="line">            most = cur.left;</span><br><span class="line">            <span class="keyword">if</span>(most != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(most.right != <span class="keyword">null</span> &amp;&amp; most.right != cur)&#123;</span><br><span class="line">                    most = most.right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(most.right == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    most.right = cur;</span><br><span class="line">                    cur = cur.left;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    most.right = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 中序</span></span><br><span class="line">            res.add(cur.val);</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://juejin.im/post/59e3fde451882578c20858a5">掘金 - 刷题二叉树非递归遍历</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-创建型</title>
    <url>/2019/04/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%88%9B%E5%BB%BA%E5%9E%8B/</url>
    <content><![CDATA[<p>设计模式中的创建型模式。创建型模式的作用就是创建对象，说到创建一个对象，最熟悉的就是 new 一个对象，然后 set 相关属性。但是，在很多场景下，我们需要给客户端提供更加友好的创建对象的方式，尤其是那种我们定义了类，但是需要提供给其他开发者用的时候。包括单例，简单工厂，工厂方法，抽象工厂，生成器，原型模式。</p>
<a id="more"></a>    

<h1 id="1-单例模式（重要）"><a href="#1-单例模式（重要）" class="headerlink" title="1. 单例模式（重要）"></a>1. 单例模式（重要）</h1><h2 id="为什么使用"><a href="#为什么使用" class="headerlink" title="为什么使用"></a>为什么使用</h2><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
<ul>
<li>频繁操作的对此昂，省略创建对象花费的时间</li>
<li>new操作次数减少，因而对系统的内存使用降低，减少GC压力</li>
</ul>
<p>为了保证全局使用的是同一对象，一方面是安全性考虑，一方面是为了节省资源。</p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p><strong>饿汉模式</strong>：全局的单例实例在类装载时构建。JVM在加载这个类时就马上创建此唯一的单例实例，不管你用不用，先创建了再说，如果一直没有被使用，便浪费了空间，典型的空间换时间，每次调用的时候，就不需要再判断，节省了运行时间。</p>
<p><strong>懒汉模式</strong>：全局的单例实例在第一次被使用时构建。单例实例在第一次被使用时构建，而不是在JVM在加载这个类时就马上创建此唯一的单例实例。</p>
<p>单例类有一个private的构造函数；instance成员变量和uninstance方法是static的</p>
<p>构造方法声明为private,使得无法从外部类来实例化对象，然后在类内部的方法中返回实例化的单一对象。</p>
<h3 id="1-饿汉模式"><a href="#1-饿汉模式" class="headerlink" title="1. 饿汉模式"></a>1. 饿汉模式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// new Singleton() 堵死</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">    <span class="comment">// 私有静态实例，该类第一次使用进行创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。一般情况下使用。</p>
<h3 id="2-懒汉模式-线程不安全"><a href="#2-懒汉模式-线程不安全" class="headerlink" title="2. 懒汉模式(线程不安全)"></a>2. 懒汉模式(线程不安全)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用了懒加载模式，但是却存在致命的问题。当有多个线程并行调用 getInstance() 的时候，就会创建多个实例</p>
<h3 id="3-懒汉模式-（线程安全）"><a href="#3-懒汉模式-（线程安全）" class="headerlink" title="3. 懒汉模式 （线程安全）"></a>3. 懒汉模式 （线程安全）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>synchronized</code>,每次调用getInstance方法时都需要进行同步，造成不必要的同步开销，</p>
<h3 id="4-双重检查模式（DCL）-懒汉式"><a href="#4-双重检查模式（DCL）-懒汉式" class="headerlink" title="4. 双重检查模式（DCL）- 懒汉式"></a>4. 双重检查模式（DCL）- 懒汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 检查实例，不存在进入同步代码块</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="comment">// 进入同步代码块后再次检查，如果null，创建实例</span></span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>双重检验锁模式（double checked locking pattern），两次检验instance是否为null。</p>
<h3 id="5-嵌套类类单例模式（推荐）-懒汉式"><a href="#5-嵌套类类单例模式（推荐）-懒汉式" class="headerlink" title="5. 嵌套类类单例模式（推荐）- 懒汉式"></a>5. 嵌套类类单例模式（推荐）- 懒汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCEE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCEE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Singleton类被加载时，静态内部类SingletonHolder没有被加载进内存，只有当调用getInstance()方法，触发<code> SingletonHolder.INSTANCEE</code>，SingletonHolder才被加载，此时初始化INSTANCE实例，且JVM确保INSTANCE只实例化一次。<strong>使用JVM本身机制保证了线程安全问题</strong>；由于 SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本。</p>
<h3 id="6-枚举类（最佳）"><a href="#6-枚举类（最佳）" class="headerlink" title="6. 枚举类（最佳）"></a>6. 枚举类（最佳）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">EasySingleton</span></span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一般情况下使用第一种 <strong>饿汉模式</strong>，明确要求要懒加载（lazy initialization），使用第五种静态内部类。涉及到反序列化创建对象时，可以尝试使用第 6 种枚举方式。</p>
<ul>
<li><a href="https://blog.csdn.net/qq_34337272/article/details/80455972">深入理解单例模式——只有一个实例</a></li>
</ul>
<h1 id="2-简单工厂模式"><a href="#2-简单工厂模式" class="headerlink" title="2. 简单工厂模式"></a>2. 简单工厂模式</h1><p>简单工厂模式通常就是这样，一个工厂类 XxxFactory，里面有一个静态方法，根据我们不同的参数，返回不同的派生自同一个父类（或实现同一接口）的实例对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">createProduct</span><span class="params">(<span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct1();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-工厂模式（重要）"><a href="#3-工厂模式（重要）" class="headerlink" title="3. 工厂模式（重要）"></a>3. 工厂模式（重要）</h1><p><strong>每个对象都有一个与之对应的工厂</strong></p>
<p>意图：定义了一个创建对象的接口，但由子类决定要实例化哪个类。工厂方法把实例化操作推迟到子类。</p>
<p>简单工厂中，创建对象的是另一个类，而在工厂方法中，是由子类来创建对象。</p>
<p>为什么使用工厂模式：1. 解耦：将对象的创建和使用分离。2. 降低代码重复。3. 降低代码维护。</p>
<p>Spring中的IOC就用到了工厂模式。</p>
<p><img src="factorymethod.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FoodFactory</span></span>&#123;</span><br><span class="line">    <span class="function">Food <span class="title">makeFood</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChineseFoodFactory</span> <span class="keyword">implements</span> <span class="title">FoodFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Food <span class="title">makeFood</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ChineseFoodA();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">&quot;B&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ChineseFoodB();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmericaFoodFactory</span> <span class="keyword">implements</span> <span class="title">FoodFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Food <span class="title">makeFood</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AmericaFood(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 选择具体工厂</span></span><br><span class="line">        FoodFactory fac = <span class="keyword">new</span> ChineseFoodFactory();</span><br><span class="line">        <span class="comment">// 由工厂生产对象</span></span><br><span class="line">        Food food = fac.makeFood(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-抽象工厂模式"><a href="#4-抽象工厂模式" class="headerlink" title="4. 抽象工厂模式"></a>4. 抽象工厂模式</h1><p>意图：提供一个接口，用于创建 <strong>相关的对象家族</strong> 。主要解决接口选择问题。</p>
<p><img src="abstract-factory-3.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 建造大厂</span></span><br><span class="line">    ComputerFactory cf = <span class="keyword">new</span> AmdFactory();</span><br><span class="line">    Cpu cpu = cf.makeCpu();</span><br><span class="line">    Disk disk = cf.makeDisk();</span><br><span class="line">    <span class="comment">// 组装</span></span><br><span class="line">    Computer res = <span class="keyword">new</span> Computer(cpu, disk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="5-建造者模式"><a href="#5-建造者模式" class="headerlink" title="5. 建造者模式"></a>5. 建造者模式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pass;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">(String name, String pass, String nickName, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pass = pass;</span><br><span class="line">        <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法，生成一个Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBuilder</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 下面是和 User 一模一样的一堆属性</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String pass;</span><br><span class="line">        <span class="keyword">private</span> String nickName;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">UserBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 链式调用各个属性值，返回UserBuilder</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">name</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">pass</span><span class="params">(String pass)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.pass = pass;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">nickName</span><span class="params">(String nickName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.nickName = nickName;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">age</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// build() 方法负责将 UserBuilder 中设置好的属性“复制”到 User 中。</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(name, pass, nickName, age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="6-原型模式"><a href="#6-原型模式" class="headerlink" title="6. 原型模式"></a>6. 原型模式</h1><p>意图：原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Prototype <span class="title">myClone</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype</span> <span class="keyword">extends</span> <span class="title">Prototype</span></span>&#123;</span><br><span class="line">    String filed;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcretePrototype</span><span class="params">(Stirng filed)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filed = filed;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Prototype <span class="title">myClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcretePrototype(filed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Object 类中有一个 clone() 方法，它用于生成一个新的对象，java 要求我们的类必须先<strong>实现 Cloneable 接口</strong>，此接口没有定义任何方法，但是不这么做的话，在 clone() 的时候，会抛出 CloneNotSupportedException 异常。</p>
<p>java 的克隆是浅克隆，碰到对象引用的时候，克隆出来的对象和原对象中的引用将指向同一个对象。通常实现深克隆的方法是将对象进行序列化，然后再进行反序列化。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://www.javadoop.com/post/design-pattern">Javadoop - 设计模式也可以这么简单</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.md">CS-Notes - 设计模式</a></li>
<li><a href="https://blog.csdn.net/itachi85/article/details/50510124">设计模式（二）单例模式的七种写法</a></li>
<li><a href="http://www.runoob.com/design-pattern/singleton-pattern.html">菜鸟教程-单例模式</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-结构型</title>
    <url>/2019/04/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%93%E6%9E%84%E5%9E%8B/</url>
    <content><![CDATA[<p>设计模式中结构型模式。结构型模式旨在通过改变代码结构来达到解耦的目的，使得我们的代码容易维护和扩展。</p>
<p>主要包括代理模式（Proxy Pattern），适配器模式（Adapter Pattern），桥接（Bridge），装饰器模式（Decorator Pattern），外观模式（Facade Pattern），组合模式（Composite Pattern），享元模式。</p>
<a id="more"></a>

<h1 id="1-代理模式（Proxy-Pattern）"><a href="#1-代理模式（Proxy-Pattern）" class="headerlink" title="1. 代理模式（Proxy Pattern）"></a>1. 代理模式（Proxy Pattern）</h1><p>代理模式（Proxy Pattern）中，一个类代表另一个类的功能。</p>
<p>Spring框架的AOP就是代理模式的体现。</p>
<p><strong>意图：</strong>为其他对象提供一种代理以控制对这个对象的访问。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FoodService</span></span>&#123;</span><br><span class="line">    <span class="function">Food <span class="title">makeChicken</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Food <span class="title">makeNoodle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FoodServiceImpl</span> <span class="keyword">implements</span> <span class="title">FoodService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Food <span class="title">makechicken</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Food f = <span class="keyword">new</span> Chicken();</span><br><span class="line">        f.setChicken(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        f.setSpicy(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Food <span class="title">makeNoodle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Food f = <span class="keyword">new</span> Noodle();</span><br><span class="line">        f.setNoodle(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        f.setSalt(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FoodServiceProxy</span> <span class="keyword">implements</span> <span class="title">FoodService</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> FoodService foodService = <span class="keyword">new</span> FoodServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Food <span class="title">makeChicken</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 制作chicken</span></span><br><span class="line">        Food food = foodService.makeChicken();</span><br><span class="line">        <span class="comment">// chicken制作完成</span></span><br><span class="line">        food.addCondiment(<span class="string">&quot;add&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> food;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="proxy-1.png"></p>
<p>代理模式说白了就是做 <strong>“方法包装”</strong> 或做 <strong>“方法增强”</strong>。AOP 中，其实就是动态代理的过程。比如 Spring 中，我们自己不定义代理类，但是 Spring 会帮我们动态来定义代理，然后把我们定义在 @Before、@After、@Around 中的代码逻辑动态添加到代理中。</p>
<h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#asList%28T...%29">java.util.Arrays#asList()</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#list-java.util.Enumeration-">java.util.Collections#list()</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Collections.html#enumeration-java.util.Collection-">java.util.Collections#enumeration()</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#marshal-BoundType-">javax.xml.bind.annotation.adapters.XMLAdapter</a></li>
</ul>
<h1 id="2-适配器模式（Adapter-Pattern）"><a href="#2-适配器模式（Adapter-Pattern）" class="headerlink" title="2. 适配器模式（Adapter Pattern）"></a>2. 适配器模式（Adapter Pattern）</h1><p>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;<span class="comment">// 鸭叫</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span></span>;<span class="comment">// 鸡叫</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildCock</span> <span class="keyword">implements</span> <span class="title">Cock</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸡叫&quot;</span>);;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸡飞&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用适配器模式，让鸭实现鸡叫</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CockAdapter</span> <span class="keyword">implements</span> <span class="title">Duck</span></span>&#123;</span><br><span class="line">    Cock cock;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CockAdapter</span><span class="params">(Cock cock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cock = cock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 鸡叫</span></span><br><span class="line">        cock.gobble();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="adapter-2.png"></p>
<h1 id="3-桥梁模式（Bridge）"><a href="#3-桥梁模式（Bridge）" class="headerlink" title="3. 桥梁模式（Bridge）"></a>3. 桥梁模式（Bridge）</h1><p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。</p>
<p>首先定义桥梁，接口，定义提供的接口方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DrawApi</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedPen</span> <span class="keyword">implements</span> <span class="title">DrawApi</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;用红色笔画图，radius:&quot;</span> + radius + <span class="string">&quot;, x:&quot;</span> + x + <span class="string">&quot;, y:&quot;</span> + y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenPen</span> <span class="keyword">implements</span> <span class="title">DrawAPI</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> radius, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;用绿色笔画图，radius:&quot;</span> + radius + <span class="string">&quot;, x:&quot;</span> + x + <span class="string">&quot;, y:&quot;</span> + y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义抽象类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> DrawAPI drawAPI;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="title">Shape</span><span class="params">(DrawAPI drawAPI)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.drawAPI = drawAPI;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 长方形</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, DrawAPI drawAPI)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(drawAPI);</span><br><span class="line">          <span class="keyword">this</span>.x = x;</span><br><span class="line">          <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      drawAPI.draw(<span class="number">0</span>, x, y);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Shape redRectangle = <span class="keyword">new</span> Rectangle(<span class="number">4</span>, <span class="number">8</span>, <span class="keyword">new</span> RedPen());</span><br><span class="line">      redRectangle.draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="bridge-1.png"></p>
<h2 id="JDK-1"><a href="#JDK-1" class="headerlink" title="JDK"></a>JDK</h2><ul>
<li>AWT</li>
<li>JDBC</li>
</ul>
<h1 id="4-装饰模式（Decorator-Pattern）"><a href="#4-装饰模式（Decorator-Pattern）" class="headerlink" title="4. 装饰模式（Decorator Pattern）"></a>4. 装饰模式（Decorator Pattern）</h1><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。</p>
<p><strong>意图：</strong>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义基本饮料类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDesc</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加三个饮料实现红茶， 绿茶</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackTea</span> <span class="keyword">extends</span> <span class="title">Beverage</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;红茶&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenTea</span> <span class="keyword">extends</span> <span class="title">Beverage</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;绿茶&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">22</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调料，即装饰器的基类，继承自Beverage</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调料</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Condiment</span> <span class="keyword">extends</span> <span class="title">Beverage</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义具体调料</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lemon</span> <span class="keyword">extends</span> <span class="title">Condiment</span></span>&#123;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    <span class="keyword">private</span> Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入具体饮料</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Lemon</span><span class="params">(Beverage beverage)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 装饰</span></span><br><span class="line">        <span class="keyword">return</span> beverage.getDesc() + <span class="string">&quot; 加柠檬&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mango</span> <span class="keyword">extends</span> <span class="title">Condiment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Beverage bevarage;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">Mango</span><span class="params">(Beverage bevarage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bevarage = bevarage;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bevarage.getDescription() + <span class="string">&quot;, 加芒果&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.cost() + <span class="number">3</span>; <span class="comment">// 加芒果需要 3 元</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 首先，我们需要一个基础饮料，红茶、绿茶或咖啡</span></span><br><span class="line">    Beverage beverage = <span class="keyword">new</span> GreenTea();</span><br><span class="line">      <span class="comment">// 开始装饰</span></span><br><span class="line">      beverage = <span class="keyword">new</span> Lemon(beverage); <span class="comment">// 先加一份柠檬</span></span><br><span class="line">      beverage = <span class="keyword">new</span> Mongo(beverage); <span class="comment">// 再加一份芒果</span></span><br><span class="line"></span><br><span class="line">      System.out.println(beverage.getDescription() + <span class="string">&quot; 价格：￥&quot;</span> + beverage.cost());</span><br><span class="line">      <span class="comment">//&quot;绿茶, 加柠檬, 加芒果 价格：￥16&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="decorator.jpg"></p>
<h2 id="JDK-2"><a href="#JDK-2" class="headerlink" title="JDK"></a>JDK</h2><ul>
<li><p>java.io.BufferedInputStream(InputStream)</p>
</li>
<li><p>java.util.Collections#checked<a href="https://github.com/CyC2018/CS-Notes/blob/master/docs/notes">List|Map|Set|SortedSet|SortedMap</a></p>
</li>
</ul>
<p><img src="decorator-3.png"></p>
<h1 id="5-外观模式（Facade-Pattern）"><a href="#5-外观模式（Facade-Pattern）" class="headerlink" title="5. 外观模式（Facade Pattern）"></a>5. 外观模式（Facade Pattern）</h1><p>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。</p>
<p><strong>意图：</strong>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>
<p>创建接口，和实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Circle draw&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Square::draw()&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建外观类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeMaker</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Shape circle;</span><br><span class="line">    <span class="keyword">private</span> Shape square;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">ShapeMaker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      circle = <span class="keyword">new</span> Circle();</span><br><span class="line">      square = <span class="keyword">new</span> Square();</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">()</span></span>&#123;</span><br><span class="line">      circle.draw();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSquare</span><span class="params">()</span></span>&#123;</span><br><span class="line">      square.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ShapeMaker shapeMaker = <span class="keyword">new</span> ShapeMaker();</span><br><span class="line"></span><br><span class="line">    shapeMaker.drawCircle();</span><br><span class="line">    shapeMaker.drawSquare();      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-组合模式（Composite-Pattern）"><a href="#6-组合模式（Composite-Pattern）" class="headerlink" title="6. 组合模式（Composite Pattern）"></a>6. 组合模式（Composite Pattern）</h1><p>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String dept;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Employee&gt; subordinates; <span class="comment">// 下属</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name,String dept, <span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">      <span class="keyword">this</span>.dept = dept;</span><br><span class="line">      <span class="keyword">this</span>.salary = sal;</span><br><span class="line">      subordinates = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Employee e)</span> </span>&#123;</span><br><span class="line">      subordinates.add(e);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Employee e)</span> </span>&#123;</span><br><span class="line">      subordinates.remove(e);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getSubordinates</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> subordinates;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="string">&quot;Employee :[ Name : &quot;</span> + name + <span class="string">&quot;, dept : &quot;</span> + dept + <span class="string">&quot;, salary :&quot;</span> + salary+<span class="string">&quot; ]&quot;</span>);</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JDK-3"><a href="#JDK-3" class="headerlink" title="JDK"></a>JDK</h2><ul>
<li>javax.swing.JComponent#add(Component)</li>
<li>java.awt.Container#add(Component)</li>
<li>java.util.Map#putAll(Map)</li>
<li>java.util.List#addAll(Collection)</li>
<li>java.util.Set#addAll(Collection)</li>
</ul>
<h1 id="7-享元模式"><a href="#7-享元模式" class="headerlink" title="7. 享元模式"></a>7. 享元模式</h1><h2 id="JDK-4"><a href="#JDK-4" class="headerlink" title="JDK"></a>JDK</h2><p>Java 利用缓存来加速大量小对象的访问时间。</p>
<ul>
<li>java.lang.Integer#valueOf(int)</li>
<li>java.lang.Boolean#valueOf(boolean)</li>
<li>java.lang.Byte#valueOf(byte)</li>
<li>java.lang.Character#valueOf(char)</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://www.javadoop.com/post/design-pattern">Javadoop - 设计模式也可以这么简单</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.md">CS-Notes - 设计模式</a></li>
<li><a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html">菜鸟教程 - 设计模式</a></li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Go语言学习记录-基础</title>
    <url>/2019/12/15/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>学习go语言的记录</p>
<a id="more"></a>

<p>[TOC]</p>
<h1 id="基本结构和数据类型"><a href="#基本结构和数据类型" class="headerlink" title="基本结构和数据类型"></a>基本结构和数据类型</h1><h2 id="基本结构和要素"><a href="#基本结构和要素" class="headerlink" title="基本结构和要素"></a>基本结构和要素</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>每个go文件都属于且仅属于一个包。在源文件中非注释的第一行指明这个文件属于哪个包，如：<code>package main</code>。</p>
<p>对包重命名</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> fm <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionName</span><span class="params">(param1 type1, param2 type2...)</span> 返回类型</span> &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 例如</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sum</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;<span class="comment">/**/</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">string</span>)</span></span></span><br></pre></td></tr></table></figure>

<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数可有返回类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FuncName</span><span class="params">(a typea, b typeb)</span> <span class="title">typeFunc</span></span></span><br><span class="line"><span class="comment">// 可有多个返回类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FuncName</span><span class="params">(a typea, b typeb)</span> <span class="params">(t1 type1, t2 type2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> var1, var2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="一般结构"><a href="#一般结构" class="headerlink" title="一般结构"></a>一般结构</h3><p>Go程序启动顺序：</p>
<ol>
<li>按顺序导入所有被 main 包引用的其它包，然后在每个包中执行如下流程</li>
<li>果该包又导入了其它的包，则从第一步开始递归执行，但是每个包只会被导入一次</li>
<li>然后以相反的顺序在每个包中初始化常量和变量，如果该包含有 init 函数的话，则调用该函数</li>
<li>在完成这一切之后，main 也执行同样的过程，最后调用 main 函数开始执行程序</li>
</ol>
<h3 id="输出-重要"><a href="#输出-重要" class="headerlink" title="输出 - 重要"></a>输出 - 重要</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">%s:</span><br><span class="line">%d:十进制数字</span><br><span class="line">%T: 类型</span><br><span class="line">%v: 结构体字段</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><a href="https://golang.org/pkg/fmt/">fmt.Printf</a></p>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>使用关键字<code>const</code>定义</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> identifier [<span class="keyword">type</span>] = value</span><br><span class="line"><span class="keyword">const</span> Pi = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示定义</span></span><br><span class="line"><span class="keyword">const</span> B <span class="keyword">string</span> = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="comment">// 隐式定义</span></span><br><span class="line"><span class="keyword">const</span> B = <span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure>

<p>数字型的常量是没有大小和符号的，并且可以使用任何精度而不会导致溢出</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Ln2 = <span class="number">0.693147180559945309417232121458</span></span><br><span class="line"><span class="keyword">const</span> Billion = <span class="number">1e9</span></span><br></pre></td></tr></table></figure>

<p>常量并行赋值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Monday, Tuesday, Wednesday, Thursday, Friday, Saturday = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	Monday, Tuesday, Wednesday = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">	Thursday, Friday, Saturday = <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span>(</span><br><span class="line">	a = <span class="literal">iota</span></span><br><span class="line">	b</span><br><span class="line">	c</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>第一个 <code>iota</code> 等于 0，每当 <code>iota</code> 在新的一行被使用时，它的值都会自动加 1；所以 <code>a=0, b=1, c=2</code></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>声明形式：var identifier type</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> startData <span class="keyword">int</span></span><br></pre></td></tr></table></figure>

<p>当你在函数体内声明局部变量时，应使用简短声明语法 <code>:=</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>并行赋值和交换</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a, b, c := <span class="number">3</span>, <span class="number">5</span>, <span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值交换</span></span><br><span class="line">a, b := <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure>



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a, b := <span class="number">9</span>, <span class="number">3</span></span><br><span class="line">	sum, sub := SumAndSub(a, b)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;res is : %d, %d&quot;</span>, sum, sub)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SumAndSub</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a + b, a - b</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="init函数"><a href="#init函数" class="headerlink" title="init函数"></a>init函数</h3><h2 id="字符串和日期"><a href="#字符串和日期" class="headerlink" title="字符串和日期"></a>字符串和日期</h2><p>默认使用UTF-8</p>
<p>两个字符串 <code>s1</code> 和 <code>s2</code> 可以通过 <code>s := s1 + s2</code> 拼接在一起</p>
<p>拼接的简写形式 <code>+=</code> 也可以用于字符串：</p>
<h3 id="strings和strconv"><a href="#strings和strconv" class="headerlink" title="strings和strconv"></a>strings和strconv</h3><h3 id="时间和日期"><a href="#时间和日期" class="headerlink" title="时间和日期"></a>时间和日期</h3><p>使用 time.Now()获取当前时间</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	t := time.Now()</span><br><span class="line">	fmt.Println(t)</span><br><span class="line">    </span><br><span class="line">	<span class="comment">// 2019-11-17</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%4d-%02d-%02d&quot;</span>, t.Year(), t.Month(), t.Day())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> condition1 &#123;</span><br><span class="line">	<span class="comment">// do something	</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> condition2 &#123;</span><br><span class="line">	<span class="comment">// do something else	</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="comment">// catch-all or default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在if中赋值。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> val := <span class="number">10</span>; val &gt; max &#123;</span><br><span class="line">	<span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">	<span class="keyword">case</span> val1:</span><br><span class="line">		...</span><br><span class="line">	<span class="keyword">case</span> val2:</span><br><span class="line">		...</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>变量 var1 可以是任何类型，而 val1 和 val2 则可以是同类型的任意值。类型不被局限于常量或整数，但必须是相同的类型.</p>
<p>如果在执行完每个分支的代码后，还希望继续执行后续分支的代码，可以使用 <code>fallthrough</code> 关键字来达到目的。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> i &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">fallthrough</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		f() <span class="comment">// 当 i == 0 时函数也会被调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可选的 <strong><code>default</code></strong> 分支可以出现在任何顺序，但最好将它放在最后。它的作用类似与 <code>if-else</code> 语句中的 <code>else</code>，表示不符合任何已给出条件时，执行相关语句。</p>
<p>初始赋值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> result := calculate() &#123;</span><br><span class="line">	<span class="keyword">case</span> result &lt; <span class="number">0</span>:</span><br><span class="line">		...</span><br><span class="line">	<span class="keyword">case</span> result &gt; <span class="number">0</span>:</span><br><span class="line">		...</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">for 初始化语句; 条件语句; 修饰语句 &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>同时使用多个计数器</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, N; i &lt; j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for-range结构"><a href="#for-range结构" class="headerlink" title="for-range结构"></a>for-range结构</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	str := <span class="string">&quot;Go is a beautiful language!&quot;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;The length of str is: %d\n&quot;</span>, <span class="built_in">len</span>(str))</span><br><span class="line">	<span class="keyword">for</span> pos, char := <span class="keyword">range</span> str &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Character on position %d is: %c \n&quot;</span>, pos, char)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h1><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fucn 函数名(参数) (返回值)&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>三中类型：</p>
<ul>
<li>普通带有名字函数</li>
<li>匿名函数或lambda函数</li>
<li>方法</li>
</ul>
<h2 id="函数参数与返回值"><a href="#函数参数与返回值" class="headerlink" title="函数参数与返回值"></a>函数参数与返回值</h2><p>基本类型是按值传递。切片（slice）、字典（map）、接口（interface）、通道（channel）这样的引用类型都是默认使用引用传递（即使没有显式的指出指针）</p>
<h3 id="返回值有无命名"><a href="#返回值有无命名" class="headerlink" title="返回值有无命名"></a>返回值有无命名</h3><p>返回值有命名和无命名</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getX2AndX3</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span> * x, <span class="number">3</span> * x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getX2AndX3_2</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="params">(x2, x3 <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	x2 = <span class="number">2</span> * x</span><br><span class="line">	x3 = <span class="number">3</span> * x</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>尽量使用命名返回值：会使代码更清晰、更简短，同时更加容易读懂。</strong></p>
<h3 id="空白符"><a href="#空白符" class="headerlink" title="空白符"></a>空白符</h3><p><code>ThreeValues</code> 是拥有三个返回值的不需要任何参数的函数，在下面的例子中，我们将第一个与第三个返回值赋给了 <code>i1</code> 与 <code>f1</code>。第二个返回值赋给了空白符 <code>_</code>，然后自动丢弃掉。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> i1 <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">var</span> i2 <span class="keyword">float32</span></span><br><span class="line">	i1, _, i2 = ThreeValues()</span><br><span class="line">	fmt.Printf(<span class="string">&quot;int: %d , float32: %f \n&quot;</span>, i1, i2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ThreeValues</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">float32</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">5</span>, <span class="number">6</span>, <span class="number">7.9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="变长参数"><a href="#变长参数" class="headerlink" title="变长参数"></a>变长参数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFunc</span><span class="params">(a, b, arg ...<span class="keyword">int</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>如果参数被存储在一个 slice 类型的变量 <code>slice</code> 中，则可以通过 <code>slice...</code> 的形式来传递参数，调用变参函数。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	x := min(<span class="number">5</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;min is %d \n&quot;</span>, x)</span><br><span class="line">    <span class="comment">// 如果参数被存储在一个 slice 类型的变量 slice 中，则可以通过 slice... 的形式来传递参数，调用变参函数。</span></span><br><span class="line">	slice := []<span class="keyword">int</span>&#123;<span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>&#125;</span><br><span class="line">	x = min(slice...)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;min is %d \n&quot;</span>, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(s ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	min := s[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">for</span> _, value := <span class="keyword">range</span> s &#123;</span><br><span class="line">		<span class="keyword">if</span> value &lt; min &#123;</span><br><span class="line">			min = value</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> min</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>函数作为返回值需要使用匿名函数。 匿名函数没有函数名。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(参数)</span><span class="params">(返回值)</span></span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将匿名函数保存到变量</span></span><br><span class="line">sayHello := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用匿名函数</span></span><br><span class="line">sayHello()</span><br><span class="line"></span><br><span class="line">add := <span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(x + y)</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在匿名函数后加上() 定义并执行</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">println</span>(<span class="string">&quot;Hello runing&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(x + y)</span><br><span class="line">&#125;(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包之前的概念</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个函数，函数名为a()，返回类型为 func</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 返回匿名函数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="built_in">println</span>(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	res := a()</span><br><span class="line">	<span class="comment">// 相当于执行a函数内部的匿名函数</span></span><br><span class="line">	res()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>闭包</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个函数，函数名为a()，返回类型为 func</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">	name := <span class="string">&quot;Chandler&quot;</span></span><br><span class="line">	<span class="comment">// 返回匿名函数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Hello&quot;</span>, name)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 闭包 = 函数 + 外层变量的引用</span></span><br><span class="line">	<span class="comment">// res此时就是一个闭包</span></span><br><span class="line">	res := a()</span><br><span class="line">	<span class="comment">// 相当于执行a函数内部的匿名函数</span></span><br><span class="line">	res()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将上面更改一种常见的闭包形式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明一个函数，函数名为a()，返回类型为 func</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 返回匿名函数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Hello&quot;</span>, name)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 闭包 = 函数 + 外层变量的引用</span></span><br><span class="line">	<span class="comment">// res此时就是一个闭包</span></span><br><span class="line">	res := a(<span class="string">&quot;Ross&quot;</span>)</span><br><span class="line">	<span class="comment">// 相当于执行a函数内部的匿名函数</span></span><br><span class="line">	res()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>闭包示例。使用闭包做文件后缀检测。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回类型为func(string) string</span></span><br><span class="line"><span class="comment">// 返回一个匿名函数，该匿名函数的返回类型为string</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSuffix</span><span class="params">(suffix <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">		<span class="comment">// suffix是外层函数定义的变量</span></span><br><span class="line">		<span class="keyword">if</span> !strings.HasSuffix(name, suffix) &#123;</span><br><span class="line">			<span class="keyword">return</span> name + suffix</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> name</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 闭包 = 函数 + 外层变量引用</span></span><br><span class="line">	<span class="comment">// jpgSuff包含了外层 suffix的引用</span></span><br><span class="line">	jpgSuff := makeSuffix(<span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">	gifSuff := makeSuffix(<span class="string">&quot;.gif&quot;</span>)</span><br><span class="line">	fmt.Println(jpgSuff(<span class="string">&quot;demo&quot;</span>)) <span class="comment">//demo.jpg</span></span><br><span class="line">	fmt.Println(gifSuff(<span class="string">&quot;demo&quot;</span>)) <span class="comment">//demo.gif</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calc</span><span class="params">(base <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">func</span>(<span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span>)</span> &#123;</span><br><span class="line">	add := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		base += i</span><br><span class="line">		<span class="keyword">return</span> base</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	sub := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">		base -= i</span><br><span class="line">		<span class="keyword">return</span> base</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> add, sub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	x, y := calc(<span class="number">100</span>)</span><br><span class="line">	res1 := x(<span class="number">50</span>)     <span class="comment">// base = 100 + 50</span></span><br><span class="line">	fmt.Println(res1) <span class="comment">// 150</span></span><br><span class="line">	res2 := y(<span class="number">50</span>)     <span class="comment">// base = 150- 50</span></span><br><span class="line">	fmt.Println(res2) <span class="comment">// 100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>判断是不是闭包看他有没有引用外层函数变量。</strong></p>
<h1 id="数组和切片"><a href="#数组和切片" class="headerlink" title="数组和切片"></a>数组和切片</h1><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr [<span class="number">6</span>]<span class="keyword">int</span> <span class="comment">//[5]int</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">new</span>([<span class="number">5</span>]<span class="keyword">int</span>) <span class="comment">//*[5]int</span></span><br></pre></td></tr></table></figure>

<p>第一种变化</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">31</span>&#125;</span><br></pre></td></tr></table></figure>

<p>第二种</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [...]<span class="keyword">int</span>&#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure>

<p>第三种</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>]<span class="keyword">string</span>&#123;<span class="number">3</span>: <span class="string">&quot;Chris&quot;</span>, <span class="number">4</span>: <span class="string">&quot;Ron&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>只有索引 3 和 4 被赋予实际的值，其他元素都被设置为空的字符串，所以输出结果为</p>
<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片（slice）是对数组一个连续片段的引用（该数组我们称之为相关数组，通常是匿名的），所以切片是一个引用类型。类似Python 中的 list 类型。</p>
<p>切片是一个 <strong>长度可变的数组</strong>。<strong>优点</strong> 因为切片是引用，所以它们不需要使用额外的内存并且比使用数组更有效率，所以在 Go 代码中 切片比数组更常用。</p>
<p>定义和声明</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不需要说明长度。切片在未初始化之前默认为 nil，长度为 0</span></span><br><span class="line"><span class="keyword">var</span> identifier []<span class="keyword">type</span></span><br><span class="line"><span class="comment">// 声明切片</span></span><br><span class="line"><span class="keyword">var</span> slice1 []<span class="keyword">type</span> = arr[start:end]</span><br><span class="line"><span class="comment">// 定义</span></span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">3</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">a := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于数组定义</span></span><br><span class="line">slice1 := </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="基于数组定义"><a href="#基于数组定义" class="headerlink" title="基于数组定义"></a>基于数组定义</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>&#125;</span><br><span class="line">b := arr[<span class="number">1</span>:<span class="number">4</span>]</span><br></pre></td></tr></table></figure>



<p><code>var slice1 []type = arr1[:]</code> 那么 slice1 就等于完整的 arr1 数组。或者``slice1 = &amp;arr1`</p>
<h3 id="切片传递给函数"><a href="#切片传递给函数" class="headerlink" title="切片传递给函数"></a>切片传递给函数</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> arr = []<span class="keyword">int</span>&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">	fmt.Println(sum(arr))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(a []<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	s := <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>;i &lt; <span class="built_in">len</span>(a); i++ &#123;</span><br><span class="line">		s += i</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="用make创建切片"><a href="#用make创建切片" class="headerlink" title="用make创建切片"></a>用make创建切片</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span>([]<span class="keyword">type</span>, size, <span class="built_in">cap</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>type：切片元素类型</li>
<li>size：切片中元素数量</li>
<li>cap：切片容量</li>
</ul>
<p>len()返回size即元素数量。cap()返回容量</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> slice1 []<span class="keyword">type</span> = <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br></pre></td></tr></table></figure>

<h3 id="切片本质"><a href="#切片本质" class="headerlink" title="切片本质"></a>切片本质</h3><p>切片的本质就是对底层数组的封装，它包含了三个信息：底层数组的指针、切片的长度（len）和切片的容量（cap）。</p>
<p>不能直接比较，只能和nil比较。判断是否为空使用len(slice) == 0</p>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>定义语法：<code>map[keyType] valueType</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	score := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>, <span class="number">8</span>)</span><br><span class="line">	score[<span class="string">&quot;a&quot;</span>] = <span class="number">90</span></span><br><span class="line">	score[<span class="string">&quot;b&quot;</span>] = <span class="number">80</span></span><br><span class="line">	fmt.Print(score, <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	fmt.Print(score[<span class="string">&quot;a&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义时填充</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	info := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="string">&quot;username&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">		<span class="string">&quot;password&quot;</span>: <span class="string">&quot;1123&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(info)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>常用方法</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	info := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">		<span class="string">&quot;pwd&quot;</span>: <span class="string">&quot;1123&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(info)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断键是否存在</span></span><br><span class="line">	<span class="keyword">if</span> value, ok := info[<span class="string">&quot;name&quot;</span>]; ok &#123;</span><br><span class="line">		fmt.Println(value)</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;no user&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// for range 遍历</span></span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> info &#123;</span><br><span class="line">		fmt.Println(k, <span class="string">&quot;:&quot;</span>, v)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>统计一段句子中每个单词出现的次数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	str := <span class="string">&quot;how do you do&quot;</span></span><br><span class="line">	sp := strings.Split(str, <span class="string">&quot; &quot;</span>)</span><br><span class="line">	word := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>] <span class="keyword">int</span>, <span class="built_in">len</span>(sp))</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _,i := <span class="keyword">range</span> sp&#123;</span><br><span class="line">		<span class="keyword">if</span> _, ok := word[i]; ok &#123;</span><br><span class="line">			word[i] += <span class="number">1</span></span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			word[i] = <span class="number">1</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(word)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>map的排序</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="类型别名与自定义"><a href="#类型别名与自定义" class="headerlink" title="类型别名与自定义"></a>类型别名与自定义</h2><p>类型定义</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义类型是定义了一个全新的类型</span></span><br><span class="line"><span class="keyword">type</span> NewInt <span class="keyword">int</span></span><br><span class="line"><span class="comment">// 最后类型是 main.NewInt</span></span><br></pre></td></tr></table></figure>

<p>类型别名</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInt = <span class="keyword">int</span></span><br><span class="line"><span class="comment">// 最后类型是 int</span></span><br></pre></td></tr></table></figure>

<h2 id="结构体-1"><a href="#结构体-1" class="headerlink" title="结构体"></a>结构体</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type 结构体实例 结构体类型</span><br></pre></td></tr></table></figure>



<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span> &#123;</span><br><span class="line">	name, city <span class="keyword">string</span></span><br><span class="line">	age        <span class="keyword">int8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 实例化</span></span><br><span class="line">	<span class="keyword">var</span> Jon person</span><br><span class="line">	Jon.name = <span class="string">&quot;Jon Snow&quot;</span></span><br><span class="line">	Jon.age = <span class="number">25</span></span><br><span class="line">	Jon.city = <span class="string">&quot;WinterFell&quot;</span></span><br><span class="line">	fmt.Println(Jon)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Jon&#x27;s name is %s&quot;</span>, Jon.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>匿名结构体</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> user <span class="keyword">struct</span>&#123;name <span class="keyword">string</span>; age <span class="keyword">int</span>&#125;</span><br><span class="line">	user.name = <span class="string">&quot;Rec&quot;</span></span><br><span class="line">	user.age = <span class="number">29</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%#v \n&quot;</span>, user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ol>
<li>使用键值对初始化</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 实例化</span></span><br><span class="line">	user := person&#123;</span><br><span class="line">		name: <span class="string">&quot;Kitty&quot;</span>,</span><br><span class="line">		city: <span class="string">&quot;New York&quot;</span>,</span><br><span class="line">		age:  <span class="number">29</span>,</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">// user is main.person&#123;name:&quot;Kitty&quot;, city:&quot;New York&quot;, age:29&#125;</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;user is %#v&quot;</span>, user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>按照顺序提供初始化值。</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := person&#123;<span class="string">&quot;Kitty&quot;</span>, <span class="string">&quot;New York&quot;</span>, <span class="number">19</span>&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意：必须初始化所有字段。填充顺序必须和声明顺序相同。不能和键值对声明混用</p>
<ol>
<li>使用 <strong>new</strong>， 分配指针 </li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user是一个结构体指针。支持直接使用 . 访问结构体成员</span></span><br><span class="line"><span class="keyword">var</span> user = <span class="built_in">new</span>(person)</span><br><span class="line">user.name = <span class="string">&quot;Ross&quot;</span></span><br><span class="line">user.city = <span class="string">&quot;New York&quot;</span></span><br><span class="line">user.age = <span class="number">19</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li>取结构体地址实例化。相当于进行了一次new 操作</li>
</ol>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">user := &amp;person&#123;&#125;</span><br><span class="line">user.name = <span class="string">&quot;Ross&quot;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>



<p><strong>构造函数</strong></p>
<p>该构造函数返回的是结构体指针类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPerson</span><span class="params">(name, city <span class="keyword">string</span>, age <span class="keyword">int</span>)</span> *<span class="title">person</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;person&#123;</span><br><span class="line">		name: name,</span><br><span class="line">		city: city,</span><br><span class="line">		age:  age,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	Ross := newPerson(<span class="string">&quot;Ross&quot;</span>, <span class="string">&quot;New York&quot;</span>, <span class="number">28</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%#v&quot;</span>, Ross)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法和接受者"><a href="#方法和接受者" class="headerlink" title="方法和接受者"></a>方法和接受者</h2><p><strong>方法</strong>是一种作用于特定类型变量的函数。叫做<strong>接收者</strong>，类似Java的<strong>this</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(接收者变量 接收者类型)</span> 方法名<span class="params">(参数列表)</span> <span class="params">(返回列表)</span></span>&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接收者变量：建议使用接收者类型的第一个小写字母，例如Person类型应该是p</li>
<li>接收者类型：类似参数，可以使指针类型和非指针类型</li>
</ul>
<p><strong>方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newPerson</span><span class="params">(name, city <span class="keyword">string</span>, age <span class="keyword">int</span>)</span> *<span class="title">person</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> &amp;person&#123;</span><br><span class="line">		name: name,</span><br><span class="line">		city: city,</span><br><span class="line">		age:  age,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p person)</span> <span class="title">Dream</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s没有梦想！\n&quot;</span>, p.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	Ross := newPerson(<span class="string">&quot;Ross&quot;</span>, <span class="string">&quot;New York&quot;</span>, <span class="number">28</span>)</span><br><span class="line">	Ross.Dream()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>匿名字段</strong></p>
<p>结构体允许其成员字段在声明时没有字段名而只有类型，匿名字段默认采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。</p>
<h2 id="嵌套结构体"><a href="#嵌套结构体" class="headerlink" title="嵌套结构体"></a>嵌套结构体</h2><p>一个结构体中可以嵌套包含另一个结构体或结构体指针。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">	Province <span class="keyword">string</span></span><br><span class="line">	City     <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Name    <span class="keyword">string</span></span><br><span class="line">	Age     <span class="keyword">int8</span></span><br><span class="line">	Address Address</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	user := User&#123;</span><br><span class="line">		Name: <span class="string">&quot;Joey&quot;</span>,</span><br><span class="line">		Age:  <span class="number">27</span>,</span><br><span class="line">		Address: Address&#123;</span><br><span class="line">			Province: <span class="string">&quot;江苏&quot;</span>,</span><br><span class="line">			City:     <span class="string">&quot;南京&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;user = %#v \n&quot;</span>, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Animal)</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s 能动 \n&quot;</span>, a.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">	Feet <span class="keyword">int8</span></span><br><span class="line">	<span class="comment">// 通过嵌套匿名结构体实现继承</span></span><br><span class="line">	*Animal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *Dog)</span> <span class="title">wang</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s 汪汪叫 \n&quot;</span>, d.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	d := Dog&#123;</span><br><span class="line">		Feet: <span class="number">5</span>,</span><br><span class="line">		Animal: &amp;Animal&#123;</span><br><span class="line">			name: <span class="string">&quot;旺财&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	d.move()</span><br><span class="line">	d.wang()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）。</strong></p>
<h2 id="结构体与JSON"><a href="#结构体与JSON" class="headerlink" title="结构体与JSON"></a>结构体与JSON</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">	ID   <span class="keyword">int</span></span><br><span class="line">	Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Class <span class="keyword">struct</span> &#123;</span><br><span class="line">	Title    <span class="keyword">string</span></span><br><span class="line">	Students []*Student</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c := &amp;Class&#123;</span><br><span class="line">		Title:    <span class="string">&quot;2016&quot;</span>,</span><br><span class="line">		Students: <span class="built_in">make</span>([]*Student, <span class="number">0</span>, <span class="number">20</span>),</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="comment">// 生成单个student</span></span><br><span class="line">		stu := &amp;Student&#123;</span><br><span class="line">			Name: fmt.Sprintf(<span class="string">&quot;stu%02d&quot;</span>, i),</span><br><span class="line">			ID:   i,</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 将生成的student添加到c.Students</span></span><br><span class="line">		c.Students = <span class="built_in">append</span>(c.Students, stu)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// JSON序列化，结构体 --&gt; JSON格式字符串</span></span><br><span class="line">	data, err := json.Marshal(c)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;json marshal failed&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;json: %s \n&quot;</span>, data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p><strong>接口是一种类型，抽象的类型。</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> 接口类型名 <span class="keyword">interface</span>&#123;</span><br><span class="line">    方法名<span class="number">1</span> (参数列表<span class="number">1</span>) 返回值列表<span class="number">1</span></span><br><span class="line">    方法名<span class="number">2</span> (参数列表<span class="number">2</span>) 返回值列表<span class="number">2</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口名：使用<code>type</code>将接口定义为自定义的类型名。Go语言的接口在命名时，一般会在单词后面添加<code>er</code></p>
<p>一个对象只要全部实现了接口中的方法，那么就实现了这个接口。换句话说，接口就是一个<strong>需要实现的方法列表</strong>。</p>
<p>定义<strong>Sayer</strong>接口</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义Sayer接口</span></span><br><span class="line"><span class="keyword">type</span> Sayer <span class="keyword">interface</span> &#123;</span><br><span class="line">	say()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义cat和dog两个结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> cat <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给<code>dog</code>和<code>cat </code>分别实现<code>say</code>方法就可以实现<code>Sayer</code>接口</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d dog)</span> <span class="title">say</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;汪汪汪&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c cat)</span> <span class="title">say</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;喵喵喵&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口类型变量能够存储所有实现了该接口的实例。如下，Sayer类型的变量能存储cat和dog类型的变量</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 声明Sayer类型的变量x</span></span><br><span class="line">	<span class="keyword">var</span> s Sayer</span><br><span class="line">	<span class="comment">// 实例化一个cat和dog</span></span><br><span class="line">	a := cat&#123;&#125;</span><br><span class="line">	b := dog&#123;&#125;</span><br><span class="line">	<span class="comment">// cat实例直接赋值给s</span></span><br><span class="line">	s = a</span><br><span class="line">	s.say()</span><br><span class="line">	s = b</span><br><span class="line">	s.say()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="接口嵌套"><a href="#接口嵌套" class="headerlink" title="接口嵌套"></a>接口嵌套</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Mover <span class="keyword">interface</span> &#123;</span><br><span class="line">	move()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Sayer <span class="keyword">interface</span> &#123;</span><br><span class="line">	say()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> animal <span class="keyword">interface</span> &#123;</span><br><span class="line">	Mover</span><br><span class="line">	Sayer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> cat <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c cat)</span> <span class="title">move</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s会动\n&quot;</span>, c.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c cat)</span> <span class="title">say</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s喵喵叫\n&quot;</span>, c.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="空接口"><a href="#空接口" class="headerlink" title="空接口"></a>空接口</h2><p>没有定义任何方法的接口。任何类型都实现了空接口。空接口类型变量可以存储任意类型的变量</p>
<p><strong>空接口作为函数的参数</strong>。接受任意类型的参数函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">(a <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;type:%T, value: %v\n&quot;</span>, a, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>空接口作为map的值</strong>。保存任意值</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> studentInfo = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">studentInfo[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;Joey&quot;</span></span><br><span class="line">studentInfo[<span class="string">&quot;age&quot;</span>] = <span class="number">27</span></span><br><span class="line">studentInfo[<span class="string">&quot;married&quot;</span>] = <span class="literal">false</span></span><br><span class="line">fmt.Println(studentInfo)</span><br></pre></td></tr></table></figure>

<p><strong>类型断言</strong></p>
<p>一个接口的值是由<strong>一个具体类型</strong>和<strong>具体类型的值</strong>两部分组成。分别称为接口的动态类型和动态值</p>
<p>判断空接口中的值这个时候就可以使用类型断言，其语法格式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">x.(T)</span><br></pre></td></tr></table></figure>

<ul>
<li>x：表示类型为**interface{}**的变量</li>
<li>T：表示断言x可能是的类型</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">justifyType</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> v := x.(<span class="keyword">type</span>) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="keyword">string</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;x is a string, value is %v\n&quot;</span>, v)</span><br><span class="line">	<span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;x is a int, value is %v\n&quot;</span>, v)</span><br><span class="line">	<span class="keyword">case</span> <span class="keyword">bool</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;x is a bool, value is %v\n&quot;</span>, v)</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		fmt.Println(<span class="string">&quot;unknown type&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当有两个或两个以上的具体类型必须以相同的方式进行处理时才需要定义接口。不要为了接口而写接口，那样只会增加不必要的抽象，导致不必要的运行时损耗。</p>
<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="reflect包"><a href="#reflect包" class="headerlink" title="reflect包"></a>reflect包</h2><p>任意接口值在反射中都可以理解为由<code>reflect.Type</code>和<code>reflect.Value</code>两部分组成，并且reflect包提供了<code>reflect.TypeOf</code>和<code>reflect.ValueOf</code>两个函数来获取任意对象的Value和Type。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reflectType</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	v := reflect.TypeOf(x)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;type: %v \n&quot;</span>, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





























]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap源码解析</title>
    <url>/2019/04/04/HashMap%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>基于JDK1.8分析HashMap的底层实现。</p>
<a id="more"></a>

<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>HashMap线程不安全，允许key为null，value为null，遍历无序。</p>
<p>其底层实现有三种数据结构：数组，链表，红黑树。在JDK8中，一个桶存储的链表结构大于8时会转化为红黑树，在红黑树中查找时间复杂度为O(logn)。</p>
<p>数组用来存储键值对，每一个键值对别成为<strong>Entry</strong>，这是HashMap的主干。其中的米一个元素初始值都为null。</p>
<p><img src="2.png"></p>
<h2 id="链表节点Node"><a href="#链表节点Node" class="headerlink" title="链表节点Node"></a>链表节点Node</h2><p>Java8中使用Node替代7中的Entry，适用于链表。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 每一个节点的hashCode由key的hashcode和value的hashCode得到</span></span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        V oldValue = value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 重写equals</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>链表中的每一个节点的hashCode由key的hashcode和value的hashCode得到。</p>
<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认capacity，table的容量大小，默认16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">// 默认装载因子，table能够使用的比例</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// size 的临界值，当 size 大于等于 threshold 就必须进行扩容操作。</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哈希桶</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认构造函数，指定loadFactor为默认0.75f</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定初始容量的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定初始容量和装载因子的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 边界处理</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="comment">// 初始容量不能大于2的30次方</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="comment">// 装载因子的边界处理</span></span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建hash表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 指定加载因子为默认0.75f</span></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重要参数："><a href="#重要参数：" class="headerlink" title="重要参数："></a>重要参数：</h3><ul>
<li>capacity：table 容量大小，默认为16，且必须为2的n次方</li>
<li>size：键值对数量</li>
<li>threshold（阈值）：size临界值，size大于等于threshold时需要进行扩容</li>
<li>loadfactor：装载因子，threshold = capacity * loadfactor</li>
</ul>
<p>增大负载因子可以减少 Hash 表（就是那个 Entry 数组）所占用的内存空间，但会增加查询数据的时间开销，而查询是最频繁的的操作（HashMap 的 get() 与 put() 方法都要用到查询）；减小负载因子会提高数据查询的性能，但会增加 Hash 表所占用的内存空间。</p>
<p>由于在计算中位运算比取模运算效率高的多，所以 HashMap 规定数组的长度为 <code>2^n</code> 。这样用 <code>2^n - 1</code> 做位运算与取模效果一致，并且效率还要高出许多。</p>
<h3 id="tableSizeFor，计算数组容量"><a href="#tableSizeFor，计算数组容量" class="headerlink" title="tableSizeFor，计算数组容量"></a>tableSizeFor，计算数组容量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     根据期望容量，返回2的n次方实，数组实际容量 length</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//经过下面的 或 和位移 运算， n最终各位都是1。</span></span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="comment">// 判断n是否越界，小于0赋值1，大于最大容量设为最大容量</span></span><br><span class="line">    <span class="comment">// 返回 2的n次方作为 table（哈希桶）的阈值</span></span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="putMapEntries"><a href="#putMapEntries" class="headerlink" title="putMapEntries()"></a>putMapEntries()</h3><p>将另一个Map的所有元素加入表中，参数evict初始化时为false，其他情况为true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = m.size();</span><br><span class="line">    <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">            <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">            <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                     (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">            <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                threshold = tableSizeFor(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="put操作"><a href="#put操作" class="headerlink" title="put操作"></a>put操作</h2><h3 id="put"><a href="#put" class="headerlink" title="put()"></a>put()</h3><p>往哈希表里插入一个节点的<code>putVal</code>函数,如果参数<code>onlyIfAbsent</code>是true，那么不会覆盖相同key的值value。如果<code>evict</code>是false。那么表示是在初始化时调用的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// onlyIfAbsent为true时，只有不存在key是进行put操作</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// tab当前hash桶，p临时链表节点</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="comment">// 第一次放入值，table为空，执行初始化resize()</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 扩容hash表，并将长度赋给n</span></span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// 当前节index节点为空，没有hash冲突，直接构建新节点，挂载在index处</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 发生了hash冲突</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 如果该index处的第一个数据与插入数据hash相同，key也相等，当前节点赋值给e</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// p节点是红黑树的节点，调用红黑树的插入</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不是覆盖操作</span></span><br><span class="line">            <span class="comment">// 遍历链表</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 遍历到尾部，添加新节点（Java 7是插入到链表前面）</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 添加新节点后链表长度大于8，转化为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 找到了要覆盖的节点</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// e不为空，存在旧值的key与要插入的key相等 执行覆盖，返回旧值</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="comment">// 覆盖节点，返回oldva</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 以上完成插入新节点的操作</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 判断size是否大于临界值，执行resize操作</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>桶下标 index=(n - 1) &amp; hash</li>
</ul>
<p>HashMap不是在new时申请空间，而是在第一次put时申请空间。没有发生hash冲突，直接构建新节点挂在到index处。</p>
<p>概述：执行put操作时，如果是第一次put，执行resize() 方法；根据key计算hash，hash &amp; (n - 1) 得到在数组中的index位置，如果index位置为空，创建Node节点，挂载在index位置处；index不为空，发生了hash冲突，此时判断index处的第一个节点的key与hash与放入的key与hash是否相等，相等执行覆盖。如果第一个节点是红黑树节点，调用红黑树插入方法，否则是链表节点。遍历链表节点，将要存的节点插入到链表最后，如果存在相等的key，执行覆盖。插入完成后，判断size是否大于临界值，大于则执行resize();</p>
<p>在JDK8中，插入链表是插在链表最后，即尾插入，而JDK7中是头插入。头插入的一个缺点是在并发情况下插入扩容可能出现链表环发生死循环。</p>
<h3 id="hash"><a href="#hash" class="headerlink" title="hash()"></a>hash()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HashMap允许key为null，key为null，hash为0，下标为0</p>
<p>根据key取hash值，扰动函数，使hash均衡，减少hash碰撞的几率。它会综合hash值高位和低位的特征，并存放在低位，因此在与运算时，相当于高低位一起参与了运算，以减少hash碰撞的概率。</p>
<p>JDK8中简化操作。</p>
<h3 id="resize-重点"><a href="#resize-重点" class="headerlink" title="resize() 重点"></a>resize() 重点</h3><p><strong>初始化或加倍哈希桶大小。如果是当前哈希桶是null,分配符合当前阈值的初始容量目标。否则，扩容成以前的两倍。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">	<span class="comment">// 当前表的哈希桶</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 当前桶容量大于0</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 大于最大容量</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            <span class="comment">// 将临界值设为最大</span></span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="comment">// 返回当前哈希桶，不再扩容</span></span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如过当前容量的两倍小于最大容量并且当前容量大于默认容量</span></span><br><span class="line">        <span class="comment">// 新容量为当前容量的两倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            <span class="comment">// 新的临界值也为当前的两倍</span></span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// //如果当前表是空的，但是有阈值。代表是初始化时指定了容量、阈值的情况</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;               </span><br><span class="line">        <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">        <span class="comment">// 容量为0，代表第一次执行put操作，需要初始化</span></span><br><span class="line">        <span class="comment">// 容量和临界值都初始化为默认值</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果新的阈值是0，对应的是  当前表是空的，但是有阈值的情况</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        <span class="comment">//进行越界修复</span></span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">// 当前哈希桶不为空</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="comment">// 当前节点有元素，值赋给e</span></span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 置空，便于GC</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">//当前链表就一个元素，没有发生hash冲突</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="comment">// 直接将元素放在新的桶里</span></span><br><span class="line">                    <span class="comment">// 这里去下标 当前节点的hash 与 桶的长度减一</span></span><br><span class="line">                    <span class="comment">// 桶的长度是2的n次方，这样就是取模</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">// 发生过hash碰撞且节点是红黑树节点</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="comment">// 没有放生哈希碰撞，节点小于8，依次放入新的哈希桶对应位置</span></span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                    <span class="comment">//因为扩容是容量翻倍，所以原链表上的每个节点，现在可能存放在原来的下标，即low位， </span></span><br><span class="line">                    <span class="comment">// 或者扩容后的下标，即high位。 high位=  low位+原哈希桶容量</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">//这里又是一个利用位运算 代替常规运算的高效点： </span></span><br><span class="line">                        <span class="comment">// 利用哈希值 与 旧的容量，可以得到哈希值去模后，是大于等于oldCap还是小于oldCap，</span></span><br><span class="line">                        <span class="comment">// 等于0代表小于oldCap，应该存放在低位，否则存放在高位</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 高位相同的逻辑</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 低位链表存在源index处</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 高位存在新index</span></span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>HashMap中用到了许多位运算，更高效</li>
<li>扩容时，将旧的数组中引用置null，便于GC</li>
<li>取下标 是用 <strong>哈希值 与运算 （桶的长度-1）</strong> <code>i = (n - 1) &amp; hash</code>。 由于桶的长度是2的n次方，这么做其实是等于 一个<strong>模运算</strong>。但是<strong>效率更高</strong></li>
<li>因为扩容是容量翻倍，所以原链表上的每个节点，现在可能存放在原来的下标，即low位， 或者扩容后的下标，即high位。 high位= low位+原哈希桶容量</li>
</ul>
<p>resize是很费时间的操作，因此最好在HashMap初始化时指定大小，尽量减少调用resize方法。</p>
<p><img src="hashmap1.jpg"></p>
<h2 id="get操作"><a href="#get操作" class="headerlink" title="get操作"></a>get操作</h2><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入扰动后的hash 和 key查找</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="comment">// 哈希表不为空，根据hash计算下标，该下标有节点的话</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果链表头结点就是要查找的节点，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// 链表头结点的下一个节点不为空</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 是红黑树树节点，使用红黑树的查找</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="comment">// 是链表，遍历链表</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有找到，返回null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>计算key 的hash，根据hash计算index，hash &amp; (len - 1)</li>
<li>判断数组该位置第一个原始是否恰好为要找的</li>
<li>判断第一个节点元素类型是否为TreeNode，是用红黑树方法取数据，不是继续</li>
<li>便利链表，找到相等的key</li>
</ol>
<p>以上在O(1)的时间里查找执行完</p>
<h2 id="7与8的一些不同"><a href="#7与8的一些不同" class="headerlink" title="7与8的一些不同"></a>7与8的一些不同</h2><ul>
<li>7是数组+链表的结构；8是数组+链表+红黑树，链表长度大于8转化为红黑树</li>
<li>插入时7是头插法；8是尾插法。一种原因是防止形成链表环</li>
<li>7是先计算size后插入；8是先插入后计算</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/docs/notes/Java%20%E5%AE%B9%E5%99%A8.md#hashmap">CS-Notes-HashMap</a></li>
<li><a href="https://juejin.im/post/599652796fb9a0249975a318">掘金-面试必备：HashMap源码解析（JDK8）</a></li>
<li><a href="https://www.javadoop.com/post/hashmap">Javadoop - Java7/8 中的 HashMap 和 ConcurrentHashMap 全解析</a></li>
<li><a href="https://juejin.im/post/5ba457a25188255c7b168023">掘金 - HashMap为何从头插入改为尾插入</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis常用命令学习</title>
    <url>/2019/04/27/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p> 学习Redis常用命令</p>
<a id="more"></a>

<h2 id="各个结构常用命令"><a href="#各个结构常用命令" class="headerlink" title="各个结构常用命令"></a>各个结构常用命令</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul>
<li>SET</li>
<li>GET</li>
<li>DEL(适用于所有类型)</li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li>RPUSH</li>
<li>LRANGE key 0 -1</li>
<li>LINDEX</li>
<li>LPOP</li>
</ul>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul>
<li>SADD</li>
<li>SMEMBERS</li>
<li>SISMEMBER</li>
<li>SREM</li>
</ul>
<h3 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h3><h2 id="String-1"><a href="#String-1" class="headerlink" title="String"></a>String</h2><h3 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h3><blockquote>
<p>set key value [expiration EX seconds|PX milliseconds][NX|XX]</p>
</blockquote>
<p>将字符串值 <code>value</code> 关联到 <code>key</code> 。如果 <code>key</code> 已经持有其他值， <code>SET</code> 就覆写旧值， 无视类型。当 <code>SET</code> 命令对一个带有生存时间（TTL）的键进行设置之后， 该键原有的 TTL 将被清除。</p>
<p>从 Redis 2.6.12 版本开始， <code>SET</code> 命令只在设置操作成功完成时才返回 <code>OK</code> ； 如果命令使用了 <code>NX</code>或者 <code>XX</code> 选项， 但是因为条件没达到而造成设置操作未执行， 那么命令将返回空批量回复（NULL Bulk Reply）。</p>
<blockquote>
<p>SET key “value”<br>GET key</p>
<p>SET     key “value” EX seconds：将键的过期时间设置为 <code>seconds</code> 秒。 执行 <code>SET key value EX seconds</code> 的效果等同于执行 <code>SETEX key seconds value</code> 。</p>
<p>SET key “value” NX：只在键不存在时， 才对键进行设置操作。 执行 <code>SET key value NX</code> 的效果等同于执行 <code>SETNX key value</code> 。</p>
<p>SET key “value” XX：只在键已经存在时， 才对键进行设置操作。</p>
</blockquote>
<h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>返回与键 <code>key</code> 相关联的字符串值。</p>
<h3 id="GETSET"><a href="#GETSET" class="headerlink" title="GETSET"></a>GETSET</h3><p>将键 <code>key</code> 的值设为 <code>value</code> ， 并返回键 <code>key</code> 在被设置之前的旧值。 键 <code>key</code> 在被设置之前并不存在， 那么命令返回 <code>nil</code> 。</p>
<h3 id="STRLEN-key"><a href="#STRLEN-key" class="headerlink" title="STRLEN key"></a>STRLEN key</h3><p>返回键 <code>key</code> 储存的字符串值的长度。当键 <code>key</code> 不存在时， 命令返回 <code>0</code> 。</p>
<h3 id="APPEND"><a href="#APPEND" class="headerlink" title="APPEND"></a>APPEND</h3><p>如果键 <code>key</code> 已经存在并且它的值是一个字符串， <code>APPEND</code> 命令将把 <code>value</code> 追加到键 <code>key</code> 现有值的末尾。如果 <code>key</code> 不存在， <code>APPEND</code> 就简单地将键 <code>key</code> 的值设为 <code>value</code> ， 就像执行 <code>SET key value</code> 一样。</p>
<h3 id="SETRANGE"><a href="#SETRANGE" class="headerlink" title="SETRANGE"></a>SETRANGE</h3><blockquote>
<p> SETRANGE key offset value</p>
</blockquote>
<p>从偏移量 <code>offset</code> 开始， 用 <code>value</code> 参数覆写(overwrite)键 <code>key</code> 储存的字符串值。不存在的键 <code>key</code> 当作空白字符串处理。</p>
<h3 id="GETRANGE"><a href="#GETRANGE" class="headerlink" title="GETRANGE"></a>GETRANGE</h3><blockquote>
<p> GETRANGE key start end</p>
</blockquote>
<p>返回键 <code>key</code> 储存的字符串值的指定部分， 字符串的截取范围由 <code>start</code> 和 <code>end</code> 两个偏移量决定 (包括 <code>start</code> 和 <code>end</code> 在内)。</p>
<h3 id="INCR"><a href="#INCR" class="headerlink" title="INCR"></a>INCR</h3><p>为键 <code>key</code> 储存的数字值加上一。如果键 <code>key</code> 不存在， 那么它的值会先被初始化为 <code>0</code> ， 然后再执行 <code>INCR</code> 命令。如果键 <code>key</code> 储存的值不能被解释为数字， 那么 <code>INCR</code> 命令将返回一个错误。</p>
<h3 id="INCRBY"><a href="#INCRBY" class="headerlink" title="INCRBY"></a>INCRBY</h3><blockquote>
<p>INCRBY key increment</p>
</blockquote>
<p>为键 <code>key</code> 储存的数字值加上增量 <code>increment</code> 。如果键 <code>key</code> 不存在， 那么键 <code>key</code> 的值会先被初始化为 <code>0</code> ， 然后再执行 <code>INCRBY</code> 命令。</p>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="LPUSH"><a href="#LPUSH" class="headerlink" title="LPUSH"></a>LPUSH</h3><blockquote>
<p>LPUSH key value</p>
</blockquote>
<p>将一个或多个值 <code>value</code> 插入到列表 <code>key</code> 的表头。如果有多个 <code>value</code> 值，那么各个 <code>value</code> 值按从左到右的顺序依次插入到表头： 比如说，对空列表 <code>mylist</code> 执行命令 <code>LPUSH mylist a b c</code> ，列表的值将是 <code>c b a</code> ，这等同于原子性地执行 <code>LPUSH mylist a</code> 、 <code>LPUSH mylist b</code> 和 <code>LPUSH mylist c</code> 三个命令。</p>
<h3 id="LPUSHX"><a href="#LPUSHX" class="headerlink" title="LPUSHX"></a>LPUSHX</h3><blockquote>
<p>LPUSHX key value</p>
</blockquote>
<p>将值 <code>value</code> 插入到列表 <code>key</code> 的表头，当且仅当 <code>key</code> 存在并且是一个列表。</p>
<p>和 LPUSH key value [value …] 命令相反，当 <code>key</code> 不存在时， <a href="http://redisdoc.com/list/lpushx.html#lpushx">LPUSHX</a> 命令什么也不做。</p>
<h3 id="RPUSH"><a href="#RPUSH" class="headerlink" title="RPUSH"></a>RPUSH</h3><blockquote>
<p>RPUSH key value [value …]</p>
</blockquote>
<p>LPUSh和RPUSH都会返回当前列表的长度</p>
<h3 id="LPOP"><a href="#LPOP" class="headerlink" title="LPOP"></a>LPOP</h3><blockquote>
<p>LPOP key</p>
</blockquote>
<p>移除并返回列表 key的头元素</p>
<h3 id="RPOP"><a href="#RPOP" class="headerlink" title="RPOP"></a>RPOP</h3><h3 id="RPOPLPUSH"><a href="#RPOPLPUSH" class="headerlink" title="RPOPLPUSH"></a>RPOPLPUSH</h3><blockquote>
<p>RPOPLPUSH source destination</p>
</blockquote>
<p>执行两个动作：1. 将列表source中的最后一个元素弹出并返回给客户端 2. source弹出的元素插入destination，作为destination的头元素。</p>
<p>如果 <code>source</code> 和 <code>destination</code> 相同，则列表中的表尾元素被移动到表头，并返回该元素，可以把这种特殊情况视作列表的旋转(rotation)操作。</p>
<h3 id="LREM"><a href="#LREM" class="headerlink" title="LREM"></a>LREM</h3><blockquote>
<p>LREM key count value</p>
</blockquote>
<p>根据count 的值，移除列表中与 value相等的元素  </p>
<ul>
<li><code>        count &gt; 0</code> : 从表头开始向表尾搜索，移除与 <code>value</code> 相等的元素，数量为 <code>count</code> 。</li>
<li><code>count &lt; 0</code> : 从表尾开始向表头搜索，移除与 <code>value</code> 相等的元素，数量为 <code>count</code> 的绝对值。` </li>
<li><code>count = 0</code> : 移除表中所有与 <code>value</code> 相等的值。</li>
</ul>
<h3 id="LLEN"><a href="#LLEN" class="headerlink" title="LLEN"></a>LLEN</h3><blockquote>
<p>LLEN key</p>
</blockquote>
<p>返回key的长度</p>
<h3 id="LINDEX-key-index"><a href="#LINDEX-key-index" class="headerlink" title="LINDEX key index"></a>LINDEX key index</h3><p>返回列表中，下表为index的元素。0表示第一个元素，-1表示倒数第一个，-2 表示倒数第二个。越界返回nil.</p>
<h3 id="LINSERT-key-BEFORE-AFTER-pivot-value"><a href="#LINSERT-key-BEFORE-AFTER-pivot-value" class="headerlink" title="LINSERT key BEFORE|AFTER pivot value"></a>LINSERT key BEFORE|AFTER pivot value</h3><p>将值 <code>value</code> 插入到列表 <code>key</code> 当中，位于值 <code>pivot</code> 之前或之后。当 <code>pivot</code> 不存在于列表 <code>key</code> 时，不执行任何操作。当 <code>key</code> 不存在时， <code>key</code> 被视为空列表，不执行任何操作。</p>
<h3 id="LSET-key-index-value"><a href="#LSET-key-index-value" class="headerlink" title="LSET key index value"></a>LSET key index value</h3><p>将列表 <code>key</code> 下标为 <code>index</code> 的元素的值设置为 <code>value</code> </p>
<h3 id="LRANGE-key-start-stop"><a href="#LRANGE-key-start-stop" class="headerlink" title="LRANGE key start stop"></a>LRANGE key start stop</h3><p>返回列表 <code>key</code> 中指定区间内的元素，区间以偏移量 <code>start</code> 和 <code>stop</code> 指定。</p>
<p> <code>stop</code> 下标也在 <a href="http://redisdoc.com/list/lrange.html#lrange">LRANGE</a> 命令的取值范围之内(闭区间)</p>
<p>超出范围的下标值不会引起错误。</p>
<p>如果 <code>start</code> 下标比列表的最大下标 <code>end</code> ( <code>LLEN list</code> 减去 <code>1</code> )还要大，那么 <a href="http://redisdoc.com/list/lrange.html#lrange">LRANGE</a> 返回一个空列表。</p>
<p>如果 <code>stop</code> 下标比 <code>end</code> 下标还要大，Redis将 <code>stop</code> 的值设置为 <code>end</code> 。</p>
<p>查看key中的所有元素：<code>LRANGE key 0 -1 </code></p>
<h3 id="LTRIM-key-start-stop"><a href="#LTRIM-key-start-stop" class="headerlink" title="LTRIM key start stop"></a>LTRIM key start stop</h3><p>对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</p>
<blockquote>
<p>LRANGE fruit 0 -1</p>
</blockquote>
<h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><h3 id="HSET-hash-field-value"><a href="#HSET-hash-field-value" class="headerlink" title="HSET hash field value"></a>HSET hash field value</h3><p>将哈希表 <code>hash</code> 中域 <code>field</code> 的值设置为 <code>value</code> 。</p>
<p>如果给定的哈希表并不存在， 那么一个新的哈希表将被创建并执行 <code>HSET</code> 操作。</p>
<p>如果域 <code>field</code> 已经存在于哈希表中， 那么它的旧值将被新值 <code>value</code> 覆盖。</p>
<h3 id="HSETNX-hash-field-value"><a href="#HSETNX-hash-field-value" class="headerlink" title="HSETNX hash field value"></a>HSETNX hash field value</h3><p>当且仅当域 <code>field</code> 尚未存在于哈希表的情况下， 将它的值设置为 <code>value</code> 。</p>
<p>如果给定域已经存在于哈希表当中， 那么命令将放弃执行设置操作。</p>
<p>如果哈希表 <code>hash</code> 不存在， 那么一个新的哈希表将被创建并执行 <code>HSETNX</code> 命令。</p>
<h3 id="HGET-hash-field"><a href="#HGET-hash-field" class="headerlink" title="HGET hash field"></a>HGET hash field</h3><p>返回哈希表中给定域的值</p>
<h3 id="HEXISTS-hash-field"><a href="#HEXISTS-hash-field" class="headerlink" title="HEXISTS hash field"></a>HEXISTS hash field</h3><p>检查field是否存在于hash中，存在返回1，否则0</p>
<h3 id="HDEL-key-field-field-…"><a href="#HDEL-key-field-field-…" class="headerlink" title="HDEL key field [field …]"></a>HDEL key field [field …]</h3><p>删除</p>
<h3 id="HLEN-key"><a href="#HLEN-key" class="headerlink" title="HLEN key"></a>HLEN key</h3><h3 id="HSTRLEN-key-field"><a href="#HSTRLEN-key-field" class="headerlink" title="HSTRLEN key field"></a>HSTRLEN key field</h3><p>返回哈希表 <code>key</code> 中， 与给定域 <code>field</code> 相关联的值的字符串长度（string length）。</p>
<h3 id="HINCRBY-key-field-increment"><a href="#HINCRBY-key-field-increment" class="headerlink" title="HINCRBY key field increment"></a>HINCRBY key field increment</h3><p>哈希表 <code>key</code> 中的域 <code>field</code> 的值加上增量 <code>increment</code> 。</p>
<p>增量也可以为负数，相当于对给定域进行减法操作。</p>
<p>如果 <code>key</code> 不存在，一个新的哈希表被创建并执行 <a href="http://redisdoc.com/hash/hincrby.html#hincrby">HINCRBY</a> 命令。</p>
<p>如果域 <code>field</code> 不存在，那么在执行命令前，域的值被初始化为 <code>0</code> 。</p>
<h3 id="HINCRBYFLOAT-key-field-increment"><a href="#HINCRBYFLOAT-key-field-increment" class="headerlink" title="HINCRBYFLOAT key field increment"></a>HINCRBYFLOAT key field increment</h3><p>为哈希表 <code>key</code> 中的域 <code>field</code> 加上浮点数增量 <code>increment</code> 。</p>
<h3 id="HMSET-key-field-value-field-value-…"><a href="#HMSET-key-field-value-field-value-…" class="headerlink" title="HMSET key field value [field value …]"></a>HMSET key field value [field value …]</h3><p>同时将多个field-value 设置到哈希表中</p>
<h3 id="HMGET-key-field-field-…"><a href="#HMGET-key-field-field-…" class="headerlink" title="HMGET key field [field …]"></a>HMGET key field [field …]</h3><p>返回哈希表中，一个或多个给定的值</p>
<h3 id="HKEYS-key"><a href="#HKEYS-key" class="headerlink" title="HKEYS key"></a>HKEYS key</h3><p>返回哈希表 <code>key</code> 中的所有域。</p>
<h3 id="HVALS-key"><a href="#HVALS-key" class="headerlink" title="HVALS key"></a>HVALS key</h3><p>返回哈希表 <code>key</code> 中所有域的值。</p>
<h3 id="HGETALL-key"><a href="#HGETALL-key" class="headerlink" title="HGETALL key"></a>HGETALL key</h3><p>返回哈希表中，所有的域和值，以列表形式。在返回值里，紧跟每个域名(field name)之后是域的值(value)，所以返回值的长度是哈希表大小的两倍。</p>
<h2 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h2><p>集合和列表都能存储多个字符串，不同之处在于，列表可存储多个相同的字符串，而集合通过散列表保证自己存储的每个字符串各不相同。</p>
<h3 id="SADD-key-member-member-…"><a href="#SADD-key-member-member-…" class="headerlink" title="SADD key member [member …]"></a><strong>SADD</strong> key member [member …]</h3><p>将一个或多个 <code>member</code> 元素加入到集合 <code>key</code> 当中，已经存在于集合的 <code>member</code> 元素将被忽略。</p>
<h3 id="SISMEMBER-key-member"><a href="#SISMEMBER-key-member" class="headerlink" title="SISMEMBER key member"></a>SISMEMBER key member</h3><p>判断 <code>member</code> 元素是否集合 <code>key</code> 的成员。是，返回1，不是或key不存在，0.</p>
<h3 id="SPOP-key"><a href="#SPOP-key" class="headerlink" title="SPOP key"></a>SPOP key</h3><p>移除并返回集合中的一个随机元素。</p>
<h3 id="SRANDMEMBER-key-count"><a href="#SRANDMEMBER-key-count" class="headerlink" title="SRANDMEMBER key [count]"></a>SRANDMEMBER key [count]</h3><p>如果命令执行时，只提供了 <code>key</code> 参数，那么返回集合中的一个随机元素。</p>
<ul>
<li>如果 <code>count</code> 为正数，且小于集合基数，那么命令返回一个包含 <code>count</code> 个元素的数组，数组中的元素<strong>各不相同</strong>。如果 <code>count</code> 大于等于集合基数，那么返回整个集合。</li>
<li>如果 <code>count</code> 为负数，那么命令返回一个数组，数组中的元素<strong>可能会重复出现多次</strong>，而数组的长度为 <code>count</code> 的绝对值。</li>
</ul>
<h3 id="SREM-key-member"><a href="#SREM-key-member" class="headerlink" title="SREM key member"></a>SREM key member</h3><p>移除key中的一个或多个元素，不存在的将被忽略</p>
<h3 id="SMOVE-source-destination-member"><a href="#SMOVE-source-destination-member" class="headerlink" title="SMOVE source destination member"></a>SMOVE source destination member</h3><p>将 <code>member</code> 元素从 <code>source</code> 集合移动到 <code>destination</code> 集合。</p>
<p><a href="http://redisdoc.com/set/smove.html#smove">SMOVE</a> 是原子性操作。</p>
<h3 id="SCARD-key"><a href="#SCARD-key" class="headerlink" title="SCARD key"></a>SCARD key</h3><p>返回集合元素数量。key不存在，返回0.</p>
<h3 id="SMEMBERS-key"><a href="#SMEMBERS-key" class="headerlink" title="SMEMBERS key"></a><strong>SMEMBERS</strong> key</h3><p>返回集合 <code>key</code> 中的所有成员。不存在的 <code>key</code> 被视为空集合。</p>
<h3 id="SINTER-key-key-…"><a href="#SINTER-key-key-…" class="headerlink" title="SINTER key [key …]"></a>SINTER key [key …]</h3><p>返回所有集合的交集成员。</p>
<h3 id="SINTERSTORE-destination-key-key-…"><a href="#SINTERSTORE-destination-key-key-…" class="headerlink" title="SINTERSTORE destination key [key …]"></a>SINTERSTORE destination key [key …]</h3><p>这个命令类似于 [SINTER key <a href="http://redisdoc.com/set/sinter.html#sinter">key …]</a> 命令，但它将结果保存到 <code>destination</code> 集合，而不是简单地返回结果集。</p>
<p><code>destination</code> 可以是 <code>key</code> 本身。</p>
<h3 id="SUNION-key-key-…"><a href="#SUNION-key-key-…" class="headerlink" title="SUNION key [key …]"></a>SUNION key [key …]</h3><p>返回一个集合的全部成员，该集合是所有给定集合的并集。</p>
<h3 id="SUNIONSTORE-destination-key-key-…"><a href="#SUNIONSTORE-destination-key-key-…" class="headerlink" title="SUNIONSTORE destination key [key …]"></a>SUNIONSTORE destination key [key …]</h3><h3 id="SDIFF"><a href="#SDIFF" class="headerlink" title="SDIFF"></a>SDIFF</h3><p>返回多个集合的差集。返回存在于第一个集合而不在其他集合中的元素</p>
<h3 id="SDIFFSTORE-destination-key-key-…"><a href="#SDIFFSTORE-destination-key-key-…" class="headerlink" title="SDIFFSTORE destination key [key …]"></a>SDIFFSTORE destination key [key …]</h3><p>这个命令的作用和 [SDIFF key <a href="http://redisdoc.com/set/sdiff.html#sdiff">key …]</a> 类似，但它将结果保存到 <code>destination</code> 集合，而不是简单地返回结果集。</p>
<h2 id="Sorted-Sets"><a href="#Sorted-Sets" class="headerlink" title="Sorted Sets"></a>Sorted Sets</h2><h3 id="ZADD-key-score-member-score-member-score-member-…"><a href="#ZADD-key-score-member-score-member-score-member-…" class="headerlink" title="ZADD key score member [[score member][score member] …]"></a>ZADD key score member [[score member][score member] …]</h3><p>将一个或多个 <code>member</code> 元素及其 <code>score</code> 值加入到有序集 <code>key</code> 当中。</p>
<p>如果某个 <code>member</code> 已经是有序集的成员，那么更新这个 <code>member</code> 的 <code>score</code> 值，并通过重新插入这个 <code>member</code> 元素，来保证该 <code>member</code> 在正确的位置上。</p>
<p><code>score</code> 值可以是整数值或双精度浮点数。</p>
<h3 id="ZSCORE-key-member"><a href="#ZSCORE-key-member" class="headerlink" title="ZSCORE key member"></a>ZSCORE key member</h3><p>返回有序集 <code>key</code> 中，成员 <code>member</code> 的 <code>score</code> 值。</p>
<h3 id="ZINCRBY-key-increment-member"><a href="#ZINCRBY-key-increment-member" class="headerlink" title="ZINCRBY key increment member"></a>ZINCRBY key increment member</h3><p>为有序集 <code>key</code> 的成员 <code>member</code> 的 <code>score</code> 值加上增量 <code>increment</code> 。</p>
<p>可以通过传递一个负数值 <code>increment</code> ，让 <code>score</code> 减去相应的值，比如 <code>ZINCRBY key -5 member</code> ，就是让 <code>member</code> 的 <code>score</code> 值减去 <code>5</code> 。</p>
<p>当 <code>key</code> 不存在，或 <code>member</code> 不是 <code>key</code> 的成员时， <code>ZINCRBY key increment member</code> 等同于 <code>ZADD key increment member</code> 。</p>
<h3 id="ZCARD-key"><a href="#ZCARD-key" class="headerlink" title="ZCARD key"></a>ZCARD key</h3><p>返回key的长度</p>
<h3 id="ZCOUNT-key-min-max"><a href="#ZCOUNT-key-min-max" class="headerlink" title="ZCOUNT key min max"></a>ZCOUNT key min max</h3><p>返回key中score在[min … max]中成员的数量</p>
<h3 id="ZRANGE-key-start-stop-WITHSCORES"><a href="#ZRANGE-key-start-stop-WITHSCORES" class="headerlink" title="ZRANGE key start stop [WITHSCORES]"></a>ZRANGE key start stop [WITHSCORES]</h3><p>返回key中，指定区间内的成员，成员位置按照score值递增排序；相同score的成员按照字典顺序。</p>
<p>如果你需要成员按 <code>score</code> 值递减(从大到小)来排列，请使用 ZREVRANGE key start stop <a href="http://redisdoc.com/sorted_set/zrevrange.html#zrevrange">WITHSCORES]</a> 命令。</p>
<h3 id="ZREVRANGE-key-start-stop-WITHSCORES"><a href="#ZREVRANGE-key-start-stop-WITHSCORES" class="headerlink" title="ZREVRANGE key start stop [WITHSCORES]"></a>ZREVRANGE key start stop [WITHSCORES]</h3><p>和ZRANGE 类似，只不过排序规则变为递减。</p>
<h3 id="ZRANGEBYSCORE-key-min-max-WITHSCORES-LIMIT-offset-count"><a href="#ZRANGEBYSCORE-key-min-max-WITHSCORES-LIMIT-offset-count" class="headerlink" title="ZRANGEBYSCORE key min max [WITHSCORES][LIMIT offset count]"></a>ZRANGEBYSCORE key min max [WITHSCORES][LIMIT offset count]</h3><p>返回有序集 <code>key</code> 中，所有 <code>score</code> 值介于 <code>min</code> 和 <code>max</code> 之间(包括等于 <code>min</code> 或 <code>max</code> )的成员。有序集成员按 <code>score</code> 值递增(从小到大)次序排列。</p>
<h3 id="ZREVRANGEBYSCORE-key-min-max-WITHSCORES-LIMIT-offset-count"><a href="#ZREVRANGEBYSCORE-key-min-max-WITHSCORES-LIMIT-offset-count" class="headerlink" title="ZREVRANGEBYSCORE key min max [WITHSCORES][LIMIT offset count]"></a>ZREVRANGEBYSCORE key min max [WITHSCORES][LIMIT offset count]</h3><h3 id="ZRANK"><a href="#ZRANK" class="headerlink" title="ZRANK"></a>ZRANK</h3><p>ZRANK key member</p>
<p>返回有序集 <code>key</code> 中成员 <code>member</code> 的排名。其中有序集成员按 <code>score</code> 值递增(从小到大)顺序排列。排名以 <code>0</code> 为底，也就是说， <code>score</code> 值最小的成员排名为 <code>0</code> 。</p>
<h3 id="ZREVRANK"><a href="#ZREVRANK" class="headerlink" title="ZREVRANK"></a>ZREVRANK</h3><blockquote>
<p>ZREVRANK key member</p>
</blockquote>
<p>逆序</p>
<h3 id="ZREM"><a href="#ZREM" class="headerlink" title="ZREM"></a>ZREM</h3><blockquote>
<p>ZREM key member</p>
</blockquote>
<p>移除。</p>
<p>返回移除成功的数量。</p>
<h3 id="ZREMRANGEBYRANK"><a href="#ZREMRANGEBYRANK" class="headerlink" title="ZREMRANGEBYRANK"></a>ZREMRANGEBYRANK</h3><blockquote>
<p>ZREMRANGEBYRANK key start stop</p>
</blockquote>
<p>移除有序集 <code>key</code> 中，指定排名(rank)区间内的所有成员。</p>
<h3 id="ZREMRANGEBYSCORE"><a href="#ZREMRANGEBYSCORE" class="headerlink" title="ZREMRANGEBYSCORE"></a>ZREMRANGEBYSCORE</h3><blockquote>
<p>ZREMRANGEBYSCORE key min max</p>
</blockquote>
<p>移除score在[min … max]之间的所有成员</p>
<h3 id="ZRANGEBYLEX"><a href="#ZRANGEBYLEX" class="headerlink" title="ZRANGEBYLEX"></a>ZRANGEBYLEX</h3><blockquote>
<p>ZRANGEBYLEX key min max [LIMIT offset count]</p>
</blockquote>
<p>返回给定的有序集合键 <code>key</code> 中， 值介于 <code>min</code> 和 <code>max</code> 之间的成员。</p>
<p>合法的 <code>min</code> 和 <code>max</code> 参数必须包含 <code>(</code> 或者 <code>[</code> ， 其中 <code>(</code> 表示开区间（指定的值不会被包含在范围之内）， 而 <code>[</code> 则表示闭区间（指定的值会被包含在范围之内）。</p>
<blockquote>
<p>ZRANGEBYLEX myset [a [d</p>
</blockquote>
<p>返回member中值在 a和d之间（包含）的成员。</p>
<p>特殊值 <code>+</code> 和 <code>-</code> 在 <code>min</code> 参数以及 <code>max</code> 参数中具有特殊的意义， 其中 <code>+</code> 表示正无限， 而 <code>-</code> 表示负无限。 因此， 向一个所有成员的分值都相同的有序集合发送命令 <code>ZRANGEBYLEX &lt;zset&gt; - +</code> ， 命令将返回有序集合中的所有元素。</p>
<h3 id="ZLEXCOUNT"><a href="#ZLEXCOUNT" class="headerlink" title="ZLEXCOUNT"></a>ZLEXCOUNT</h3><blockquote>
<p>ZLEXCOUNT key min max</p>
</blockquote>
<p>与ZRANGEBYLEX类似，不过是返回数量。</p>
<h3 id="ZREMRANGEBYLEX"><a href="#ZREMRANGEBYLEX" class="headerlink" title="ZREMRANGEBYLEX"></a>ZREMRANGEBYLEX</h3><blockquote>
<p>ZREMRANGEBYLEX key min max</p>
</blockquote>
<p>对于一个所有成员的分值都相同的有序集合键 <code>key</code> 来说， 这个命令会移除该集合中， 成员介于 <code>min</code> 和 <code>max</code> 范围内的所有元素。</p>
<h2 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h2><h3 id="EXISTS-key"><a href="#EXISTS-key" class="headerlink" title="EXISTS  key"></a>EXISTS  key</h3><p>检查key是否存在</p>
<h3 id="TYPE-key"><a href="#TYPE-key" class="headerlink" title="TYPE key"></a>TYPE key</h3><p>key的存储值的类型</p>
<h3 id="RENAME-key-newkey"><a href="#RENAME-key-newkey" class="headerlink" title="RENAME key newkey"></a>RENAME key newkey</h3><p>key改名为newkey</p>
<h3 id="RENAMENX"><a href="#RENAMENX" class="headerlink" title="RENAMENX"></a>RENAMENX</h3><h3 id="MOVE-key-db"><a href="#MOVE-key-db" class="headerlink" title="MOVE key db"></a>MOVE key db</h3><p>将当前数据库的 <code>key</code> 移动到给定的数据库 <code>db</code> 当中。</p>
<p><strong>redis默认使用数据库 0</strong></p>
<h3 id="DEL-key-key-…"><a href="#DEL-key-key-…" class="headerlink" title="DEL key [key …]"></a>DEL key [key …]</h3><p>删除一个或多个key</p>
<h3 id="RANDOMKEY"><a href="#RANDOMKEY" class="headerlink" title="RANDOMKEY"></a>RANDOMKEY</h3><p>从当前数据库随机返回一个key</p>
<h3 id="DBSIZE"><a href="#DBSIZE" class="headerlink" title="DBSIZE"></a>DBSIZE</h3><p>返回当前数据库的key 的数量。</p>
<h3 id="KEYS-pattern"><a href="#KEYS-pattern" class="headerlink" title="KEYS pattern"></a>KEYS pattern</h3><p>查找所有符合给定模式 <code>pattern</code> 的 <code>key</code> ， 比如说：</p>
<ul>
<li><code>KEYS *</code> 匹配数据库中所有 <code>key</code> 。</li>
<li><code>KEYS h?llo</code> 匹配 <code>hello</code> ， <code>hallo</code> 和 <code>hxllo</code> 等。</li>
<li><code>KEYS h*llo</code> 匹配 <code>hllo</code> 和 <code>heeeeello</code> 等。</li>
<li><code>KEYS h[ae]llo</code> 匹配 <code>hello</code> 和 <code>hallo</code> ，但不匹配 <code>hillo</code> 。</li>
</ul>
<h3 id="SCAN"><a href="#SCAN" class="headerlink" title="SCAN"></a>SCAN</h3><p><a href="http://redisdoc.com/database/scan.html">redisdoc - SCNA</a></p>
<h3 id="SORT"><a href="#SORT" class="headerlink" title="SORT"></a>SORT</h3><p><a href="http://redisdoc.com/database/sort.html">redisdoc - sort</a></p>
<h3 id="FLUSHDB"><a href="#FLUSHDB" class="headerlink" title="FLUSHDB"></a>FLUSHDB</h3><p>清空当前数据库。总是返回OK</p>
<h3 id="FLUSHALL"><a href="#FLUSHALL" class="headerlink" title="FLUSHALL"></a>FLUSHALL</h3><p>清空整个Redis</p>
<h3 id="SELECT-index"><a href="#SELECT-index" class="headerlink" title="SELECT index"></a>SELECT index</h3><p>切换到指定数据库</p>
<h3 id="OBJECT-ENCODING"><a href="#OBJECT-ENCODING" class="headerlink" title="OBJECT ENCODING"></a>OBJECT ENCODING</h3><p>查看一个数据库键的值对象编码。</p>
<h2 id="自动过期"><a href="#自动过期" class="headerlink" title="自动过期"></a>自动过期</h2><h3 id="EXPIRE"><a href="#EXPIRE" class="headerlink" title="EXPIRE"></a>EXPIRE</h3><blockquote>
<p>EXPIRE key seconds</p>
</blockquote>
<p>为给定 <code>key</code> 设置生存时间(单位：秒)，当 <code>key</code> 过期时(生存时间为 <code>0</code> )，它会被自动删除。</p>
<p>可以对一个已经带有生存时间的 <code>key</code> 执行 <code>EXPIRE</code> 命令，新指定的生存时间会取代旧的生存时间。</p>
<h3 id="PEXPIRE"><a href="#PEXPIRE" class="headerlink" title="PEXPIRE"></a>PEXPIRE</h3><blockquote>
<p>PEXPIRE key milliseconds</p>
</blockquote>
<p>毫秒为单位</p>
<h3 id="EXPIREAT"><a href="#EXPIREAT" class="headerlink" title="EXPIREAT"></a>EXPIREAT</h3><blockquote>
<p>EXPIREAT key timestamp</p>
</blockquote>
<p>秒数时间戳</p>
<h3 id="PEXPIREAT"><a href="#PEXPIREAT" class="headerlink" title="PEXPIREAT"></a>PEXPIREAT</h3><blockquote>
<p>PEXPIREAT key milliseconds-timestamp</p>
</blockquote>
<h3 id="PERSIST"><a href="#PERSIST" class="headerlink" title="PERSIST"></a>PERSIST</h3><blockquote>
<p>PERSIST key</p>
</blockquote>
<p>移除key 的生存时间</p>
<h3 id="TTL-key"><a href="#TTL-key" class="headerlink" title="TTL key"></a>TTL key</h3><p>以秒为单位返回剩余生存时间</p>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="SAVE"><a href="#SAVE" class="headerlink" title="SAVE"></a>SAVE</h3><p><a href="http://redisdoc.com/persistence/save.html#save">SAVE</a> 命令执行一个同步保存操作，将当前 Redis 实例的所有数据快照(snapshot)以 RDB 文件的形式保存到硬盘。</p>
<p>SAVE会阻塞所有客户端。</p>
<h3 id="BGSAVE"><a href="#BGSAVE" class="headerlink" title="BGSAVE"></a>BGSAVE</h3><p>在后台异步(Asynchronously)保存当前数据库的数据到磁盘。</p>
<p><a href="http://redisdoc.com/persistence/bgsave.html#bgsave">BGSAVE</a> 命令执行之后立即返回 <code>OK</code> ，然后 Redis fork 出一个新子进程，原来的 Redis 进程(父进程)继续处理客户端请求，而子进程则负责将数据保存到磁盘，然后退出。</p>
<h3 id="BGREWRITEAOF"><a href="#BGREWRITEAOF" class="headerlink" title="BGREWRITEAOF"></a>BGREWRITEAOF</h3><p>执行一个 <a href="http://redis.io/topics/persistence#append-only-file">AOF文件</a> 重写操作。重写会创建一个当前 AOF 文件的体积优化版本。</p>
<h2 id="发布与订阅"><a href="#发布与订阅" class="headerlink" title="发布与订阅"></a>发布与订阅</h2><h3 id="PUBLISH"><a href="#PUBLISH" class="headerlink" title="PUBLISH"></a>PUBLISH</h3><blockquote>
<p>PUBLISH channel message</p>
</blockquote>
<p>将信息 <code>message</code> 发送到指定的频道 <code>channel</code> 。返回接收到消息 message 的订阅者数量</p>
<h3 id="SUBSCRIBE"><a href="#SUBSCRIBE" class="headerlink" title="SUBSCRIBE"></a>SUBSCRIBE</h3><blockquote>
<p>SUBSCRIBE channel [channel …]</p>
</blockquote>
<p>订阅给定的一个或多个频道的信息。</p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="MULTI"><a href="#MULTI" class="headerlink" title="MULTI"></a>MULTI</h3><p>标记一个事务块的开始。</p>
<p>事务块内的多条命令会按照先后顺序被放进一个队列当中，最后由 <a href="http://redisdoc.com/transaction/exec.html#exec">EXEC</a> 命令原子性(atomic)地执行。</p>
<h3 id="EXEC"><a href="#EXEC" class="headerlink" title="EXEC"></a>EXEC</h3><p>执行所有事务块内的命令。</p>
<h3 id="DISCARD"><a href="#DISCARD" class="headerlink" title="DISCARD"></a>DISCARD</h3><p>取消事务</p>
<h3 id="WATCH"><a href="#WATCH" class="headerlink" title="WATCH"></a>WATCH</h3><p>监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://redisdoc.com/">redisdoc</a></li>
<li><a href="https://redis.io/commands">redis-commands</a></li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-排序</title>
    <url>/2019/04/11/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>整理常用排序算法。</p>
<a id="more"></a>

<h1 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h1><p>将排序代码放在 sort()方法中。待排序元素实现Comparable接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序代码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array 排序数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] array)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断前一个元素是否小于后一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.compareTo(b) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换数组中两个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(T[] nums, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        T temp = nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>首先找到数组中最小的那个元素，然后将它和数组中第一个元素交换位置（第一个元素就是最小元素就和自己交换）。之后在剩下的元素中找到最小元素，将它和数组第二位置元素交换位置。知道整个数组有序。它在不断选在剩余元素中的最小者。</p>
<p>选择排序需要  N^2 / 2次比较和 N 次交换。它的运行时间和输入无关。数据移动是最少的。</p>
<p>该算法将第 i 小的元素放在第 i 个位置，i左边的元素不会再被访问。</p>
<p>时间复杂度：O(N^2)。空间复杂度O(1)。排序稳定。</p>
<h2 id="动图"><a href="#动图" class="headerlink" title="动图"></a>动图</h2><p><img src="selection.gif"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Selection</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">BaseSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = array.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> min = i;</span><br><span class="line">                <span class="keyword">if</span> (less(array[j], array[min]))</span><br><span class="line">                    min = j;</span><br><span class="line">                swap(array, i, min);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h2><p>从第一个元素开始，该元素认为被已排序，取出下一个元素</p>
<p>当前索引左边的元素有序，但可能会被移动。所需时间取决于输入的元素初始序列。</p>
<p>时间复杂度O(n^2)，空间O(1)，稳定。</p>
<h2 id="动图-1"><a href="#动图-1" class="headerlink" title="动图"></a>动图</h2><p><img src="insert.gif"></p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Insertion</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">BaseSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span> &amp;&amp; less(a[j], a[j - <span class="number">1</span>]); --j) &#123;</span><br><span class="line">                swap(a, j, j - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><h2 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h2><p>基于插入排序。思想是使数组中任意间隔为h的元素都是有序的。希尔排序使用插入排序对间隔 h 的序列进行排序。通过不断减小 h，最后令 h=1，就可以使得整个数组是有序的。</p>
<p>希尔排序的运行时间达不到平方级别，使用递增序列 1, 4, 13, 40, … 的希尔排序所需要的比较次数不会超过 N 的若干倍乘于递增序列的长度。后面介绍的高级排序算法只会比希尔排序快两倍左右。</p>
<h2 id="动图-2"><a href="#动图-2" class="headerlink" title="动图"></a>动图</h2><p><img src="shell.gif"></p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shell</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">BaseSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = a.length;</span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (h &lt; len / <span class="number">3</span>) &#123;</span><br><span class="line">            h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; len; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; less(a[j], a[j - h]); j -= h) &#123;</span><br><span class="line">                    swap(a, j, j - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            h /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><p>不基于比较。算法复杂度为O(n+k)，对空间复杂度要求高。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] countSrot(<span class="keyword">int</span>[] nums)&#123;</span><br><span class="line">    <span class="keyword">int</span> max = Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">int</span> len = nums.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a : nums)&#123;</span><br><span class="line">        max = Math.max(a, max);</span><br><span class="line">        min = Math.min(a, min);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建计数数组</span></span><br><span class="line">    <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[max - min + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 找到每个元素出现的次数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a : nums)&#123;</span><br><span class="line">        index = a - min;</span><br><span class="line">        ++ count[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算每个数字在排序后数组中应处于的位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; ++i)&#123;</span><br><span class="line">        count[i] += count[i-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据计数数组排序</span></span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a : nums)&#123;</span><br><span class="line">        index = --count[a-min];</span><br><span class="line">        res[index] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h2 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h2><p>将一个数组递归的分成两半分别排序，然后将结果归并。</p>
<p>稳定排序。性能不受输入影响。时间复杂度O(NlogN)</p>
<h2 id="动图-3"><a href="#动图-3" class="headerlink" title="动图"></a>动图</h2><p><img src="merge.gif"></p>
<h2 id="1-原地归并"><a href="#1-原地归并" class="headerlink" title="1. 原地归并"></a>1. 原地归并</h2><p>将a[low … mid]和 a[mid + 1… hi]归并成一个有序数组，将结果存在 a[ low … hi]中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">BaseSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> T[] aux;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(T[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先将所有元素复制到aux[] 中，然后归并回 a[]中。</span></span><br><span class="line">        <span class="keyword">int</span> i = low, j = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 复制数据到辅助数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = low; k &lt;= high; ++k) &#123;</span><br><span class="line">            aux[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = low; k &lt;= high; ++k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; mid) &#123;</span><br><span class="line">                <span class="comment">// 左边用尽，取右边元素</span></span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; high) &#123;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (less(aux[j], aux[i])) &#123;</span><br><span class="line">                <span class="comment">// 右半边当前元素小于左半边当前，取右半边</span></span><br><span class="line">                a[k] = aux[j++];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                a[k] = aux[i++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-自顶向下归并排序"><a href="#2-自顶向下归并排序" class="headerlink" title="2. 自顶向下归并排序"></a>2. 自顶向下归并排序</h2><p>时间复杂度一般为O(NlogN)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Up2DownMerge</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">MergeSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span> </span>&#123;</span><br><span class="line">        aux = (T[]) <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里最好这样写，否则容易出现StackOverflow 错误</span></span><br><span class="line">        <span class="keyword">if</span> (high &lt;= low) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = low + (high - low) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 将左半边排序</span></span><br><span class="line">        sort(a, low, mid);</span><br><span class="line">        <span class="comment">// 右半边排序</span></span><br><span class="line">        sort(a, mid + <span class="number">1</span>, high);</span><br><span class="line">        <span class="comment">// 归并</span></span><br><span class="line">        merge(a, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-自底向上归并"><a href="#3-自底向上归并" class="headerlink" title="3. 自底向上归并"></a>3. 自底向上归并</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Down2UpMerge</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">MergeSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = a.length;</span><br><span class="line">        aux = (T[]) <span class="keyword">new</span> Comparable[len];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; len; sz += sz) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> low = <span class="number">0</span>; low &lt; len - sz; low += sz * <span class="number">2</span>) &#123;</span><br><span class="line">                merge(a, low, low + sz - <span class="number">1</span>, Math.min(low + sz + sz - <span class="number">1</span>, len - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h2><p>平均时间复杂度：O(NlogN)，额外空间O(NlogN)，不稳定</p>
<h2 id="动图-4"><a href="#动图-4" class="headerlink" title="动图"></a>动图</h2><p><img src="quick.gif"></p>
<h2 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">BaseSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] array)</span> </span>&#123;</span><br><span class="line">        sort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] array, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (high &lt;= low) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j = partition(array, low, high);</span><br><span class="line">        sort(array, low, j - <span class="number">1</span>);</span><br><span class="line">        sort(array, j + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    一般写法</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort2</span><span class="params">(T[] arr, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lo &gt;= hi) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = lo, j = hi;</span><br><span class="line">        T k = arr[lo];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j].compareTo(k) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                arr[i++] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i].compareTo(k) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                arr[j--] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = k;</span><br><span class="line">        sort(arr, lo, i - <span class="number">1</span>);</span><br><span class="line">        sort(arr, i + <span class="number">1</span>, hi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="切分"><a href="#切分" class="headerlink" title="切分"></a>切分</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(T[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = low, j = high + <span class="number">1</span>;</span><br><span class="line">    T temp = a[low];</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (less(a[++i], temp) &amp;&amp; i != high) ;</span><br><span class="line">        <span class="keyword">while</span> (less(temp, a[--j]) &amp;&amp; j != low) ;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">        swap(a, i, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 切分值留在j中。</span></span><br><span class="line">    swap(a, low, j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切分的另一种写法</span></span><br><span class="line"><span class="comment">     改写法在用来解决TOP K问题是，遇到如[99,99]， k=1的输入会陷入死循环</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition2</span><span class="params">(T[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    T pivot = a[low];</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="comment">// 从右向左，找到第一个小于pivot的元素</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; less(pivot, a[high])) high--;</span><br><span class="line">        <span class="comment">// 交换</span></span><br><span class="line">        a[low] = a[high];</span><br><span class="line">        <span class="comment">// 从左到右找到第一个大于pivot的元素</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; less(a[low], pivot)) low++;</span><br><span class="line">        a[high] = a[low];</span><br><span class="line">    &#125;</span><br><span class="line">    a[low] = pivot;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">    <span class="comment">// a[0..low-1] &lt; pivot &lt; a[low+1...high]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k = arr[low];     </span><br><span class="line">    <span class="keyword">while</span> (low&lt;high)&#123;</span><br><span class="line">        <span class="comment">// 需要注意这里的 arr[high] &gt;= pivot</span></span><br><span class="line">        <span class="keyword">while</span> (low&lt;high &amp;&amp; arr[high]&gt;=k) --high;</span><br><span class="line">        arr[low]=arr[high];             </span><br><span class="line">        <span class="keyword">while</span> (low&lt;high &amp;&amp; arr[low]&lt;=k) ++low;</span><br><span class="line">        arr[high] = arr[low];           </span><br><span class="line">    &#125;</span><br><span class="line">    arr[low] = k;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按照a[low]的值进行切分。从左向右找到第一个大于temp的元素a[i]，从右向左找到第一个小于temp的元素a[j]，交换a[i] 和 a[j]，使得i左侧的元素都不大于temp，j右侧的元素都不小于temp，i和j相遇时循环退出，交换a[low]和a[j]。</p>
<h2 id="改进-三向快速切分"><a href="#改进-三向快速切分" class="headerlink" title="改进-三向快速切分"></a>改进-三向快速切分</h2><p>对于有大量重复元素的数组，可以将数组切分为三部分，分别对应小于、等于和大于切分元素。</p>
<p>三向切分快速排序对于有大量重复元素的随机数组可以在线性时间内完成排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort3way</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">BaseSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span> </span>&#123;</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (high &lt; low) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> lt = low, i = low + <span class="number">1</span>, gt = high;</span><br><span class="line">        T v = a[low];</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= gt) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = a[i].compareTo(v);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                swap(a, lt++, i++);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                swap(a, i, gt--);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// a[lo...lt-1] &lt; v=a[lt...gt] &lt; a[gt+1...high]</span></span><br><span class="line">        sort(a, low, lt - <span class="number">1</span>);</span><br><span class="line">        sort(a, gt + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以提取改成partition方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(high &lt; low) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 随机快排，在low和high中随机选一个位置，即随机选一个数做划分</span></span><br><span class="line">    swap(a, low + (<span class="keyword">int</span>)(Math.random()* (high - low + <span class="number">1</span>)), high );</span><br><span class="line">    <span class="keyword">int</span>[] k = partition(a, low, high);</span><br><span class="line">    sort(a, low, k[<span class="number">0</span>] - <span class="number">1</span>);</span><br><span class="line">    sort(a, k[<span class="number">0</span>] +<span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] partition(<span class="keyword">int</span>[] a, <span class="keyword">int</span> low, <span class="keyword">int</span> high)&#123;</span><br><span class="line">	<span class="keyword">int</span> lt = low, gt = high, i = low + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = a[low];</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= gt)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt; k)&#123;</span><br><span class="line">            swap(a, i++, lt++);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i] &gt; k)&#123;</span><br><span class="line">            swap(a, i, gt--);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            i ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;lt, gt&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**随机快排的额外空间复杂度是最好是O(longN)，最坏是O(N)**。空间用来记录断点位置。</p>
<h2 id="使用切分解决Top-K问题"><a href="#使用切分解决Top-K问题" class="headerlink" title="使用切分解决Top K问题"></a>使用切分解决Top K问题</h2><p>快速排序的 partition() 方法，会返回一个整数 j 使得 a[l..j-1] 小于等于 a[j]，且 a[j+1..h] 大于等于 a[j]，此时 a[j] 就是数组的第 j 大元素。partition()可以使用O(N)的平均复杂时间从无序数组找到第K大元素。</p>
<p><strong>注意</strong>：使用partition找的是第K小的元素，因为partition切分后左边是小于的，右边是大于的，如果要找第K大元素，应该 <code>k = nums.length - k</code>;</p>
<p>可以利用这个特性找出数组的第 k 个元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">select</span><span class="params">(T[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> low = <span class="number">0</span>, high = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (high &gt; low) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = partition2(nums, low, high);</span><br><span class="line">        <span class="keyword">if</span> (j == k) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[k];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; k) &#123;</span><br><span class="line">            high = j - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            low = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h3><p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。</p>
<p><a href="https://www.nowcoder.com/practice/6a296eb82cf844ca8539b57c23e6e9bf?tpId=13&tqId=11182&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking">在线编程</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">GetLeastNumbers_Solution</span><span class="params">(<span class="keyword">int</span> [] input, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = input.length;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">0</span> || k &gt; len || k&lt;=<span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = partion(input, start, end);</span><br><span class="line">        <span class="keyword">while</span>(index != (k - <span class="number">1</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(index &gt; (k-<span class="number">1</span>))&#123;</span><br><span class="line">                end = index - <span class="number">1</span>;</span><br><span class="line">                index = partion(input, start, end);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                start = index + <span class="number">1</span>;</span><br><span class="line">                index = partion(input, start, end);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; k;i++)&#123;</span><br><span class="line">            res.add(input[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><h2 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h2><p>时间复杂度，最坏平均最好都是O(NlogN)，空间O(1)，不稳定。</p>
<h2 id="动图-5"><a href="#动图-5" class="headerlink" title="动图"></a>动图</h2><p><img src="heapsort.gif"></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>heap[0]不放元素，根节点是heap[1]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heap</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T[] heap;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Heap</span><span class="params">(<span class="keyword">int</span> maxN)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.heap = (T[]) <span class="keyword">new</span> Comparable[maxN + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">siza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> heap[i].compareTo(heap[j]) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        T temp = heap[i];</span><br><span class="line">        heap[i] = heap[j];</span><br><span class="line">        heap[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以将数组理解为一个堆，对于堆中的第i个节点其在数组中的下标为i，其左孩子在数组中下标为2*i+1（不越界情况）,右孩子下标为 2 * i + 2(不越界)，其父节点为 (i - 1) / 2</p>
<h3 id="上浮"><a href="#上浮" class="headerlink" title="上浮"></a>上浮</h3><p>在堆中，当一个节点比父节点大，那么需要交换这个两个节点。交换后还可能比它新的父节点大，因此需要不断地进行比较和交换操作，把这种操作称为上浮。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点比父节点大，上浮</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">1</span> &amp;&amp; less(k &gt;&gt; <span class="number">1</span>, k)) &#123;</span><br><span class="line">        swap(k &gt;&gt; <span class="number">1</span>, k);</span><br><span class="line">        k = k &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="下沉"><a href="#下沉" class="headerlink" title="下沉"></a>下沉</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 父节点小于子节点，下沉</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> ((k &lt;&lt; <span class="number">1</span>) &lt;= n) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = k &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 找到两个子节点最大的那个子节点</span></span><br><span class="line">        <span class="keyword">if</span> (j &lt; n &amp;&amp; less(j, j + <span class="number">1</span>)) j++;</span><br><span class="line">        <span class="keyword">if</span> (!less(k, j)) <span class="keyword">break</span>;</span><br><span class="line">        swap(k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><p>插入到最底，然后上浮到合适位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(T a)</span></span>&#123;</span><br><span class="line">    heap[ ++ n] = a;</span><br><span class="line">    swim(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除最大"><a href="#删除最大" class="headerlink" title="删除最大"></a>删除最大</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除最大元素。首先从数组顶端删除最大，将数组最后一个放在顶端，然后让该元素下沉。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">delMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">    T max = heap[<span class="number">1</span>];</span><br><span class="line">    swap(<span class="number">1</span>, n --);</span><br><span class="line">    heap[n+<span class="number">1</span>] = <span class="keyword">null</span>;</span><br><span class="line">    sink(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="堆排序-1"><a href="#堆排序-1" class="headerlink" title="堆排序"></a>堆排序</h3><p>将最大元素和当前堆中数组最后一个元素交换位置，并且不删除它，那么就可以得到一个从未到头的递减序列。</p>
<h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><p>从右至左进行下沉操作，如果一个节点的两个节点都已经是堆有序，那么进行下沉操作可以使得这个节点为根节点的堆有序。叶子节点不需要进行下沉操作，可以忽略叶子节点的元素，因此只需要遍历一半的元素即可。</p>
<h4 id="交换堆顶与最后一个元素"><a href="#交换堆顶与最后一个元素" class="headerlink" title="交换堆顶与最后一个元素"></a>交换堆顶与最后一个元素</h4><p>交换后进行下沉操作</p>
<h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">BaseSort</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = len &gt;&gt; <span class="number">1</span>; k &gt;= <span class="number">1</span>; k--) &#123;</span><br><span class="line">            sink(a, k, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (len &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 交换后进行下沉操作</span></span><br><span class="line">            swap(a, <span class="number">1</span>, len--);</span><br><span class="line">            sink(a, <span class="number">1</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(T[] num, <span class="keyword">int</span> k, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> ((k &lt;&lt; <span class="number">1</span>) &lt;= n) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = k &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; n &amp;&amp; less(num[j], num[j + <span class="number">1</span>])) j++;</span><br><span class="line">            <span class="keyword">if</span> (!less(num[k], num[j])) <span class="keyword">break</span>;</span><br><span class="line">            swap(num, k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>堆高度为logN，插入删除的复杂度都是logN。</p>
<p>堆排序对N个节点进行下沉，复杂度NlogN。</p>
<p>没有利用额外空间。没有利用局部性原理缓存。</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。</p>
<p><a href="https://www.nowcoder.com/practice/6a296eb82cf844ca8539b57c23e6e9bf?tpId=13&tqId=11182&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking">在线编程</a></p>
<h3 id="利用堆解决"><a href="#利用堆解决" class="headerlink" title="利用堆解决"></a>利用堆解决</h3><p>使用最大堆保存这k个数，每次只和堆顶比，如果比堆顶小，删除堆顶，新数入堆。</p>
<p>时间：O(nlogk)</p>
<p>Java中的优先队列(<code>PriorityQueue</code>)是基于堆实现的，默认是自然排序，即默认构造最小堆，如果要更改排序规则，可以在构造时使用<code>Comparator</code>指定。优先队列中的元素可以通过Compartor定义规则。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">GetLeastNumbers_Solution</span><span class="params">(<span class="keyword">int</span>[] input, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = input.length;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (k &lt;= <span class="number">0</span> || len &lt; k) <span class="keyword">return</span> res;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; maxHeap =</span><br><span class="line">                <span class="keyword">new</span> PriorityQueue&lt;&gt;(k, Comparator.reverseOrder());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数组中的元素入堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a : input) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxHeap.size() &lt; k) &#123;</span><br><span class="line">                maxHeap.offer(a);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (maxHeap.peek() &gt; a) &#123;</span><br><span class="line">                maxHeap.poll();</span><br><span class="line">                maxHeap.offer(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res.addAll(maxHeap);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><img src="all.png"></p>
<p>稳定性定义：经过排序之后,能使值相同的数据保持原顺序中的相对位置不变</p>
<p>稳定性口诀：</p>
<blockquote>
<p> 快选堆希不稳（快速排序，选择排序，堆排序，希尔排序）</p>
<p>插冒归计基稳（插入排序，冒泡排序，归并排序，计数，基数）</p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li>《算法》第四版</li>
<li><a href="https://www.cnblogs.com/onepixel/p/7674659.html">博客园 - 十大经典排序算法（动图演示）</a></li>
<li><a href="https://selfboot.cn/2016/09/01/lost_partition/">被忽视的 partition 算法</a></li>
<li><a href="https://my.oschina.net/leejun2005/blog/135085">OSCHINA - 基于堆实现的优先级队列：PriorityQueue 解决 Top K 问题</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>&lt;亲密关系&gt;笔记整理-第三章</title>
    <url>/2020/11/08/%E4%BA%B2%E5%AF%86%E5%85%B3%E7%B3%BB-%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86-%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
    <content><![CDATA[<p>第3章 吸引力</p>
<a id="more"></a>

<p>感觉到他人的吸引力不一定能保证建立人际联系，但却使人际交往成为可能。</p>
<h1 id="基础：一种奖赏"><a href="#基础：一种奖赏" class="headerlink" title="基础：一种奖赏"></a>基础：一种奖赏</h1><p><strong>人与人之间产生吸引力最基本的假设是：他人的出现对于我们有奖赏意义</strong>。</p>
<p>影响吸引力的奖赏有两种类型：</p>
<ul>
<li>与他人交往产生的直接影响：他人给予我们许多兴趣和赞许，我们就会对这种关注和接纳感到高兴。</li>
<li>仅与他人有关的间接利益</li>
</ul>
<p>多数情况下，人们提供的直接奖赏越多，对我们的吸引力越强。</p>
<p>人们通常会去追求那些更可能是自己繁殖后代、遗传基因的伴侣，从这些特殊的伴侣身上同样能获得间接利益。</p>
<h1 id="临近：喜欢身边的人"><a href="#临近：喜欢身边的人" class="headerlink" title="临近：喜欢身边的人"></a>临近：喜欢身边的人</h1><p>多数情况下，友谊和爱情都源自与身边人的交往。</p>
<h2 id="方便：远亲不如近邻"><a href="#方便：远亲不如近邻" class="headerlink" title="方便：远亲不如近邻"></a>方便：远亲不如近邻</h2><p>如果他人在我们身边，我们很容易得到他们提供的各种奖赏。</p>
<p>与远距离的伙伴交往小号更多的金钱环付出的努力，这样的人际交往成本比住家附近交往成本更高。分居两地的亲密关系一般不如朝夕相处的亲密关系令人满意。</p>
<h2 id="熟识：重复接受"><a href="#熟识：重复接受" class="headerlink" title="熟识：重复接受"></a>熟识：重复接受</h2><p><strong>曝光效应</strong>：重复地接触他人通常能增加我们对他们的喜欢程度，而不会导致厌烦。</p>
<p>临近常常导致熟识，熟识又能引起喜欢，所以与他人频繁的接触不仅使交往方便，还会使对方看起来更有吸引力。</p>
<h2 id="临近的作用"><a href="#临近的作用" class="headerlink" title="临近的作用"></a>临近的作用</h2><p>临近能增加我们对他人的情感。喜欢的会更喜欢，厌烦的会更厌烦。</p>
<h1 id="长相吸引力：喜欢那些可爱的人"><a href="#长相吸引力：喜欢那些可爱的人" class="headerlink" title="长相吸引力：喜欢那些可爱的人"></a>长相吸引力：喜欢那些可爱的人</h1><p>长相吸引力对人们第一印象的形成有着重要的影响。外貌俊美的人更讨人喜欢。</p>
<h2 id="对美丽的偏见：美的就是好的"><a href="#对美丽的偏见：美的就是好的" class="headerlink" title="对美丽的偏见：美的就是好的"></a>对美丽的偏见：美的就是好的</h2><p>俊美之人的优势取决于具体文化所强调的价值观。</p>
<p>对美丽的偏见还可能诗人容易混淆容貌和才能：貌美之人比一般长相的人工资更高、晋升更快。</p>
<h2 id="吸引力的秘密"><a href="#吸引力的秘密" class="headerlink" title="吸引力的秘密"></a>吸引力的秘密</h2><p>人们对陌生人外貌是否美丽的判断具有惊人的一致性。</p>
<p>女性的腰臀比例比乳房大小更能影响男性对女性吸引力的判断。</p>
<p>男性要有一份体面的工作，他的腰臀比例才会影响女性对他的评价。</p>
<p>男女两性都倾向于男方高于女方。不考虑年龄性别，在美国和英国身高每增加1英寸，平均每年多挣789美元。</p>
<p>长发的女性比短发的女性对男性更有吸引力。</p>
<p>男女两性都认为穿红色衣服的约会对象更有吸引力。</p>
<h2 id="长相吸引力的演化观"><a href="#长相吸引力的演化观" class="headerlink" title="长相吸引力的演化观"></a>长相吸引力的演化观</h2><ul>
<li>世界各地的人对于美丑的评判仍趋向一致</li>
<li>面容英俊的男性比面容丑陋的男性的精子更健康</li>
<li>对称面孔的人往往有对称的体型，身体和心理更为健康，能找到更优秀的配偶。拥有对称体征的男女两性更少生病</li>
<li>荷尔蒙通过调节脂肪在人体的分布而影响腰臀比例。腰臀比接近0.7的女性身体更健康；腰臀比接近0.9的男性可能更健康</li>
<li>男人偏爱的长发与女性配偶的健康有关</li>
<li>有吸引力的人比缺乏吸引力的人生育更为成功</li>
<li>伴随月经周期，女性的偏好存在微妙的变化。受孕期内，女性比其他时间更偏爱男子气的面孔。</li>
</ul>
<h2 id="长相的重要性"><a href="#长相的重要性" class="headerlink" title="长相的重要性"></a>长相的重要性</h2><p>在全世界，男性比女性更关注伴侣的长相。</p>
<p><strong>外貌吸引力或许是影响男女之间最初喜欢彼此的最重要因素。</strong></p>
<h2 id="美丽：交织着的代价和利益"><a href="#美丽：交织着的代价和利益" class="headerlink" title="美丽：交织着的代价和利益"></a>美丽：交织着的代价和利益</h2><p>长相吸引力对男人的社交活动的影响比女人更重要。</p>
<p>俊美之人常常能与他人愉快交往，但不如长相平庸之人那样信任别人。</p>
<h2 id="长相吸引力的匹配"><a href="#长相吸引力的匹配" class="headerlink" title="长相吸引力的匹配"></a>长相吸引力的匹配</h2><p>人们最终通常是与自己容貌想当的人配对。已确定爱情关系的情侣，他们的长相吸引力往往是类似的，他们的容貌是相匹配的。</p>
<p>相似的长相吸引力或许是筛选伴侣的一个指标。</p>
<p>如果两个人看起来差异很大，亲密关系可能无法建立。</p>
<h1 id="礼尚往来：喜欢那些喜欢我们的人"><a href="#礼尚往来：喜欢那些喜欢我们的人" class="headerlink" title="礼尚往来：喜欢那些喜欢我们的人"></a>礼尚往来：喜欢那些喜欢我们的人</h1><p>吸引力匹配现象表明：要想享有成功的亲密关系，我们应该追求最有可能回报我们的伴侣。</p>
<p>对未来伴侣的期望值=伴侣的外表吸引 x 伴侣接纳自己的可能性。因此，最吸引人的伴侣是长相过得去，也很有可能接纳我们的人。</p>
<p><strong>一般而言，人们似乎特别注意到别人接纳和喜欢自己的可能性，他们更可能与那些愿意接纳而不是拒绝他们的人亲近。</strong></p>
<p>真正有用的是选择性的故作清高：除了你想吸引的人之外，任何人想要得到你都是可望不可即的。<strong>那些能付出代价拒绝大多数人却又能高兴地接纳我们的人，才是最有吸引力的未来伴侣。</strong></p>
<p>喜欢那些喜欢我们的人这一倾向与吸引力的奖赏模型一致，还符合平衡理论：人们期望他们的思想、感性和社交关系处能够保持一致。<strong>我们倾向于喜欢与我们态度一致的人。</strong></p>
<h1 id="相似性：喜欢与我们相像的人"><a href="#相似性：喜欢与我们相像的人" class="headerlink" title="相似性：喜欢与我们相像的人"></a>相似性：喜欢与我们相像的人</h1><p>人际吸引最基本的原则之一是相像律：相类似的人彼此吸引对方。</p>
<p>为什么人们会认为相异会相吸</p>
<h2 id="有吸引力的相像种类"><a href="#有吸引力的相像种类" class="headerlink" title="有吸引力的相像种类"></a>有吸引力的相像种类</h2><p>年龄、性别、教育程度等方面的相像。态度和价值观的相像。</p>
<p>吸引力受到人们相像程度的强烈影响。</p>
<p>伴侣们可能有相像的性格。长期来看，具有类似性格的人比性格迥异的人更加喜欢彼此。</p>
<h2 id="相异并不吸引"><a href="#相异并不吸引" class="headerlink" title="相异并不吸引"></a>相异并不吸引</h2><h3 id="匹配是广泛的过程"><a href="#匹配是广泛的过程" class="headerlink" title="匹配是广泛的过程"></a>匹配是广泛的过程</h3><p>名望、财富、健康、才能和长相一样都像商品一样，能用来吸引心仪的伴侣。</p>
<p>这种交易是演化心理学的核心观点：和健康、能生育的女人婚配更可能成功地繁衍下一代，自然选择促进了男性对年轻漂亮的伴侣的兴趣。年轻重要因为女性中年绝经后不能生育。漂亮重要与其身体健康有关联。</p>
<p>女性不必关心伴侣是否年轻，男性只要活着就有生殖能力，女性可偏爱能够保障母子幸福、拥有丰富资源社会地位高的男人。女性比男性更关心伴侣的经济状况；女性终其一生都喜欢嫁给比自己略大几岁的男人。</p>
<h3 id="发现差异需要时间"><a href="#发现差异需要时间" class="headerlink" title="发现差异需要时间"></a>发现差异需要时间</h3><p>即时吸引更多取决于长相。</p>
<h3 id="知觉到的相像与真实的相像：挥之不去的错误知觉"><a href="#知觉到的相像与真实的相像：挥之不去的错误知觉" class="headerlink" title="知觉到的相像与真实的相像：挥之不去的错误知觉"></a>知觉到的相像与真实的相像：挥之不去的错误知觉</h3><p>我们很少真正地如自己认为的那般了解伴侣。</p>
<p>知觉到的相像程度和关系满意度之间的相关高于真实的相像和关系满意度之间的相关。</p>
<h3 id="你就是我要成为的那种人"><a href="#你就是我要成为的那种人" class="headerlink" title="你就是我要成为的那种人"></a>你就是我要成为的那种人</h3><p>人们仰慕那些有能力和才华的人，这些特质使自己所没有并渴望拥有的。</p>
<p><strong>我们渴望成为的人对我们有吸引力。</strong>我们往往喜欢那些与我们的理想自我相像的人，即那些拥有我们渴望得到却并不具备的品质的人。</p>
<h3 id="差异可能随着时间减少"><a href="#差异可能随着时间减少" class="headerlink" title="差异可能随着时间减少"></a>差异可能随着时间减少</h3><p>相异并不相吸，某些差异会逐渐消退。</p>
<h3 id="某些相像更重要"><a href="#某些相像更重要" class="headerlink" title="某些相像更重要"></a>某些相像更重要</h3><p>如果伴侣在一些重要的议题上与我们保持一致，将特别具有奖赏价值。<strong>家务和角色属于有影响力的相像。</strong></p>
<p>共同分担家务可以使婚姻更加满足。态度和价值观的相像或许比性格更为重要。</p>
<h3 id="相异还能相吸：互补性"><a href="#相异还能相吸：互补性" class="headerlink" title="相异还能相吸：互补性"></a>相异还能相吸：互补性</h3><h3 id="相像具有吸引力的原因"><a href="#相像具有吸引力的原因" class="headerlink" title="相像具有吸引力的原因"></a>相像具有吸引力的原因</h3><p><strong>相像具有奖赏意义，相异则没有。</strong></p>
<h2 id="障碍：得不到就喜欢"><a href="#障碍：得不到就喜欢" class="headerlink" title="障碍：得不到就喜欢"></a>障碍：得不到就喜欢</h2><p>人们努力克服障碍以实现期望的基本倾向。面临失去某种事物的危险时，我们可能反而想得到更多。</p>
<p>罗密欧与朱丽叶效应：父母越是干涉子女的恋爱自由，他们彼此之间就会越加相爱。</p>
<p>酒吧临近关门，潜在出现的对象更有吸引力。</p>
<h1 id="男女两性期望的理想伴侣"><a href="#男女两性期望的理想伴侣" class="headerlink" title="男女两性期望的理想伴侣"></a>男女两性期望的理想伴侣</h1><p>男女两性对短期性伙伴的要求远不如长期那样挑剔。</p>
<p>女性考虑短期情人，能引起性激动即可；女性考虑长久的亲密关系时，更看重热情、忠诚、社会地位和资源。</p>
<p>男性在长期亲密关系中，更看重吸引力和活力而非社会地位和经济资源。</p>
<p>绝世容貌是男人所渴求的，但不如高水平的热情和忠诚重要。社会地位和资源在第三位。</p>
<p>金钱和财富是女人所追求的，但不如高少平的热情和忠诚重要。长相排在第三位。</p>
]]></content>
  </entry>
</search>
